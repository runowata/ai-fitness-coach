#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å Cloudflare R2
"""

import os
import sys
import django

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
django.setup()

from apps.workouts.models import Exercise, VideoClip
from apps.content.models import MediaAsset
from django.db import transaction

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è R2
R2_PUBLIC_BASE = 'https://pub-d620683e68bf49abb422f1bc95810ff7.r2.dev'

def create_sample_exercises():
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—à–∏—Ö –≤–∏–¥–µ–æ
    """
    print("\nüí™ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...")
    
    # –ü—Ä–∏–º–µ—Ä—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
    exercises_data = [
        {
            'id': 'warmup_01',
            'slug': 'warmup-breathing',
            'name': '–î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è —Ä–∞–∑–º–∏–Ω–∫–∞',
            'description': '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω–æ–µ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ',
            'difficulty': 'beginner',
            'muscle_groups': ['breathing'],
            'is_active': True
        },
        {
            'id': 'main_001',
            'slug': 'basic-pushups',
            'name': '–ë–∞–∑–æ–≤—ã–µ –æ—Ç–∂–∏–º–∞–Ω–∏—è',
            'description': '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –æ—Ç–∂–∏–º–∞–Ω–∏—è –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –≥—Ä—É–¥–∏ –∏ —Ä—É–∫',
            'difficulty': 'beginner',
            'muscle_groups': ['chest', 'arms'],
            'is_active': True
        },
        {
            'id': 'endurance_01',
            'slug': 'cardio-burst',
            'name': '–ö–∞—Ä–¥–∏–æ –≤–∑—Ä—ã–≤',
            'description': '–í—ã—Å–æ–∫–æ–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–µ –∫–∞—Ä–¥–∏–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ',
            'difficulty': 'intermediate',
            'muscle_groups': ['cardio'],
            'is_active': True
        },
        {
            'id': 'relaxation_01',
            'slug': 'cool-down-stretch',
            'name': '–†–∞—Å—Å–ª–∞–±–ª—è—é—â–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞',
            'description': '–ó–∞–≤–µ—Ä—à–∞—é—â–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è',
            'difficulty': 'beginner',
            'muscle_groups': ['flexibility'],
            'is_active': True
        }
    ]
    
    created = 0
    with transaction.atomic():
        for ex_data in exercises_data:
            exercise, created_flag = Exercise.objects.get_or_create(
                id=ex_data['id'],
                defaults=ex_data
            )
            if created_flag:
                created += 1
                print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–æ: {exercise.name}")
    
    print(f"  üìä –°–æ–∑–¥–∞–Ω–æ {created} –Ω–æ–≤—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
    return created

def create_sample_video_clips():
    """
    –°–æ–∑–¥–∞–µ—Ç VideoClip –∑–∞–ø–∏—Å–∏ –¥–ª—è –Ω–∞—à–∏—Ö –≤–∏–¥–µ–æ –≤ R2
    """
    print("\nüé¨ –°–æ–∑–¥–∞–Ω–∏–µ VideoClip –∑–∞–ø–∏—Å–µ–π...")
    
    # –ü—Ä–∏–º–µ—Ä—ã VideoClip –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—à–∏—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
    video_clips_data = [
        # –†–∞–∑–º–∏–Ω–∫–∞
        {
            'exercise_id': 'warmup_01',
            'type': 'technique',
            'archetype': 'bro',
            'model_name': 'mod1',
            'url': f'{R2_PUBLIC_BASE}/videos/exercises/warmup_01_technique_m01.mp4',
            'duration_seconds': 45
        },
        # –û—Å–Ω–æ–≤–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
        {
            'exercise_id': 'main_001',
            'type': 'technique',
            'archetype': 'bro',
            'model_name': 'mod1',
            'url': f'{R2_PUBLIC_BASE}/videos/exercises/main_001_technique_m01.mp4',
            'duration_seconds': 60
        },
        {
            'exercise_id': 'main_001',
            'type': 'technique',
            'archetype': 'bro',
            'model_name': 'mod2',
            'url': f'{R2_PUBLIC_BASE}/videos/exercises/main_001_technique_m02.mp4',
            'duration_seconds': 60
        },
        # –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å
        {
            'exercise_id': 'endurance_01',
            'type': 'technique',
            'archetype': 'bro',
            'model_name': 'mod1',
            'url': f'{R2_PUBLIC_BASE}/videos/exercises/endurance_01_technique_m01.mp4',
            'duration_seconds': 90
        },
        # –†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ
        {
            'exercise_id': 'relaxation_01',
            'type': 'technique',
            'archetype': 'bro',
            'model_name': 'mod1',
            'url': f'{R2_PUBLIC_BASE}/videos/exercises/relaxation_01_technique_m01.mp4',
            'duration_seconds': 120
        }
    ]
    
    created = 0
    with transaction.atomic():
        for clip_data in video_clips_data:
            try:
                exercise = Exercise.objects.get(id=clip_data['exercise_id'])
                clip, created_flag = VideoClip.objects.get_or_create(
                    exercise=exercise,
                    type=clip_data['type'],
                    archetype=clip_data['archetype'],
                    model_name=clip_data['model_name'],
                    defaults={
                        'url': clip_data['url'],
                        'duration_seconds': clip_data['duration_seconds'],
                        'is_active': True
                    }
                )
                if created_flag:
                    created += 1
                    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–æ: {exercise.name} - {clip_data['type']} ({clip_data['model_name']})")
            except Exercise.DoesNotExist:
                print(f"  ‚ö†Ô∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {clip_data['exercise_id']} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    print(f"  üìä –°–æ–∑–¥–∞–Ω–æ {created} –Ω–æ–≤—ã—Ö VideoClip")
    return created

def create_sample_media_assets():
    """
    –°–æ–∑–¥–∞–µ—Ç MediaAsset –∑–∞–ø–∏—Å–∏ –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
    """
    print("\nüé≠ –°–æ–∑–¥–∞–Ω–∏–µ MediaAsset –∑–∞–ø–∏—Å–µ–π...")
    
    # –ü—Ä–∏–º–µ—Ä—ã MediaAsset –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
    media_assets_data = [
        {
            'file_name': 'intro_bro_day01.mp4',
            'file_url': f'{R2_PUBLIC_BASE}/videos/motivation/intro_bro_day01.mp4',
            'asset_type': 'video',
            'category': 'motivation_intro',
            'archetype': 'bro',
            'tags': ['intro', 'day1']
        },
        {
            'file_name': 'weekly_bro_week1.mp4',
            'file_url': f'{R2_PUBLIC_BASE}/videos/weekly/weekly_bro_week1.mp4',
            'asset_type': 'video',
            'category': 'motivation_weekly',
            'archetype': 'bro',
            'tags': ['weekly', 'week1']
        },
        {
            'file_name': 'progress_bro_check1.mp4',
            'file_url': f'{R2_PUBLIC_BASE}/videos/progress/progress_bro_check1.mp4',
            'asset_type': 'video',
            'category': 'motivation_progress',
            'archetype': 'bro',
            'tags': ['progress', 'check1']
        },
        {
            'file_name': 'final_bro_congratulations.mp4',
            'file_url': f'{R2_PUBLIC_BASE}/videos/final/final_bro_congratulations.mp4',
            'asset_type': 'video',
            'category': 'motivation_final',
            'archetype': 'bro',
            'tags': ['final', 'congratulations']
        }
    ]
    
    created = 0
    with transaction.atomic():
        for asset_data in media_assets_data:
            asset, created_flag = MediaAsset.objects.get_or_create(
                file_name=asset_data['file_name'],
                defaults={
                    'file_url': asset_data['file_url'],
                    'cdn_url': asset_data['file_url'],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ URL –¥–ª—è CDN
                    'file_size': 1024 * 1024,  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä 1MB
                    'asset_type': asset_data['asset_type'],
                    'category': asset_data['category'],
                    'archetype': asset_data['archetype'],
                    'tags': asset_data['tags']
                }
            )
            if created_flag:
                created += 1
                print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–æ: {asset_data['file_name']}")
    
    print(f"  üìä –°–æ–∑–¥–∞–Ω–æ {created} –Ω–æ–≤—ã—Ö MediaAsset")
    return created

def verify_r2_urls():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö URL
    """
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö URL...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º VideoClip URL
    video_clips = VideoClip.objects.all()[:3]
    for clip in video_clips:
        try:
            import requests
            response = requests.head(clip.url, timeout=5)
            status = "‚úÖ –¥–æ—Å—Ç—É–ø–µ–Ω" if response.status_code == 200 else f"‚ùå –∫–æ–¥ {response.status_code}"
            print(f"  {clip.url.split('/')[-1]} - {status}")
        except Exception as e:
            print(f"  {clip.url.split('/')[-1]} - ‚ùå –æ—à–∏–±–∫–∞: {str(e)[:50]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º MediaAsset URL
    media_assets = MediaAsset.objects.all()[:3]
    for asset in media_assets:
        try:
            import requests
            response = requests.head(asset.file_url, timeout=5)
            status = "‚úÖ –¥–æ—Å—Ç—É–ø–µ–Ω" if response.status_code == 200 else f"‚ùå –∫–æ–¥ {response.status_code}"
            print(f"  {asset.file_name} - {status}")
        except Exception as e:
            print(f"  {asset.file_name} - ‚ùå –æ—à–∏–±–∫–∞: {str(e)[:50]}")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    print("üöÄ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–• –î–õ–Ø AI FITNESS COACH")
    print("=" * 55)
    
    try:
        exercises_created = create_sample_exercises()
        clips_created = create_sample_video_clips()
        assets_created = create_sample_media_assets()
        
        print("\n" + "=" * 55)
        print("‚úÖ –°–û–ó–î–ê–ù–ò–ï –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù–û!")
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   üí™ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {exercises_created}")
        print(f"   üé¨ VideoClip: {clips_created}")
        print(f"   üé≠ MediaAsset: {assets_created}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
        verify_r2_urls()
        
        print("\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Django —Å–µ—Ä–≤–µ—Ä: python manage.py runserver")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: python manage.py createsuperuser")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: /admin/")
        print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤–∏–¥–µ–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()