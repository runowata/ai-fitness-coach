#!/usr/bin/env python3
"""
–†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –†–ï–§–ê–ö–¢–û–†–ò–ù–ì
–ú–∞—Å—Å–æ–≤–∞—è –∑–∞–º–µ–Ω–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ Exercise –º–æ–¥–µ–ª–∏ –Ω–∞ CSVExercise
"""
import os
import re
import ast
import sys
from pathlib import Path
from typing import List, Dict, Tuple
import shutil
from datetime import datetime


class MassExerciseRefactor:
    def __init__(self, project_root: str):
        self.project_root = Path(project_root)
        self.backup_dir = self.project_root / f"backup_before_refactor_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        self.files_modified = []
        self.stats = {
            'files_processed': 0,
            'files_modified': 0,
            'exercise_imports_fixed': 0,
            'exercise_objects_fixed': 0,
            'muscle_groups_fixed': 0,
            'field_references_fixed': 0
        }
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∑–∞–º–µ–Ω—ã
        self.replacement_patterns = [
            # 1. –ò–º–ø–æ—Ä—Ç—ã Exercise
            {
                'pattern': r'from apps\.workouts\.models import ([^,\n]*,\s*)?Exercise([,\s][^,\n]*)?',
                'replacement': lambda m: f"from apps.workouts.models import {m.group(1) if m.group(1) else ''}CSVExercise{m.group(2) if m.group(2) else ''}",
                'description': 'Exercise import replacement'
            },
            {
                'pattern': r'from \.models import ([^,\n]*,\s*)?Exercise([,\s][^,\n]*)?',
                'replacement': lambda m: f"from .models import {m.group(1) if m.group(1) else ''}CSVExercise{m.group(2) if m.group(2) else ''}",
                'description': 'Relative Exercise import replacement'
            },
            
            # 2. Exercise.objects -> CSVExercise.objects
            {
                'pattern': r'\bExercise\.objects\b',
                'replacement': 'CSVExercise.objects',
                'description': 'Exercise.objects replacement'
            },
            
            # 3. Exercise.DoesNotExist -> CSVExercise.DoesNotExist
            {
                'pattern': r'\bExercise\.DoesNotExist\b',
                'replacement': 'CSVExercise.DoesNotExist',
                'description': 'Exercise.DoesNotExist replacement'
            },
            
            # 4. Exercise( -> CSVExercise(
            {
                'pattern': r'\bExercise\(',
                'replacement': 'CSVExercise(',
                'description': 'Exercise constructor replacement'
            },
            
            # 5. spec=Exercise -> spec=CSVExercise (–¥–ª—è Mock)
            {
                'pattern': r'spec=Exercise\b',
                'replacement': 'spec=CSVExercise',
                'description': 'Mock spec replacement'
            },
            
            # 6. @admin.register(Exercise) -> —É–¥–∞–ª–∏—Ç—å (—É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ models)
            {
                'pattern': r'@admin\.register\(Exercise\)',
                'replacement': '# @admin.register(Exercise) - REMOVED in Phase 5.6',
                'description': 'Admin register removal'
            }
        ]
        
        # –°–ª–æ–∂–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        self.complex_patterns = [
            # –ó–∞–º–µ–Ω–∞ –ø–æ–ª–µ–π Exercise –º–æ–¥–µ–ª–∏ –Ω–∞ CSVExercise –ø–æ–ª—è
            'exercise.slug -> exercise.id',
            'exercise.name -> exercise.name_ru', 
            'exercise.difficulty -> exercise.level',
            'muscle_groups -> —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ ai_tags'
        ]
    
    def create_backup(self):
        """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø—Ä–æ–µ–∫—Ç–∞"""
        print(f"üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤ {self.backup_dir}")
        
        # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –±—ç–∫–∞–ø–∞
        self.backup_dir.mkdir(exist_ok=True)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ Python —Ñ–∞–π–ª—ã
        for root, dirs, files in os.walk(self.project_root):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º .venv, .git –∏ backup –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            dirs[:] = [d for d in dirs if d not in {'.venv', 'venv', '.git', '__pycache__', 'backup_before_refactor'}]
            
            for file in files:
                if file.endswith('.py'):
                    src_path = Path(root) / file
                    rel_path = src_path.relative_to(self.project_root)
                    dst_path = self.backup_dir / rel_path
                    
                    # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    dst_path.parent.mkdir(parents=True, exist_ok=True)
                    shutil.copy2(src_path, dst_path)
        
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {len(list(self.backup_dir.rglob('*.py')))} —Ñ–∞–π–ª–æ–≤")
    
    def get_python_files(self) -> List[Path]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö Python —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        python_files = []
        exclude_dirs = {'.venv', 'venv', '.git', '__pycache__', 'node_modules', 'env'}
        
        # –î–æ–±–∞–≤–ª—è–µ–º backup –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        exclude_dirs.update({d.name for d in self.project_root.glob('backup_before_refactor_*')})
        
        for root, dirs, files in os.walk(self.project_root):
            dirs[:] = [d for d in dirs if d not in exclude_dirs]
            
            for file in files:
                if file.endswith('.py'):
                    file_path = Path(root) / file
                    python_files.append(file_path)
        
        return python_files
    
    def refactor_file(self, file_path: Path) -> bool:
        """–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open(file_path, 'r', encoding='utf-8') as f:
                original_content = f.read()
            
            modified_content = original_content
            file_modified = False
            changes_made = []
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞–º–µ–Ω—ã
            for pattern_info in self.replacement_patterns:
                pattern = pattern_info['pattern']
                replacement = pattern_info['replacement']
                description = pattern_info['description']
                
                if callable(replacement):
                    # –°–ª–æ–∂–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π
                    def repl_func(match):
                        return replacement(match)
                    new_content, count = re.subn(pattern, repl_func, modified_content)
                else:
                    # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞
                    new_content, count = re.subn(pattern, replacement, modified_content)
                
                if count > 0:
                    modified_content = new_content
                    file_modified = True
                    changes_made.append(f"{description}: {count} –∑–∞–º–µ–Ω")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    if 'import' in description:
                        self.stats['exercise_imports_fixed'] += count
                    elif 'objects' in description:
                        self.stats['exercise_objects_fixed'] += count
                    elif 'muscle_groups' in description:
                        self.stats['muscle_groups_fixed'] += count
                    else:
                        self.stats['field_references_fixed'] += count
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è CSVExercise –ø–æ–ª–µ–π
            field_fixes = self.fix_csvexercise_fields(modified_content)
            if field_fixes['content'] != modified_content:
                modified_content = field_fixes['content']
                file_modified = True
                changes_made.extend(field_fixes['changes'])
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –∏–∑–º–µ–Ω–∏–ª—Å—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
            if file_modified:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(modified_content)
                
                self.files_modified.append(str(file_path))
                self.stats['files_modified'] += 1
                
                print(f"‚úÖ –ò–∑–º–µ–Ω—ë–Ω: {file_path}")
                for change in changes_made:
                    print(f"   - {change}")
                
                return True
            
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_path}: {e}")
            return False
    
    def fix_csvexercise_fields(self, content: str) -> Dict[str, any]:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å CSVExercise"""
        modified_content = content
        changes = []
        
        # 1. exercise.slug -> exercise.id (CSVExercise –∏—Å–ø–æ–ª—å–∑—É–µ—Ç id –≤–º–µ—Å—Ç–æ slug)
        pattern = r'(\w+)\.slug'
        def slug_replacement(match):
            var_name = match.group(1)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç - –µ—Å–ª–∏ —ç—Ç–æ exercise/ex –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
            if var_name in ['exercise', 'ex', 'e']:
                return f'{var_name}.id'
            return match.group(0)  # –ù–µ –∏–∑–º–µ–Ω—è–µ–º –¥—Ä—É–≥–∏–µ .slug
        
        new_content, count = re.subn(pattern, slug_replacement, modified_content)
        if count > 0:
            modified_content = new_content
            changes.append(f"exercise.slug -> exercise.id: {count} –∑–∞–º–µ–Ω")
        
        # 2. exercise.name -> exercise.name_ru (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ —Ä—É—Å—Å–∫–æ–µ –∏–º—è)
        pattern = r'(\w+)\.name(?!\w)'  # name –Ω–æ –Ω–µ name_ru –∏–ª–∏ name_en
        def name_replacement(match):
            var_name = match.group(1)
            if var_name in ['exercise', 'ex', 'e']:
                return f'{var_name}.name_ru'
            return match.group(0)
        
        new_content, count = re.subn(pattern, name_replacement, modified_content)
        if count > 0:
            modified_content = new_content
            changes.append(f"exercise.name -> exercise.name_ru: {count} –∑–∞–º–µ–Ω")
        
        # 3. exercise.difficulty -> exercise.level
        pattern = r'(\w+)\.difficulty\b'
        def difficulty_replacement(match):
            var_name = match.group(1)
            if var_name in ['exercise', 'ex', 'e']:
                return f'{var_name}.level'
            return match.group(0)
        
        new_content, count = re.subn(pattern, difficulty_replacement, modified_content)
        if count > 0:
            modified_content = new_content
            changes.append(f"exercise.difficulty -> exercise.level: {count} –∑–∞–º–µ–Ω")
        
        # 4. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è Exercise –æ–±—ä–µ–∫—Ç–æ–≤
        # Exercise.objects.create(slug=..., name=..., difficulty=...) ->
        # CSVExercise.objects.create(id=..., name_ru=..., level=...)
        
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è Exercise
        create_pattern = r'CSVExercise\.objects\.create\((.*?)\)'
        
        def fix_create_params(match):
            params = match.group(1)
            # –ó–∞–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            params = re.sub(r'slug=', 'id=', params)
            params = re.sub(r'name=([^,\)]+)', r'name_ru=\1, name_en=\1', params)
            params = re.sub(r'difficulty=', 'level=', params)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            if 'muscle_group=' not in params:
                params += ', muscle_group="full_body"'
            if 'exercise_type=' not in params:
                params += ', exercise_type="strength"'
            if 'is_active=' not in params:
                params += ', is_active=True'
            
            return f'CSVExercise.objects.create({params})'
        
        new_content = re.sub(create_pattern, fix_create_params, modified_content)
        if new_content != modified_content:
            modified_content = new_content
            changes.append("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã CSVExercise.objects.create()")
        
        return {
            'content': modified_content,
            'changes': changes
        }
    
    def run_mass_refactor(self):
        """–ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("üöÄ –ù–ê–ß–ê–õ–û –ú–ê–°–°–û–í–û–ì–û –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê")
        print("=" * 60)
        
        # 1. –°–æ–∑–¥–∞—ë–º backup
        self.create_backup()
        
        # 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        python_files = self.get_python_files()
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(python_files)} Python —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        print("\nüîß –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–û–í:")
        for i, file_path in enumerate(python_files, 1):
            self.stats['files_processed'] += 1
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if i % 10 == 0:
                print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(python_files)} —Ñ–∞–π–ª–æ–≤")
            
            self.refactor_file(file_path)
        
        # 4. –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.print_statistics()
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.validate_refactoring()
    
    def print_statistics(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        print("\n" + "=" * 60)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê:")
        print(f"   –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['files_processed']}")
        print(f"   –§–∞–π–ª–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ: {self.stats['files_modified']}")
        print(f"   Exercise –∏–º–ø–æ—Ä—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.stats['exercise_imports_fixed']}")
        print(f"   Exercise.objects –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.stats['exercise_objects_fixed']}")
        print(f"   muscle_groups –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.stats['muscle_groups_fixed']}")
        print(f"   –î—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.stats['field_references_fixed']}")
        
        total_fixes = (self.stats['exercise_imports_fixed'] + 
                      self.stats['exercise_objects_fixed'] + 
                      self.stats['muscle_groups_fixed'] + 
                      self.stats['field_references_fixed'])
        print(f"   –í–°–ï–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô: {total_fixes}")
        
        if self.files_modified:
            print(f"\nüìù –ò–ó–ú–ï–ù–Å–ù–ù–´–ï –§–ê–ô–õ–´ ({len(self.files_modified)}):")
            for file_path in self.files_modified[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"   - {file_path}")
            if len(self.files_modified) > 10:
                print(f"   ... –∏ –µ—â—ë {len(self.files_modified) - 10} —Ñ–∞–π–ª–æ–≤")
    
    def validate_refactoring(self):
        """–ë—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("\nüîç –ë–´–°–¢–†–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è Exercise —Å—Å—ã–ª–∫–∏
        remaining_exercise_refs = 0
        remaining_files = []
        
        python_files = self.get_python_files()
        
        for file_path in python_files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                problematic_patterns = [
                    r'\bExercise\.objects\b',
                    r'\bExercise\.DoesNotExist\b',
                    r'from.*Exercise(?!Validation)',  # Exercise –Ω–æ –Ω–µ ExerciseValidation
                    r'import.*Exercise(?!Validation)'
                ]
                
                file_has_issues = False
                for pattern in problematic_patterns:
                    if re.search(pattern, content):
                        if not file_has_issues:
                            remaining_files.append(str(file_path))
                            file_has_issues = True
                        remaining_exercise_refs += len(re.findall(pattern, content))
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {file_path}: {e}")
        
        if remaining_exercise_refs == 0:
            print("‚úÖ –†–ï–§–ê–ö–¢–û–†–ò–ù–ì –£–°–ü–ï–®–ï–ù! –û—Å—Ç–∞—Ç–∫–æ–≤ Exercise –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {remaining_exercise_refs} –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å—Å—ã–ª–æ–∫ –Ω–∞ Exercise –≤ {len(remaining_files)} —Ñ–∞–π–ª–∞—Ö:")
            for file_path in remaining_files[:5]:
                print(f"   - {file_path}")
            if len(remaining_files) > 5:
                print(f"   ... –∏ –µ—â—ë {len(remaining_files) - 5} —Ñ–∞–π–ª–æ–≤")
    
    def rollback_changes(self):
        """–û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ backup"""
        if not self.backup_dir.exists():
            print("‚ùå Backup –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–∫–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")
            return False
        
        print(f"üîÑ –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ {self.backup_dir}")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ backup
        for backup_file in self.backup_dir.rglob('*.py'):
            rel_path = backup_file.relative_to(self.backup_dir)
            original_file = self.project_root / rel_path
            
            if original_file.exists():
                shutil.copy2(backup_file, original_file)
        
        print("‚úÖ –û—Ç–∫–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω")
        return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ú–ê–°–°–û–í–´–ô –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –†–ï–§–ê–ö–¢–û–†–ò–ù–ì")
    print("–ó–∞–º–µ–Ω–∞ –≤—Å–µ—Ö Exercise ‚Üí CSVExercise")
    print("=" * 60)
    
    project_root = os.getcwd()
    refactor = MassExerciseRefactor(project_root)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥—É—Ç –∏–∑–º–µ–Ω–µ–Ω—ã –í–°–ï Python —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ!")
    print(f"–ü—Ä–æ–µ–∫—Ç: {project_root}")
    print("–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏.")
    
    confirm = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/y –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è): ").lower()
    if confirm not in ['yes', 'y']:
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥
        refactor.run_mass_refactor()
        
        print("\nüéâ –ú–ê–°–°–û–í–´–ô –†–ï–§–ê–ö–¢–û–†–ò–ù–ì –ó–ê–í–ï–†–®–Å–ù!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã.")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–∫–∞—Ç –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        rollback = input("\n–ï—Å–ª–∏ –Ω—É–∂–µ–Ω –æ—Ç–∫–∞—Ç, –≤–≤–µ–¥–∏—Ç–µ 'rollback': ").lower()
        if rollback == 'rollback':
            refactor.rollback_changes()
        
    except KeyboardInterrupt:
        print("\n‚ùå –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        rollback = input("–ù—É–∂–µ–Ω –æ—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π? (y/n): ").lower()
        if rollback == 'y':
            refactor.rollback_changes()
    
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        rollback = input("–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–∫–∞—Ç? (y/n): ").lower()
        if rollback == 'y':
            refactor.rollback_changes()


if __name__ == '__main__':
    main()