#!/usr/bin/env python
"""
–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
"""
import os
import sys
import django
import json
import time

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
sys.path.append('/Users/alexbel/Desktop/–ü—Ä–æ–µ–∫—Ç—ã/AI Fitness Coach')
django.setup()

from django.contrib.auth import get_user_model
from apps.onboarding.services import OnboardingDataProcessor
from apps.ai_integration.services import WorkoutPlanGenerator
from apps.workouts.models import WorkoutPlan
from django.conf import settings

User = get_user_model()

def main():
    print("=" * 70)
    print("üîç –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê AI –°–ò–°–¢–ï–ú–´")
    print("=" * 70)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    print("\nüìã 1. –ü–†–û–í–ï–†–ö–ê –ù–ê–°–¢–†–û–ï–ö:")
    print(f"   - OPENAI_MODEL: {settings.OPENAI_MODEL}")
    print(f"   - OPENAI_MODEL_MINI: {settings.OPENAI_MODEL_MINI}")
    api_key = settings.OPENAI_API_KEY
    if api_key:
        print(f"   - OPENAI_API_KEY: {api_key[:10]}...{api_key[-4:] if len(api_key) > 14 else '***'}")
    else:
        print("   - OPENAI_API_KEY: ‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù!")
        return
    
    # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\nüë§ 2. –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:")
    try:
        user = User.objects.get(email='diagnostic@test.com')
        print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.email}")
        print(f"   - –ê—Ä—Ö–µ—Ç–∏–ø: {user.profile.archetype}")
        print(f"   - –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –æ—Ç–≤–µ—Ç–æ–≤: {user.onboarding_responses.count()}")
    except User.DoesNotExist:
        print("   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
    print("\nüìä 3. –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• –û–ù–ë–û–†–î–ò–ù–ì–ê:")
    try:
        user_data = OnboardingDataProcessor.collect_user_data(user)
        print(f"   ‚úÖ –°–æ–±—Ä–∞–Ω–æ {len(user_data)} –ø–æ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö")
        print(f"   - –í–æ–∑—Ä–∞—Å—Ç: {user_data.get('age', 'N/A')}")
        print(f"   - –†–æ—Å—Ç: {user_data.get('height', 'N/A')} —Å–º")
        print(f"   - –í–µ—Å: {user_data.get('weight', 'N/A')} –∫–≥")
        print(f"   - –¶–µ–ª—å: {user_data.get('primary_goal', 'N/A')}")
        print(f"   - –ê—Ä—Ö–µ—Ç–∏–ø: {user_data.get('archetype', 'N/A')}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return
    
    # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI –ø–ª–∞–Ω–∞
    print("\nü§ñ 4. –ì–ï–ù–ï–†–ê–¶–ò–Ø AI –ü–õ–ê–ù–ê:")
    print("   –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
    
    start_time = time.time()
    generator = WorkoutPlanGenerator()
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω
        result = generator.generate_plan(
            user_data=user_data,
            use_comprehensive=True
        )
        
        generation_time = time.time() - start_time
        
        print(f"\n   ‚úÖ –ü–ª–∞–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ {generation_time:.1f} —Å–µ–∫—É–Ω–¥")
        
        # 5. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        print("\nüìà 5. –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–ê:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ fallback
        if result.get('fallback_used'):
            print("   ‚ö†Ô∏è –ò–°–ü–û–õ–¨–ó–û–í–ê–ù FALLBACK (–Ω–µ —Ä–µ–∞–ª—å–Ω—ã–π AI)")
            print(f"   - –ü—Ä–∏—á–∏–Ω–∞: {result.get('fallback_reason', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        else:
            print("   ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–µ–∞–ª—å–Ω—ã–π AI")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ comprehensive –∞–Ω–∞–ª–∏–∑–∞
        if result.get('comprehensive'):
            print("   ‚úÖ Comprehensive –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            if 'analysis' in result:
                print("   - –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                print("   - –°–∏—Å—Ç–µ–º–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                print("   - –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        else:
            print("   ‚ö†Ô∏è Comprehensive –∞–Ω–∞–ª–∏–∑ –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        training_program = result.get('training_program', {})
        if training_program:
            weeks = training_program.get('weeks', [])
            print(f"\n   üìÖ –°–¢–†–£–ö–¢–£–†–ê –ü–õ–ê–ù–ê:")
            print(f"   - –ù–µ–¥–µ–ª—å –≤ –ø–ª–∞–Ω–µ: {len(weeks)}")
            
            total_workouts = 0
            total_exercises = 0
            
            for week in weeks:
                days = week.get('days', [])
                total_workouts += len(days)
                for day in days:
                    exercises = day.get('exercises', [])
                    total_exercises += len(exercises)
            
            print(f"   - –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {total_workouts}")
            print(f"   - –í—Å–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {total_exercises}")
            
            # –ü—Ä–∏–º–µ—Ä—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
            if weeks and weeks[0].get('days'):
                first_day = weeks[0]['days'][0]
                print(f"\n   üí™ –ü–†–ò–ú–ï–† –¢–†–ï–ù–ò–†–û–í–ö–ò (–ù–µ–¥–µ–ª—è 1, –î–µ–Ω—å 1):")
                for i, ex in enumerate(first_day.get('exercises', [])[:3], 1):
                    print(f"      {i}. {ex.get('exercise_slug', 'Unknown')}: {ex.get('sets', 0)}x{ex.get('reps', 0)}")
        
        # 6. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        print("\nüíæ 6. –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ë–ê–ó–£ –î–ê–ù–ù–´–•:")
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–ª–∞–Ω—ã
            WorkoutPlan.objects.filter(user=user).delete()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω
            plan = WorkoutPlan.objects.create(
                user=user,
                name=result.get('goal', '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω'),
                duration_weeks=len(training_program.get('weeks', [])),
                goal=result.get('goal', '–û–±—â–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞'),
                plan_data=json.dumps(training_program),
                description=result.get('description', ''),
                motivation_text=result.get('motivation_text', ''),
                user_analysis=result.get('analysis', {}),
                long_term_strategy=result.get('long_term_strategy', {}),
                is_active=True
            )
            print(f"   ‚úÖ –ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î —Å ID: {plan.id}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        
    except Exception as e:
        print(f"\n   ‚ùå –û–®–ò–ë–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò: {e}")
        import traceback
        print("\n   –î–ï–¢–ê–õ–ò –û–®–ò–ë–ö–ò:")
        traceback.print_exc()
    
    print("\n" + "=" * 70)
    print("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 70)

if __name__ == '__main__':
    main()