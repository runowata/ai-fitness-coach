# Generated by Django 5.0.8 on 2025-08-27 15:58 - Clean Initial Migration

import apps.workouts.constants
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="CSVExercise",
            fields=[
                (
                    "id",
                    models.CharField(max_length=20, primary_key=True, serialize=False),
                ),
                ("name_ru", models.CharField(max_length=120)),
                ("name_en", models.CharField(blank=True, max_length=120)),
                ("description", models.TextField(blank=True)),
                ("level", models.CharField(default="beginner", max_length=20)),
                ("muscle_group", models.CharField(blank=True, max_length=120)),
                ("exercise_type", models.CharField(blank=True, max_length=120)),
                ("ai_tags", models.JSONField(blank=True, default=list)),
                (
                    "r2_slug",
                    models.CharField(
                        blank=True, help_text="Original R2 slug format", max_length=50
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                "verbose_name": "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ CSV",
                "verbose_name_plural": "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è CSV",
                "db_table": "csv_exercises",
            },
        ),
        migrations.CreateModel(
            name="DailyWorkout",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("day_number", models.PositiveIntegerField()),
                ("week_number", models.PositiveIntegerField()),
                ("name", models.CharField(max_length=200)),
                ("exercises", models.JSONField()),
                ("is_rest_day", models.BooleanField(default=False)),
                ("confidence_task", models.TextField(blank=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "feedback_rating",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("fire", "üî• Great"),
                            ("smile", "üôÇ Good"),
                            ("neutral", "üòê OK"),
                            ("tired", "ü§ï Hard"),
                        ],
                        max_length=10,
                    ),
                ),
                ("feedback_note", models.TextField(blank=True)),
                ("substitutions", models.JSONField(default=dict)),
            ],
            options={
                "db_table": "daily_workouts",
                "ordering": ["day_number"],
            },
        ),
        migrations.CreateModel(
            name="FinalVideo",
            fields=[
                (
                    "arch",
                    models.CharField(
                        choices=[("111", "–ù"), ("222", "–ü"), ("333", "–†")],
                        max_length=3,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("locale", models.CharField(default="ru", max_length=5)),
                ("script", models.TextField()),
            ],
            options={
                "db_table": "final_videos",
            },
        ),
        migrations.CreateModel(
            name="WeeklyTheme",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "week_number",
                    models.PositiveIntegerField(
                        help_text="Week number in the course (1-8)",
                        unique=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(8),
                        ],
                    ),
                ),
                (
                    "theme_title",
                    models.CharField(
                        help_text="Title of the weekly theme", max_length=100
                    ),
                ),
                (
                    "focus_area",
                    models.CharField(
                        help_text="Main focus area for the week", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of weekly objectives",
                    ),
                ),
                (
                    "mentor_content",
                    models.TextField(
                        blank=True, help_text="Content adapted for mentor archetype"
                    ),
                ),
                (
                    "professional_content",
                    models.TextField(
                        blank=True,
                        help_text="Content adapted for professional archetype",
                    ),
                ),
                (
                    "peer_content",
                    models.TextField(
                        blank=True, help_text="Content adapted for peer archetype"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "weekly_themes",
                "ordering": ["week_number"],
            },
        ),
        migrations.CreateModel(
            name="WeeklyLesson",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("week", models.PositiveSmallIntegerField()),
                (
                    "archetype",
                    models.CharField(
                        choices=[("111", "–ù"), ("222", "–ü"), ("333", "–†")], max_length=3
                    ),
                ),
                ("locale", models.CharField(default="ru", max_length=5)),
                ("title", models.CharField(max_length=120)),
                ("script", models.TextField()),
                (
                    "duration_sec",
                    models.PositiveIntegerField(
                        default=180, help_text="Estimated reading time in seconds"
                    ),
                ),
            ],
            options={
                "db_table": "weekly_lessons",
                "ordering": ["week"],
                "unique_together": {("week", "archetype", "locale")},
            },
        ),
        migrations.CreateModel(
            name="WorkoutExecution",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("exercise_data", models.JSONField()),
                ("calories_burned", models.PositiveIntegerField(blank=True, null=True)),
                ("xp_earned", models.PositiveIntegerField(default=0)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="workout_executions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "workout",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="executions",
                        to="workouts.dailyworkout",
                    ),
                ),
            ],
            options={
                "db_table": "workout_executions",
                "ordering": ["-started_at"],
            },
        ),
        migrations.CreateModel(
            name="WorkoutPlan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "duration_weeks",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(4),
                            django.core.validators.MaxValueValidator(8),
                        ]
                    ),
                ),
                ("plan_data", models.JSONField()),
                ("ai_analysis", models.JSONField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft - awaiting confirmation"),
                            ("CONFIRMED", "Confirmed - ready to start"),
                            ("ACTIVE", "Active - in progress"),
                            ("COMPLETED", "Completed"),
                        ],
                        default="DRAFT",
                        max_length=10,
                    ),
                ),
                ("last_adaptation_date", models.DateTimeField(blank=True, null=True)),
                ("adaptation_count", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_confirmed", models.BooleanField(default=False)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="workout_plans",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "workout_plans",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="dailyworkout",
            name="plan",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="daily_workouts",
                to="workouts.workoutplan",
            ),
        ),
        migrations.CreateModel(
            name="Exercise",
            fields=[
                (
                    "id",
                    models.CharField(max_length=36, primary_key=True, serialize=False),
                ),
                ("slug", models.SlugField(max_length=100, unique=True)),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "difficulty",
                    models.CharField(
                        choices=[
                            ("beginner", "Beginner"),
                            ("intermediate", "Intermediate"),
                            ("advanced", "Advanced"),
                        ],
                        max_length=20,
                    ),
                ),
                ("muscle_groups", models.JSONField(default=list)),
                (
                    "poster_image",
                    models.ImageField(
                        blank=True,
                        help_text="Poster image for video player",
                        null=True,
                        upload_to="photos/workout/",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "alternatives",
                    models.ManyToManyField(blank=True, to="workouts.exercise"),
                ),
            ],
            options={
                "db_table": "exercises",
                "ordering": ["name"],
                "indexes": [
                    models.Index(fields=["slug"], name="exercises_slug_eadfaa_idx"),
                    models.Index(
                        fields=["difficulty"], name="exercises_difficu_bf8baf_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ExplainerVideo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "archetype",
                    models.CharField(
                        choices=[
                            ("111", "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫"),
                            ("222", "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª"),
                            ("333", "–†–æ–≤–µ—Å–Ω–∏–∫"),
                        ],
                        max_length=3,
                    ),
                ),
                ("script", models.TextField()),
                ("locale", models.CharField(default="ru", max_length=5)),
                (
                    "exercise",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="videos",
                        to="workouts.csvexercise",
                    ),
                ),
            ],
            options={
                "verbose_name": "–í–∏–¥–µ–æ-–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ",
                "verbose_name_plural": "–í–∏–¥–µ–æ-–æ–±—ä—è—Å–Ω–µ–Ω–∏—è",
                "db_table": "explainer_videos",
                "unique_together": {("exercise", "archetype", "locale")},
            },
        ),
        migrations.CreateModel(
            name="VideoClip",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "archetype",
                    models.CharField(
                        choices=[
                            ("peer", "–†–æ–≤–µ—Å–Ω–∏–∫"),
                            ("professional", "–£—Å–ø–µ—à–Ω—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª"),
                            ("mentor", "–ú—É–¥—Ä—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫"),
                        ],
                        max_length=20,
                    ),
                ),
                ("model_name", models.CharField(max_length=50)),
                ("duration_seconds", models.PositiveIntegerField()),
                (
                    "r2_file",
                    models.FileField(
                        blank=True,
                        help_text="Video file in R2 storage",
                        null=True,
                        upload_to="videos/",
                    ),
                ),
                (
                    "r2_key",
                    models.CharField(
                        blank=True,
                        help_text="R2 storage key/path for direct access",
                        max_length=500,
                    ),
                ),
                (
                    "r2_kind",
                    models.CharField(
                        choices=[
                            ("technique", "Technique"),
                            ("mistake", "Mistake"),
                            ("instruction", "Instruction"),
                            ("intro", "Intro"),
                            ("weekly", "Weekly"),
                            ("closing", "Closing"),
                            ("reminder", "Reminder"),
                            ("explain", "Explain"),
                            ("contextual_intro", "Contextual_Intro"),
                            ("contextual_outro", "Contextual_Outro"),
                            ("mid_workout", "Mid_Workout"),
                            ("theme_based", "Theme_Based"),
                            ("motivational_break", "Motivational_Break"),
                        ],
                        default=apps.workouts.constants.VideoKind["INSTRUCTION"],
                        help_text="Video type for R2 organization",
                        max_length=20,
                    ),
                ),
                (
                    "r2_archetype",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("peer", "–†–æ–≤–µ—Å–Ω–∏–∫"),
                            ("professional", "–£—Å–ø–µ—à–Ω—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª"),
                            ("mentor", "–ú—É–¥—Ä—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫"),
                        ],
                        help_text="Archetype for R2 videos",
                        max_length=20,
                    ),
                ),
                (
                    "provider",
                    models.CharField(
                        choices=[
                            ("r2", "Cloudflare R2"),
                            ("stream", "Cloudflare Stream"),
                            ("external", "External URL"),
                        ],
                        default="r2",
                        help_text="Video storage provider",
                        max_length=16,
                    ),
                ),
                (
                    "stream_uid",
                    models.CharField(
                        blank=True,
                        help_text="Cloudflare Stream UID",
                        max_length=64,
                        null=True,
                    ),
                ),
                (
                    "playback_id",
                    models.CharField(
                        blank=True,
                        help_text="Stream playback ID",
                        max_length=64,
                        null=True,
                    ),
                ),
                (
                    "script_text",
                    models.TextField(blank=True, help_text="Video script or content"),
                ),
                ("reminder_text", models.CharField(blank=True, max_length=200)),
                (
                    "mood_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("energetic", "–≠–Ω–µ—Ä–≥–∏—á–Ω–æ–µ"),
                            ("philosophical", "–§–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–µ"),
                            ("business", "–î–µ–ª–æ–≤–æ–µ"),
                            ("encouraging", "–û–±–æ–¥—Ä—è—é—â–µ–µ"),
                            ("calm", "–°–ø–æ–∫–æ–π–Ω–æ–µ"),
                        ],
                        help_text="–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ/—Ç–æ–Ω –≤–∏–¥–µ–æ",
                        max_length=20,
                    ),
                ),
                (
                    "content_theme",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("week_start", "–ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏"),
                            ("overcoming", "–ü—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ"),
                            ("gratitude", "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å"),
                            ("motivation", "–ú–æ—Ç–∏–≤–∞—Ü–∏—è"),
                            ("recovery", "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"),
                            ("achievement", "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ"),
                            ("consistency", "–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ"),
                            ("challenge", "–í—ã–∑–æ–≤"),
                        ],
                        help_text="–¢–µ–º–∞—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
                        max_length=30,
                    ),
                ),
                (
                    "position_in_workout",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("intro", "–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ"),
                            ("mid", "–°–µ—Ä–µ–¥–∏–Ω–∞"),
                            ("outro", "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ"),
                        ],
                        help_text="–ü–æ–∑–∏—Ü–∏—è –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ",
                        max_length=15,
                    ),
                ),
                (
                    "week_context",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="–ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –∫—É—Ä—Å–∞ (1-8)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(8),
                        ],
                    ),
                ),
                (
                    "variation_number",
                    models.PositiveIntegerField(
                        default=1,
                        help_text="–ù–æ–º–µ—Ä –≤–∞—Ä–∏–∞—Ü–∏–∏ (–¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö intro/outro)",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(99),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_placeholder", models.BooleanField(default=False)),
                (
                    "exercise",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="video_clips",
                        to="workouts.csvexercise",
                    ),
                ),
            ],
            options={
                "db_table": "video_clips",
                "indexes": [
                    models.Index(
                        fields=["exercise", "r2_kind", "archetype"],
                        name="video_clips_exercis_1e5613_idx",
                    ),
                    models.Index(
                        fields=["r2_kind", "archetype"],
                        name="video_clips_r2_kind_d2e4dd_idx",
                    ),
                    models.Index(
                        fields=["is_active", "r2_kind"],
                        name="video_clips_is_acti_9705f9_idx",
                    ),
                ],
                "unique_together": {
                    ("exercise", "r2_kind", "archetype", "model_name", "reminder_text")
                },
            },
        ),
        migrations.CreateModel(
            name="WeeklyNotification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("week", models.PositiveSmallIntegerField()),
                (
                    "archetype",
                    models.CharField(
                        choices=[("111", "–ù"), ("222", "–ü"), ("333", "–†")], max_length=3
                    ),
                ),
                ("lesson_title", models.CharField(max_length=120)),
                ("lesson_script", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("read_at", models.DateTimeField(blank=True, null=True)),
                ("is_read", models.BooleanField(default=False)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="weekly_notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "weekly_notifications",
                "ordering": ["-week", "-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "is_read"],
                        name="weekly_noti_user_id_ddf0af_idx",
                    ),
                    models.Index(fields=["week"], name="weekly_noti_week_45b255_idx"),
                ],
                "unique_together": {("user", "week")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="dailyworkout",
            unique_together={("plan", "day_number")},
        ),
    ]