#!/usr/bin/env python3
"""
Management command to generate VideoClip records based on reference materials
Creates rich contextual video content structure from trainer scripts
"""

import random
from typing import Dict, List

from django.core.management.base import BaseCommand
from django.db import transaction

from apps.workouts.constants import VideoKind
from apps.workouts.models import VideoClip, VideoProvider


class Command(BaseCommand):
    help = 'Generate VideoClip records based on reference trainer scripts'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Show what would be created without making changes'
        )
        parser.add_argument(
            '--archetype',
            choices=['mentor', 'professional', 'peer', 'all'],
            default='all',
            help='Generate content for specific archetype'
        )
        parser.add_argument(
            '--content-type',
            choices=['intro', 'outro', 'mid_workout', 'weekly', 'all'],
            default='all',
            help='Generate specific type of content'
        )
        parser.add_argument(
            '--limit',
            type=int,
            default=None,
            help='Limit number of variations to generate'
        )

    def handle(self, *args, **options):
        self.dry_run = options['dry_run']
        self.archetype_filter = options['archetype']
        self.content_type_filter = options['content_type']
        self.limit = options['limit']

        self.stdout.write("üé¨ GENERATE VIDEO CONTENT FROM SCRIPTS")
        self.stdout.write("=" * 50)
        
        if self.dry_run:
            self.stdout.write(self.style.WARNING("DRY RUN MODE - No changes will be made"))

        # Define trainer content based on reference materials
        trainer_scripts = self._load_trainer_scripts()
        
        created_count = 0
        
        # Generate content for each archetype
        archetypes = ['mentor', 'professional', 'peer'] if self.archetype_filter == 'all' else [self.archetype_filter]
        
        for archetype in archetypes:
            self.stdout.write(f"\nüéØ Generating content for {archetype} archetype")
            
            if self.content_type_filter in ['intro', 'all']:
                created_count += self._generate_contextual_intros(archetype, trainer_scripts[archetype]['intros'])
            
            if self.content_type_filter in ['outro', 'all']:
                created_count += self._generate_contextual_outros(archetype, trainer_scripts[archetype]['outros'])
            
            if self.content_type_filter in ['mid_workout', 'all']:
                created_count += self._generate_mid_workout_content(archetype, trainer_scripts[archetype]['mid_workout'])
            
            if self.content_type_filter in ['weekly', 'all']:
                created_count += self._generate_weekly_content(archetype, trainer_scripts[archetype]['weekly'])

        self.stdout.write(f"\n‚úÖ Generated {created_count} VideoClip records")

    def _load_trainer_scripts(self) -> Dict:
        """Load trainer scripts from reference materials"""
        
        # Based on the analyzed reference files
        return {
            'mentor': {
                'intros': [
                    {
                        'script': '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –†–∞–¥, —á—Ç–æ –≤—ã –∑–¥–µ—Å—å –∏ –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è —Å–µ–±–µ. –°–µ–≥–æ–¥–Ω—è –º—ã –ø–æ—Å–≤—è—Ç–∏–º –Ω–∞—à—É –ø—Ä–∞–∫—Ç–∏–∫—É –Ω–æ–≥–∞–º ‚Äî –Ω–∞—à–µ–º—É —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç—É.',
                        'mood_type': 'calm',
                        'content_theme': 'week_start'
                    },
                    {
                        'script': '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å. –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ‚Äî —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–≤–æ–µ —Ç–µ–ª–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –≤–∞—à –¥–µ–Ω—å –±—ã–ª –ø–æ–ª–æ–Ω –º—ã—Å–ª–µ–π –∏ —Å—Ç—Ä–µ—Å—Å–∞.',
                        'mood_type': 'calm',
                        'content_theme': 'recovery'
                    },
                    {
                        'script': '–î–æ–±—Ä—ã–π –¥–µ–Ω—å. –°–µ–≥–æ–¥–Ω—è –º—ã –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –±–∞–ª–∞–Ω—Å. –ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Å–∏–ª–æ–π –∏ –≥–∏–±–∫–æ—Å—Ç—å—é, –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ–º –∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ–º.',
                        'mood_type': 'philosophical',
                        'content_theme': 'balance'
                    },
                    # Add more mentor intros...
                ],
                'outros': [
                    {
                        'script': '–ü—Ä–∞–∫—Ç–∏–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç–µ —Å–≤–æ–µ —Ç–µ–ª–æ –∑–∞ —ç—Ç–æ—Ç —Ç—Ä—É–¥. –¢–∞ —ç–Ω–µ—Ä–≥–∏—è –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–µ–π—á–∞—Å —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, ‚Äî —ç—Ç–æ –≤–∞—à–µ.',
                        'mood_type': 'calm',
                        'content_theme': 'gratitude'
                    },
                    {
                        'script': '–†–∞–±–æ—Ç–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –ù–æ –Ω–∞—Å—Ç–æ—è—â–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç—É –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å –∏ —Å–≤—è–∑—å —Å —Ç–µ–ª–æ–º –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ –¥–Ω—è.',
                        'mood_type': 'philosophical',
                        'content_theme': 'integration'
                    },
                    # Add more mentor outros...
                ],
                'mid_workout': [
                    {
                        'script': '–ü–∞—É–∑–∞. –ü–æ—á—É–≤—Å—Ç–≤—É–π—Ç–µ —ç—Ç–æ –∂–∂–µ–Ω–∏–µ. –≠—Ç–æ –Ω–µ –≤—Ä–∞–≥. –≠—Ç–æ —ç–Ω–µ—Ä–≥–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü—Ä–∏—Å–ª—É—à–∞–π—Ç–µ—Å—å –∫ –Ω–µ–º—É, –¥—ã—à–∏—Ç–µ –≤ –Ω–µ–≥–æ.',
                        'mood_type': 'encouraging',
                        'content_theme': 'overcoming'
                    },
                    {
                        'script': '–û—Ç–¥—ã—Ö. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –¥—ã—Ö–∞–Ω–∏—é. –û–Ω–æ ‚Äî –Ω–∞—à —è–∫–æ—Ä—å –≤ –Ω–∞—Å—Ç–æ—è—â–µ–º –º–æ–º–µ–Ω—Ç–µ. –ì–ª—É–±–æ–∫–∏–π, —Å–ø–æ–∫–æ–π–Ω—ã–π –≤–¥–æ—Ö... –∏ –ø–æ–ª–Ω—ã–π, –æ—Å–≤–æ–±–æ–∂–¥–∞—é—â–∏–π –≤—ã–¥–æ—Ö.',
                        'mood_type': 'calm',
                        'content_theme': 'breathing'
                    },
                    # Add more mentor mid-workout...
                ],
                'weekly': [
                    {
                        'script': '–ù–µ–¥–µ–ª—è 1: –§—É–Ω–¥–∞–º–µ–Ω—Ç —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è. –ù–∞—á–Ω–µ–º —Å —Å–∞–º–æ–≥–æ –≤–∞–∂–Ω–æ–≥–æ - —É–º–µ–Ω–∏—è —Å–ª—ã—à–∞—Ç—å —Å–≤–æ–µ —Ç–µ–ª–æ –∏ –¥—ã—à–∞—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ.',
                        'week_context': 1,
                        'content_theme': 'foundation'
                    },
                    # Add more weekly content...
                ]
            },
            'professional': {
                'intros': [
                    {
                        'script': '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ. –†–∞–¥ –≤–∏–¥–µ—Ç—å –≤–∞—Å. –°–µ–≥–æ–¥–Ω—è –Ω–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî —Å–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ –≤–µ—Ä—Ö —Ç–µ–ª–∞. –¶–µ–ª—å ‚Äî –Ω–µ –ø—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–ª–æ—Å—Ç—å, –∞ —Ç–æ—á–µ—á–Ω–∞—è —Å—Ç–∏–º—É–ª—è—Ü–∏—è –º—ã—à–µ—á–Ω—ã—Ö –≤–æ–ª–æ–∫–æ–Ω.',
                        'mood_type': 'business',
                        'content_theme': 'efficiency'
                    },
                    {
                        'script': '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é. –í—Ä–µ–º—è ‚Äî –Ω–∞—à —Å–∞–º—ã–π —Ü–µ–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å. –≠—Ç–∏ 30 –º–∏–Ω—É—Ç –º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ–º –≤ –≤–∞—à—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å.',
                        'mood_type': 'business',
                        'content_theme': 'investment'
                    },
                    # Add more professional intros...
                ],
                'outros': [
                    {
                        'script': '–†–∞–±–æ—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ—Ç–æ–∫–æ–ª –≤—ã–ø–æ–ª–Ω–µ–Ω. –í—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ –≤ —Å–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ, –∏ —ç—Ç–æ —É—Å–∏–ª–∏–µ –ø—Ä–∏–Ω–µ—Å–µ—Ç —Å–≤–æ–∏ –¥–∏–≤–∏–¥–µ–Ω–¥—ã.',
                        'mood_type': 'business',
                        'content_theme': 'achievement'
                    },
                    # Add more professional outros...
                ],
                'mid_workout': [
                    {
                        'script': '–ü–∞—É–∑–∞. –û—â—É—â–µ–Ω–∏–µ –∂–∂–µ–Ω–∏—è –≤ –º—ã—à—Ü–∞—Ö ‚Äî —ç—Ç–æ —Å–∏–≥–Ω–∞–ª –æ –º–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–æ–º —Å—Ç—Ä–µ—Å—Å–µ, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–¥–∞–ø—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã.',
                        'mood_type': 'business',
                        'content_theme': 'efficiency'
                    },
                    # Add more professional mid-workout...
                ],
                'weekly': [
                    {
                        'script': '–ù–µ–¥–µ–ª—è 1 - –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã. –ò–∑—É—á–∞–µ–º –∞–Ω–∞—Ç–æ–º–∏—é –∏ —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—é –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ö–ü–î.',
                        'week_context': 1,
                        'content_theme': 'optimization'
                    },
                ]
            },
            'peer': {
                'intros': [
                    {
                        'script': '–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è —Å–µ–≥–æ–¥–Ω—è –±—ã–ª —Ç–æ—Ç –µ—â–µ –¥–µ–Ω–µ–∫... –ì–æ–ª–æ–≤–∞ –∫—Ä—É–≥–æ–º. –ó–Ω–∞–µ—à—å, —á—Ç–æ –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–º–æ–≥–∞–µ—Ç? –í–æ—Ç —ç—Ç–æ. –ü–æ–ª—á–∞—Å–∞, —á—Ç–æ–±—ã –≤—ã–∫–ª—é—á–∏—Ç—å –º–æ–∑–≥ –∏ –≤–∫–ª—é—á–∏—Ç—å —Ç–µ–ª–æ.',
                        'mood_type': 'energetic',
                        'content_theme': 'stress_relief'
                    },
                    {
                        'script': '–ó–¥–æ—Ä–æ–≤–æ! –ì–æ—Ç–æ–≤ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å? –°–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å —Å–∏–ª–æ–≤–∞—è –Ω–∞ –≤—Å–µ —Ç–µ–ª–æ. –°–æ–∑–¥–∞–µ–º —Ç–æ—Ç —Å–∞–º—ã–π —Ç–æ–Ω—É—Å –∏ —ç–Ω–µ—Ä–≥–∏—é, –∫–æ—Ç–æ—Ä—ã—Ö —Ç–∞–∫ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫ –≤–µ—á–µ—Ä—É.',
                        'mood_type': 'energetic',
                        'content_theme': 'energy'
                    },
                    # Add more peer intros...
                ],
                'outros': [
                    {
                        'script': '–ï—Å—Ç—å! –°–¥–µ–ª–∞–Ω–æ! –ö—Ä–∞—Å–∞–≤—á–∏–∫! –ü—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Å—å –Ω–∞ —Å–µ–∫—É–Ω–¥—É –∏ –ø–æ—á—É–≤—Å—Ç–≤—É–π —ç—Ç–æ. –≠—Ç–æ –≥–æ—Ä–¥–æ—Å—Ç—å. –¢—ã —Å–¥–µ–ª–∞–ª —ç—Ç–æ –¥–ª—è —Å–µ–±—è.',
                        'mood_type': 'energetic',
                        'content_theme': 'achievement'
                    },
                    # Add more peer outros...
                ],
                'mid_workout': [
                    {
                        'script': '–ü–∞—É–∑–∞! –ß—É–≤—Å—Ç–≤—É–µ—à—å, –∫–∞–∫ –º—ã—à—Ü—ã –≥–æ—Ä—è—Ç? –û—Ç–ª–∏—á–Ω–æ! –≠—Ç–æ –Ω–µ –±–æ–ª—å, —ç—Ç–æ —Å–ª–∞–±–æ—Å—Ç—å —É—Ö–æ–¥–∏—Ç –∏–∑ —Ç–µ–ª–∞. –ú—ã –±—É–∫–≤–∞–ª—å–Ω–æ –ø–µ—Ä–µ–ø–ª–∞–≤–ª—è–µ–º "–Ω–µ –º–æ–≥—É" –≤ "–º–æ–≥—É".',
                        'mood_type': 'energetic',
                        'content_theme': 'motivation'
                    },
                    # Add more peer mid-workout...
                ],
                'weekly': [
                    {
                        'script': '–ü—Ä–∏–≤–µ—Ç! –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ. –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —É—á–∏–º—Å—è —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–≤–æ–µ —Ç–µ–ª–æ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥—ã—à–∞—Ç—å.',
                        'week_context': 1,
                        'content_theme': 'journey_start'
                    },
                ]
            }
        }

    def _generate_contextual_intros(self, archetype: str, intro_scripts: List[Dict]) -> int:
        """Generate contextual intro videos"""
        created_count = 0
        
        limit = min(len(intro_scripts), self.limit or len(intro_scripts))
        
        for i, script_data in enumerate(intro_scripts[:limit]):
            if self.dry_run:
                self.stdout.write(f"  [DRY RUN] Would create contextual intro {i+1} for {archetype}")
                created_count += 1
                continue
            
            with transaction.atomic():
                clip_data = {
                    'r2_kind': VideoKind.CONTEXTUAL_INTRO,
                    'r2_archetype': archetype,
                    'model_name': f'contextual_intro_{i+1}',
                    'script_text': script_data['script'],
                    'provider': VideoProvider.R2,
                    'duration_seconds': random.randint(45, 90),  # Realistic intro duration
                    'mood_type': script_data.get('mood_type', 'calm'),
                    'content_theme': script_data.get('content_theme', 'motivation'),
                    'position_in_workout': 'intro',
                    'variation_number': i + 1,
                    'week_context': script_data.get('week_context'),
                    'is_active': True,
                }
                
                clip = VideoClip.objects.create(**clip_data)
                created_count += 1
                
                self.stdout.write(f"  ‚úÖ Created contextual intro {i+1} for {archetype}: {clip.id}")
        
        return created_count

    def _generate_contextual_outros(self, archetype: str, outro_scripts: List[Dict]) -> int:
        """Generate contextual outro videos"""
        created_count = 0
        
        limit = min(len(outro_scripts), self.limit or len(outro_scripts))
        
        for i, script_data in enumerate(outro_scripts[:limit]):
            if self.dry_run:
                self.stdout.write(f"  [DRY RUN] Would create contextual outro {i+1} for {archetype}")
                created_count += 1
                continue
            
            with transaction.atomic():
                clip_data = {
                    'r2_kind': VideoKind.CONTEXTUAL_OUTRO,
                    'r2_archetype': archetype,
                    'model_name': f'contextual_outro_{i+1}',
                    'script_text': script_data['script'],
                    'provider': VideoProvider.R2,
                    'duration_seconds': random.randint(60, 120),  # Realistic outro duration
                    'mood_type': script_data.get('mood_type', 'calm'),
                    'content_theme': script_data.get('content_theme', 'gratitude'),
                    'position_in_workout': 'outro',
                    'variation_number': i + 1,
                    'week_context': script_data.get('week_context'),
                    'is_active': True,
                }
                
                clip = VideoClip.objects.create(**clip_data)
                created_count += 1
                
                self.stdout.write(f"  ‚úÖ Created contextual outro {i+1} for {archetype}: {clip.id}")
        
        return created_count

    def _generate_mid_workout_content(self, archetype: str, mid_scripts: List[Dict]) -> int:
        """Generate mid-workout motivational videos"""
        created_count = 0
        
        limit = min(len(mid_scripts), self.limit or len(mid_scripts))
        
        for i, script_data in enumerate(mid_scripts[:limit]):
            if self.dry_run:
                self.stdout.write(f"  [DRY RUN] Would create mid-workout {i+1} for {archetype}")
                created_count += 1
                continue
            
            with transaction.atomic():
                clip_data = {
                    'r2_kind': VideoKind.MID_WORKOUT,
                    'r2_archetype': archetype,
                    'model_name': f'mid_workout_{i+1}',
                    'script_text': script_data['script'],
                    'provider': VideoProvider.R2,
                    'duration_seconds': random.randint(30, 60),  # Short motivational clips
                    'mood_type': script_data.get('mood_type', 'encouraging'),
                    'content_theme': script_data.get('content_theme', 'motivation'),
                    'position_in_workout': 'mid',
                    'variation_number': i + 1,
                    'is_active': True,
                }
                
                clip = VideoClip.objects.create(**clip_data)
                created_count += 1
                
                self.stdout.write(f"  ‚úÖ Created mid-workout {i+1} for {archetype}: {clip.id}")
        
        return created_count

    def _generate_weekly_content(self, archetype: str, weekly_scripts: List[Dict]) -> int:
        """Generate weekly theme-based videos"""
        created_count = 0
        
        limit = min(len(weekly_scripts), self.limit or len(weekly_scripts))
        
        for i, script_data in enumerate(weekly_scripts[:limit]):
            if self.dry_run:
                self.stdout.write(f"  [DRY RUN] Would create weekly content {i+1} for {archetype}")
                created_count += 1
                continue
            
            with transaction.atomic():
                clip_data = {
                    'r2_kind': VideoKind.THEME_BASED,
                    'r2_archetype': archetype,
                    'model_name': f'weekly_theme_{script_data.get("week_context", i+1)}',
                    'script_text': script_data['script'],
                    'provider': VideoProvider.R2,
                    'duration_seconds': random.randint(120, 180),  # Longer for weekly lessons
                    'content_theme': script_data.get('content_theme', 'weekly_lesson'),
                    'week_context': script_data.get('week_context', i + 1),
                    'is_active': True,
                }
                
                clip = VideoClip.objects.create(**clip_data)
                created_count += 1
                
                self.stdout.write(f"  ‚úÖ Created weekly content week {clip.week_context} for {archetype}: {clip.id}")
        
        return created_count