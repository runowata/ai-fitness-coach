#!/usr/bin/env python3
"""
AI-Fitness Correct Media Picker
–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–±–∏—Ä–∞–µ—Ç –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ—Ö–∑–∞–¥–∞–Ω–∏—é
"""

import csv
import os
import random
import shutil
import sys
from collections import defaultdict
from pathlib import Path
from typing import Dict, List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
SOURCE_DIR = "/Volumes/fitnes ai/"
PROJECT_DIR = "/Users/alexbel/Desktop/–ü—Ä–æ–µ–∫—Ç—ã/AI Fitness Coach"
TARGET_DIR = os.path.join(PROJECT_DIR, "selected_media")
EXERCISES_FILE = "exercises.csv"

# –¶–µ–ª–µ–≤—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ—Ö–∑–∞–¥–∞–Ω–∏—é
VIDEO_TARGETS = {
    "technique": 147,      # 1√ó –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    "instruction": 441,    # 3√ó –∞—Ä—Ö–µ—Ç–∏–ø-–∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ = 147√ó3
    "mistake": 147,        # 1√ó ¬´–æ—à–∏–±–∫–∏¬ª (–æ–ø—Ü.)
    "reminder": 1323,      # 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π = 147√ó3√ó3
    "weekly": 36,          # 12 –Ω–µ–¥–µ–ª—å √ó 3 –∞—Ä—Ö–µ—Ç–∏–ø–∞
    "final": 3             # 1√ó –Ω–∞ –∞—Ä—Ö–µ—Ç–∏–ø
}

IMAGE_TARGETS = {
    "avatars": 9,          # 3 –∞—Ä—Ö–µ—Ç–∏–ø–∞ √ó 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞
    "cards": 600,          # –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
}

# –ê—Ä—Ö–µ—Ç–∏–ø—ã
ARCHETYPES = ["wise_mentor", "best_mate", "pro_coach"]

# –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
VIDEO_EXTS = {".mp4", ".mov", ".avi", ".mkv", ".webm"}
IMAGE_EXTS = {".jpg", ".jpeg", ".png", ".webp", ".gif"}


def load_exercises() -> List[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ CSV."""
    exercises = []
    
    if not os.path.exists(EXERCISES_FILE):
        print(f"‚ùå –§–∞–π–ª {EXERCISES_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        sys.exit(1)
    
    with open(EXERCISES_FILE, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            exercises.append(row['slug'])
    
    print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(exercises)} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
    return exercises


def categorize_file_smart(file_path: Path) -> str:
    """
    –£–º–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∏–º–µ–Ω–∏ –∏ –ø—É—Ç–∏.
    –ü–æ—Å–∫–æ–ª—å–∫—É –Ω–∞ –¥–∏—Å–∫–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º nude –º–æ–¥–µ–ª–∏, –≤—Å–µ –≤–∏–¥–µ–æ —Å—á–∏—Ç–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏
    –¥–ª—è –ª—é–±–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ.
    """
    name = file_path.name.lower()
    parent = file_path.parent.name.lower()
    
    # –î–ª—è –≤–∏–¥–µ–æ - –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    if file_path.suffix.lower() in VIDEO_EXTS:
        if any(word in name for word in ['technique', 'tech', 'form']):
            return 'technique'
        elif any(word in name for word in ['instruct', 'guide', 'demo']):
            return 'instruction'  
        elif any(word in name for word in ['mistake', 'error', 'wrong']):
            return 'mistake'
        elif any(word in name for word in ['remind', 'motivation']):
            return 'reminder'
        elif any(word in name for word in ['weekly', 'week']):
            return 'weekly'
        elif any(word in name for word in ['final', 'complete']):
            return 'final'
        else:
            # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ —Å–ª—É—á–∞–π–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            return random.choice(['technique', 'instruction', 'mistake', 'reminder', 'weekly'])
    
    # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    elif file_path.suffix.lower() in IMAGE_EXTS:
        if any(word in name for word in ['avatar', 'profile', 'face']):
            return 'avatars'
        elif any(word in parent for word in ['avatar', 'profile']):
            return 'avatars'
        elif any(word in name for word in ['card', 'quote', 'motivation']):
            return 'cards'
        elif any(word in name for word in ['story', 'cover', 'book']):
            return 'stories'
        else:
            # –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - cards
            return 'cards'
    
    return 'uncategorized'


def scan_and_categorize(source_dir: str) -> Dict[str, List[Path]]:
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã."""
    print(f"üìÇ –°–∫–∞–Ω–∏—Ä—É—é {source_dir}...")
    
    categories = defaultdict(list)
    source_path = Path(source_dir)
    
    if not source_path.exists():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {source_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        sys.exit(1)
    
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã
    for file_path in source_path.rglob('*'):
        if file_path.is_file():
            ext = file_path.suffix.lower()
            
            if ext in VIDEO_EXTS or ext in IMAGE_EXTS:
                category = categorize_file_smart(file_path)
                categories[category].append(file_path)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    for cat, files in categories.items():
        print(f"  {cat}: {len(files)} —Ñ–∞–π–ª–æ–≤")
    
    return categories


def select_files_by_targets(categories: Dict[str, List[Path]]) -> Dict[str, List[Path]]:
    """–í—ã–±–∏—Ä–∞–µ—Ç –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    selected = {}
    all_targets = {**VIDEO_TARGETS, **IMAGE_TARGETS}
    
    print("\nüéØ –û—Ç–±–∏—Ä–∞—é —Ñ–∞–π–ª—ã –ø–æ —Ü–µ–ª–µ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º...")
    
    for category, target_count in all_targets.items():
        available = categories.get(category, [])
        
        if len(available) < target_count:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –±–µ—Ä–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ + –¥–æ–±–∏—Ä–∞–µ–º –∏–∑ 'uncategorized'
            extra_needed = target_count - len(available)
            uncategorized = categories.get('uncategorized', [])
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º uncategorized –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
            if category in VIDEO_TARGETS:
                uncategorized_filtered = [f for f in uncategorized if f.suffix.lower() in VIDEO_EXTS]
            else:
                uncategorized_filtered = [f for f in uncategorized if f.suffix.lower() in IMAGE_EXTS]
            
            random.shuffle(uncategorized_filtered)
            extra_files = uncategorized_filtered[:extra_needed]
            
            selected[category] = available + extra_files
            print(f"  {category}: {len(available)} –Ω–∞–π–¥–µ–Ω–æ + {len(extra_files)} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö = {len(selected[category])}/{target_count}")
        else:
            # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            random.shuffle(available)
            selected[category] = available[:target_count]
            print(f"  {category}: –≤—ã–±—Ä–∞–Ω–æ {target_count} –∏–∑ {len(available)}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º stories (–≤—Å–µ —á—Ç–æ –Ω–∞–π–¥–µ–º)
    if 'stories' in categories:
        selected['stories'] = categories['stories']
        print(f"  stories: –≤—Å–µ {len(categories['stories'])} —Ñ–∞–π–ª–æ–≤")
    
    return selected


def generate_correct_filename(old_path: Path, category: str, counter: int, exercises: List[str]) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —à–∞–±–ª–æ–Ω–∞–º."""
    ext = old_path.suffix.lower()
    
    # –®–∞–±–ª–æ–Ω—ã –¥–ª—è –≤–∏–¥–µ–æ
    if category == "technique":
        slug = random.choice(exercises)
        return f"videos/exercises/{slug}_technique_m01{ext}"
    
    elif category == "instruction":
        slug = random.choice(exercises)
        archetype = random.choice(ARCHETYPES)
        return f"videos/instructions/{slug}_instruction_{archetype}_m01{ext}"
    
    elif category == "mistake":
        slug = random.choice(exercises)
        return f"videos/exercises/{slug}_mistake_m01{ext}"
    
    elif category == "reminder":
        slug = random.choice(exercises)
        archetype = random.choice(ARCHETYPES)
        reminder_num = ((counter - 1) % 3) + 1  # 1, 2, 3, 1, 2, 3...
        return f"videos/reminders/{slug}_reminder_{archetype}_{reminder_num:02d}{ext}"
    
    elif category == "weekly":
        archetype = random.choice(ARCHETYPES)
        week_num = ((counter - 1) % 12) + 1  # 1-12
        return f"videos/motivation/weekly_{archetype}_week{week_num:02d}{ext}"
    
    elif category == "final":
        archetype = ARCHETYPES[(counter - 1) % len(ARCHETYPES)]  # –ü–æ –æ–¥–Ω–æ–º—É –Ω–∞ –∞—Ä—Ö–µ—Ç–∏–ø
        return f"videos/motivation/final_{archetype}{ext}"
    
    # –®–∞–±–ª–æ–Ω—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    elif category == "avatars":
        archetype = ARCHETYPES[((counter - 1) // 3) % len(ARCHETYPES)]  # 3 —à—Ç—É–∫–∏ –Ω–∞ –∞—Ä—Ö–µ—Ç–∏–ø
        avatar_num = ((counter - 1) % 3) + 1
        return f"images/avatars/{archetype}_avatar_{avatar_num:02d}{ext}"
    
    elif category == "cards":
        card_category = random.choice(['motivation', 'progress', 'success', 'challenge'])
        return f"images/cards/card_{card_category}_{counter:05d}{ext}"
    
    elif category == "stories":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è stories
        return f"images/stories/{old_path.name}"
    
    return f"misc/{old_path.name}"


def copy_files_with_correct_names(selected_files: Dict[str, List[Path]], exercises: List[str]):
    """–ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞."""
    print("\nüìÅ –°–æ–∑–¥–∞—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫...")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
    folders = [
        "videos/exercises",
        "videos/instructions", 
        "videos/reminders",
        "videos/motivation",
        "images/avatars",
        "images/cards",
        "images/stories"
    ]
    
    for folder in folders:
        os.makedirs(os.path.join(TARGET_DIR, folder), exist_ok=True)
    
    log_entries = []
    total_copied = 0
    
    print("\nüìã –ö–æ–ø–∏—Ä—É—é —Ñ–∞–π–ª—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏...")
    
    for category, files in selected_files.items():
        print(f"\n  {category.upper()}: {len(files)} —Ñ–∞–π–ª–æ–≤")
        
        for i, file_path in enumerate(files, 1):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è
            new_name = generate_correct_filename(file_path, category, i, exercises)
            target_path = os.path.join(TARGET_DIR, new_name)
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(os.path.dirname(target_path), exist_ok=True)
            
            try:
                shutil.copy2(file_path, target_path)
                total_copied += 1
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
                log_entries.append({
                    'old_path': str(file_path),
                    'new_rel_path': new_name,
                    'type': 'video' if file_path.suffix.lower() in VIDEO_EXTS else 'image',
                    'subtype': category,
                    'counter': i
                })
                
                if i % 50 == 0:
                    print(f"    –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {i}/{len(files)}")
                    
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {file_path.name}: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
    log_file = os.path.join(PROJECT_DIR, "media_organizer", "correct_selection_log.csv")
    with open(log_file, 'w', newline='', encoding='utf-8') as csvfile:
        fieldnames = ['old_path', 'new_rel_path', 'type', 'subtype', 'counter']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(log_entries)
    
    print(f"\n‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {total_copied} —Ñ–∞–π–ª–æ–≤")
    print(f"üìÑ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {log_file}")
    
    return log_entries


def print_summary(selected_files: Dict[str, List[Path]]):
    """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É."""
    print("\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê:")
    print("=" * 60)
    
    total_videos = 0
    total_images = 0
    
    # –í–∏–¥–µ–æ
    for category, target in VIDEO_TARGETS.items():
        actual = len(selected_files.get(category, []))
        total_videos += actual
        status = "‚úÖ" if actual == target else "‚ö†Ô∏è"
        print(f"{status} {category:12} {actual:4}/{target:4}")
    
    print(f"   {'–í–°–ï–ì–û –í–ò–î–ï–û':12} {total_videos:4}")
    print()
    
    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è  
    for category, target in IMAGE_TARGETS.items():
        actual = len(selected_files.get(category, []))
        total_images += actual
        status = "‚úÖ" if actual == target else "‚ö†Ô∏è"
        print(f"{status} {category:12} {actual:4}/{target:4}")
    
    # Stories
    if 'stories' in selected_files:
        stories_count = len(selected_files['stories'])
        total_images += stories_count
        print(f"‚úÖ {'stories':12} {stories_count:4}/–≤—Å–µ")
    
    print(f"   {'–í–°–ï–ì–û –§–û–¢–û':12} {total_images:4}")
    print("=" * 60)
    print(f"   {'–ò–¢–û–ì–û':12} {total_videos + total_images:4} —Ñ–∞–π–ª–æ–≤")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üéØ AI-Fitness Correct Media Picker")
    print("=" * 60)
    
    # –û—á–∏—â–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É
    if os.path.exists(TARGET_DIR):
        print(f"üóëÔ∏è  –û—á–∏—â–∞—é {TARGET_DIR}...")
        shutil.rmtree(TARGET_DIR)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    exercises = load_exercises()
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    categories = scan_and_categorize(SOURCE_DIR)
    
    # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    selected_files = select_files_by_targets(categories)
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
    copy_files_with_correct_names(selected_files, exercises)
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print_summary(selected_files)
    
    print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –≤ {TARGET_DIR}")


if __name__ == '__main__':
    main()