import re
from pathlib import Path

import pandas as pd

RAW_DIR = Path("data/raw")

print("üßπ Cleaning Excel files...")

# 1. –û—á–∏—Å—Ç–∫–∞ base_exercises.xlsx
print("\nüìã Cleaning base_exercises.xlsx...")
df = pd.read_excel(RAW_DIR / "base_exercises.xlsx", header=1)

# –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ ID = "ID" (–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏)
df = df[df['ID'] != 'ID']

# –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ ID = "---" (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏)
df = df[~df['ID'].str.contains('---', na=False)]

# –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º ID
df = df.dropna(subset=['ID'])

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è ID
# –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
duplicated_ids = df[df.duplicated(subset='ID', keep=False)].copy()
if len(duplicated_ids) > 0:
    print(f"   Found {len(duplicated_ids)} rows with duplicate IDs")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ ID –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å
    for idx, (ex_id, group) in enumerate(duplicated_ids.groupby('ID')):
        if len(group) > 1:
            print(f"   Fixing ID {ex_id} ({len(group)} duplicates)")
            # –ü–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            # –ö –æ—Å—Ç–∞–ª—å–Ω—ã–º –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å _v2, _v3 –∏ —Ç.–¥.
            counter = 2
            for row_idx in group.index[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ
                new_id = f"{ex_id}_v{counter}"
                df.loc[row_idx, 'ID'] = new_id
                print(f"     {ex_id} -> {new_id}: {df.loc[row_idx, '–ù–∞–∑–≤–∞–Ω–∏–µ (RU)']}")
                counter += 1

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
df.to_excel(RAW_DIR / "base_exercises_clean.xlsx", index=False)
print(f"   ‚úÖ Saved {len(df)} clean exercises to base_exercises_clean.xlsx")

# 2. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
(RAW_DIR / "base_exercises.xlsx").rename(RAW_DIR / "base_exercises_original.xlsx")
(RAW_DIR / "base_exercises_clean.xlsx").rename(RAW_DIR / "base_exercises.xlsx")
print("   ‚úÖ Replaced original file (backup saved as base_exercises_original.xlsx)")

# 3. –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –≤–∏–¥–µ–æ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Ç–∞–º —Ç–æ–∂–µ –µ—Å—Ç—å –º—É—Å–æ—Ä)
for video_file in ["explainer_videos_111_nastavnik.xlsx", 
                   "explainer_videos_222_professional.xlsx", 
                   "explainer_videos_333_rovesnik.xlsx"]:
    if (RAW_DIR / video_file).exists():
        print(f"\nüìπ Checking {video_file}...")
        df_vid = pd.read_excel(RAW_DIR / video_file)
        initial_len = len(df_vid)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å ID —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        id_col = None
        for col in ['exercise_id', 'Exercise ID', 'ID']:
            if col in df_vid.columns:
                id_col = col
                break
        
        if id_col:
            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º ID
            df_vid = df_vid.dropna(subset=[id_col])
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ ID –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ---
            df_vid = df_vid[~df_vid[id_col].astype(str).str.contains('---', na=False)]
        
        if len(df_vid) < initial_len:
            df_vid.to_excel(RAW_DIR / video_file, index=False)
            print(f"   ‚úÖ Cleaned: {initial_len} -> {len(df_vid)} rows")
        else:
            print(f"   ‚úÖ Already clean: {len(df_vid)} rows")

print("\n‚úÖ All files cleaned!")