#!/usr/bin/env python3
"""
–°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è GPT-5
"""

import json
import os
from pathlib import Path

# –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã —Ç–∏–ø–∏—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def create_simulated_user_data():
    """–°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—à–µ–ª –ø–æ–ª–Ω—ã–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥"""
    
    # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profile = {
        'age': 28,
        'height': 178,
        'weight': 82,
        'biological_sex': 'male',
        'fitness_level': 'intermediate',
        'primary_goal': 'muscle_gain',
        'archetype': 'mentor',  # –í—ã–±—Ä–∞–ª "–ú—É–¥—Ä–æ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"
        
        # –¢—Ä–∞–≤–º—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        'injuries': 'lower_back_issues',
        'medical_conditions': 'none',
        
        # –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∞
        'equipment_list': ['dumbbells', 'resistance_bands', 'pull_up_bar'],
        'workout_frequency': 4,  # 4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é
        'workout_duration': 60,  # 60 –º–∏–Ω—É—Ç
        'duration_weeks': 6,     # 6-–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω
        
        # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        'preferred_workout_time': 'evening',
        'training_experience': 'intermediate',
        'motivation_level': 'high',
    }
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ (–∫–∞–∫ –±—É–¥—Ç–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
    detailed_onboarding = {
        # –ë–ª–æ–∫ 1: –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        'current_fitness_assessment': 'can_do_20_pushups',
        'energy_levels': 'moderate_energy',
        'sleep_quality': 'good_7_8_hours',
        'stress_levels': 'moderate_work_stress',
        
        # –ë–ª–æ–∫ 2: –¶–µ–ª–∏ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è  
        'specific_goals': ['build_muscle_mass', 'increase_strength', 'improve_posture'],
        'motivation_sources': ['personal_achievement', 'health_benefits', 'confidence_boost'],
        'success_definition': 'visible_muscle_growth_in_6_weeks',
        'past_workout_experience': 'gym_experience_2_years_ago',
        
        # –ë–ª–æ–∫ 3: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
        'time_constraints': 'busy_work_schedule_but_committed',
        'physical_limitations': 'occasional_lower_back_pain_from_desk_work', 
        'mental_barriers': 'fear_of_not_seeing_results_quickly',
        'previous_failures': 'stopped_gym_after_3_months_lack_of_progress',
        
        # –ë–ª–æ–∫ 4: –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        'workout_environment': 'home_with_some_equipment',
        'music_preferences': 'upbeat_electronic_music',
        'social_aspect': 'prefer_solo_workouts',
        'learning_style': 'visual_learner_needs_demonstrations',
        
        # –ë–ª–æ–∫ 5: –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
        'body_focus_areas': ['chest', 'shoulders', 'arms', 'core'],
        'cardio_preferences': 'minimal_cardio_focus_on_strength',
        'flexibility_interest': 'moderate_for_back_health',
        'nutrition_readiness': 'willing_to_make_moderate_changes',
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        'personal_why': 'want_to_feel_confident_and_strong_again',
        'support_system': 'supportive_partner_encouraging',
        'accountability_preference': 'self_directed_with_guidance',
        'reward_motivation': 'internal_satisfaction_and_progress_photos'
    }
    
    return user_profile, detailed_onboarding

def load_system_prompt(archetype='mentor'):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞"""
    prompts_dir = Path('/Users/alexbel/Desktop/–ü—Ä–æ–µ–∫—Ç—ã/AI Fitness Coach/prompts/v2')
    system_file = prompts_dir / 'system' / f'master_{archetype}.system.md'
    
    if system_file.exists():
        return system_file.read_text(encoding='utf-8')
    else:
        return f"# –ê—Ä—Ö–µ—Ç–∏–ø: {archetype}\n–í—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å —Ç—Ä–µ–Ω–µ—Ä."

def load_user_prompt_template(archetype='mentor'):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç-—à–∞–±–ª–æ–Ω"""
    prompts_dir = Path('/Users/alexbel/Desktop/–ü—Ä–æ–µ–∫—Ç—ã/AI Fitness Coach/prompts/v2')
    user_file = prompts_dir / 'user' / f'master_{archetype}.user.md'
    
    if user_file.exists():
        return user_file.read_text(encoding='utf-8')
    else:
        return "–°–æ–∑–¥–∞–π—Ç–µ –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏: {{onboarding_payload_json}}"

def format_equipment_list(equipment_list):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""
    equipment_mapping = {
        'dumbbells': '–ì–∞–Ω—Ç–µ–ª–∏',
        'resistance_bands': '–≠–ª–∞—Å—Ç–∏—á–Ω—ã–µ –ª–µ–Ω—Ç—ã', 
        'pull_up_bar': '–¢—É—Ä–Ω–∏–∫',
        'kettlebell': '–ì–∏—Ä—è',
        'barbell': '–®—Ç–∞–Ω–≥–∞'
    }
    
    formatted = [equipment_mapping.get(eq, eq) for eq in equipment_list]
    return ', '.join(formatted)

def generate_final_prompt():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ GPT-5"""
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profile, detailed_onboarding = create_simulated_user_data()
    archetype = user_profile['archetype']
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã
    system_prompt = load_system_prompt(archetype)
    user_template = load_user_prompt_template(archetype)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
    template_vars = {
        'age': user_profile['age'],
        'height': user_profile['height'],
        'weight': user_profile['weight'],
        'primary_goal': user_profile['primary_goal'],
        'injuries': user_profile['injuries'],
        'equipment_list': format_equipment_list(user_profile['equipment_list']),
        'duration_weeks': user_profile['duration_weeks'],
        'onboarding_payload_json': json.dumps(detailed_onboarding, indent=2, ensure_ascii=False)
    }
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω
    user_prompt = user_template
    for key, value in template_vars.items():
        user_prompt = user_prompt.replace(f'{{{{{key}}}}}', str(value))
    
    return system_prompt, user_prompt, user_profile, detailed_onboarding

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
    
    print("üß† –°–ò–ú–£–õ–Ø–¶–ò–Ø –ü–û–õ–ù–û–ì–û –û–ù–ë–û–†–î–ò–ù–ì–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
    print("=" * 60)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
    system_prompt, user_prompt, user_profile, detailed_onboarding = generate_final_prompt()
    
    print("\nüë§ –ü–†–û–§–ò–õ–¨ –°–ò–ú–£–õ–ò–†–û–í–ê–ù–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:")
    print("-" * 40)
    print(f"–í–æ–∑—Ä–∞—Å—Ç: {user_profile['age']} –ª–µ—Ç")
    print(f"–§–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {user_profile['height']} —Å–º, {user_profile['weight']} –∫–≥")
    print(f"–£—Ä–æ–≤–µ–Ω—å: {user_profile['fitness_level']}")
    print(f"–¶–µ–ª—å: {user_profile['primary_goal']}")
    print(f"–ê—Ä—Ö–µ—Ç–∏–ø: {user_profile['archetype']}")
    print(f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {user_profile['injuries']}")
    print(f"–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {', '.join(user_profile['equipment_list'])}")
    print(f"–ü–ª–∞–Ω: {user_profile['duration_weeks']} –Ω–µ–¥–µ–ª—å, {user_profile['workout_frequency']} —Ä–∞–∑/–Ω–µ–¥–µ–ª—é")
    
    print("\nüîç –î–ï–¢–ê–õ–¨–ù–´–ï –û–¢–í–ï–¢–´ –û–ù–ë–û–†–î–ò–ù–ì–ê:")
    print("-" * 40)
    for key, value in detailed_onboarding.items():
        if isinstance(value, list):
            value = ', '.join(value)
        print(f"{key}: {value}")
    
    print("\n" + "=" * 80)
    print("ü§ñ –§–ò–ù–ê–õ–¨–ù–´–ô –ü–†–û–ú–ü–¢ –î–õ–Ø GPT-5")
    print("=" * 80)
    
    print("\nüîß –°–ò–°–¢–ï–ú–ù–´–ô –ü–†–û–ú–ü–¢ (ROLE):")
    print("-" * 40)
    print(system_prompt)
    
    print("\n" + "-" * 80)
    print("üìù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –ü–†–û–ú–ü–¢ (–ó–ê–î–ê–ß–ê):")
    print("-" * 80)
    print(user_prompt)
    
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("=" * 80)
    print(f"–î–ª–∏–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {len(system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"–î–ª–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {len(user_prompt)} —Å–∏–º–≤–æ–ª–æ–≤") 
    print(f"–û–±—â–∞—è –¥–ª–∏–Ω–∞: {len(system_prompt) + len(user_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {len(detailed_onboarding)}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    output_file = Path('/Users/alexbel/Desktop/–ü—Ä–æ–µ–∫—Ç—ã/AI Fitness Coach/simulated_prompt_output.txt')
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write("–°–ò–°–¢–ï–ú–ù–´–ô –ü–†–û–ú–ü–¢:\n")
        f.write(system_prompt)
        f.write("\n\n–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –ü–†–û–ú–ü–¢:\n")
        f.write(user_prompt)
    
    print(f"\nüíæ –ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")

if __name__ == "__main__":
    main()