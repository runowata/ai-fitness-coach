#!/usr/bin/env python3
"""
–ü–∞–∫–µ—Ç–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∏–∑ 1872 –≤–∏–¥–µ–æ: 144 —Ç–µ—Ö–Ω–∏–∫–∏ + 432 –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ + 1296 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
"""

import os
import shutil
import json
import pandas as pd
from datetime import datetime

def load_suitable_videos():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∏–¥–µ–æ"""
    
    # –ë—ã—Å—Ç—Ä–æ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∏–¥–µ–æ
    exercise_folder = "/Volumes/Z9/–º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è ai fitnes/exercises"
    suitable_videos = []
    
    print(f"üìÇ –°–æ–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∏–¥–µ–æ...")
    
    for root, dirs, files in os.walk(exercise_folder):
        for file in files:
            if file.lower().endswith('.mp4'):
                file_path = os.path.join(root, file)
                try:
                    size_mb = os.path.getsize(file_path) / (1024 * 1024)
                    if 5 <= size_mb <= 50:  # 1-5 –º–∏–Ω—É—Ç
                        suitable_videos.append({
                            "file_path": file_path,
                            "file_name": file,
                            "size_mb": round(size_mb, 2)
                        })
                except:
                    continue
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(suitable_videos)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∏–¥–µ–æ")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ)
    suitable_videos.sort(key=lambda x: abs(x["size_mb"] - 20))
    
    return suitable_videos

def load_exercises():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    
    excel_file = '/Users/alexbel/Desktop/AI Fitness Coach/media_lists/MODERN_EXERCISES_DATABASE_2025.xlsx'
    
    try:
        df = pd.read_excel(excel_file, sheet_name='All_Modern_Exercises')
        exercises = df.to_dict('records')
        print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(exercises)} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
        return exercises
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {e}")
        return []

def create_video_assignments(exercises, suitable_videos):
    """–°–æ–∑–¥–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤–∏–¥–µ–æ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤"""
    
    print(f"üéØ –°–æ–∑–¥–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤–∏–¥–µ–æ...")
    
    archetypes = ["bro", "sergeant", "intellectual"]
    
    assignments = {
        "technique": [],      # 144 –≤–∏–¥–µ–æ
        "instruction": [],    # 432 –≤–∏–¥–µ–æ (144 √ó 3)
        "reminder": []        # 1296 –≤–∏–¥–µ–æ (144 √ó 3 √ó 3)
    }
    
    video_index = 0
    
    # 1. –¢–ï–•–ù–ò–ö–ê –£–ü–†–ê–ñ–ù–ï–ù–ò–ô (144 –≤–∏–¥–µ–æ)
    for i, exercise in enumerate(exercises):
        video = suitable_videos[video_index % len(suitable_videos)]
        
        assignments["technique"].append({
            "exercise_slug": exercise["slug"],
            "exercise_name": exercise.get("name_en", f"Exercise {i+1}"),
            "exercise_name_ru": exercise.get("name_ru", f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {i+1}"),
            "type": "technique",
            "original_path": video["file_path"],
            "original_name": video["file_name"],
            "new_name": f"{exercise['slug']}_technique_mod1.mp4",
            "size_mb": video["size_mb"],
            "target_path": f"/Volumes/Z9/AI_FITNESS_COACH_VIDEOS/exercises/{exercise['slug']}_technique_mod1.mp4",
            "cloudflare_url": f"https://ai-fitness-media.r2.cloudflarestorage.com/videos/exercises/{exercise['slug']}_technique_mod1.mp4"
        })
        video_index += 1
    
    # 2. –ò–ù–°–¢–†–£–ö–¶–ò–ò (432 –≤–∏–¥–µ–æ: 144 √ó 3 –∞—Ä—Ö–µ—Ç–∏–ø–∞)
    for exercise in exercises:
        for archetype in archetypes:
            video = suitable_videos[video_index % len(suitable_videos)]
            
            assignments["instruction"].append({
                "exercise_slug": exercise["slug"],
                "exercise_name": exercise.get("name_en", ""),
                "archetype": archetype,
                "type": "instruction",
                "original_path": video["file_path"],
                "original_name": video["file_name"],
                "new_name": f"{exercise['slug']}_instruction_{archetype}_mod1.mp4",
                "size_mb": video["size_mb"],
                "target_path": f"/Volumes/Z9/AI_FITNESS_COACH_VIDEOS/instructions/{exercise['slug']}_instruction_{archetype}_mod1.mp4",
                "cloudflare_url": f"https://ai-fitness-media.r2.cloudflarestorage.com/videos/instructions/{exercise['slug']}_instruction_{archetype}_mod1.mp4"
            })
            video_index += 1
    
    # 3. –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø (1296 –≤–∏–¥–µ–æ: 144 √ó 3 –∞—Ä—Ö–µ—Ç–∏–ø–∞ √ó 3 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)
    for exercise in exercises:
        for archetype in archetypes:
            for reminder_num in range(1, 4):
                video = suitable_videos[video_index % len(suitable_videos)]
                
                assignments["reminder"].append({
                    "exercise_slug": exercise["slug"],
                    "exercise_name": exercise.get("name_en", ""),
                    "archetype": archetype,
                    "reminder_number": reminder_num,
                    "type": "reminder",
                    "original_path": video["file_path"],
                    "original_name": video["file_name"],
                    "new_name": f"{exercise['slug']}_reminder_{archetype}_{reminder_num}.mp4",
                    "size_mb": video["size_mb"],
                    "target_path": f"/Volumes/Z9/AI_FITNESS_COACH_VIDEOS/reminders/{exercise['slug']}_reminder_{archetype}_{reminder_num}.mp4",
                    "cloudflare_url": f"https://ai-fitness-media.r2.cloudflarestorage.com/videos/reminders/{exercise['slug']}_reminder_{archetype}_{reminder_num}.mp4"
                })
                video_index += 1
    
    print(f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã:")
    print(f"  üí™ –¢–µ—Ö–Ω–∏–∫–∞: {len(assignments['technique'])}")
    print(f"  üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {len(assignments['instruction'])}")
    print(f"  üí¨ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {len(assignments['reminder'])}")
    print(f"  üéØ –í–°–ï–ì–û: {sum(len(v) for v in assignments.values())}")
    
    return assignments

def batch_copy_videos(assignments, batch_size=50):
    """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –ø–∞–∫–µ—Ç–∞–º–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
    folders = ["exercises", "instructions", "reminders"]
    for folder in folders:
        folder_path = f"/Volumes/Z9/AI_FITNESS_COACH_VIDEOS/{folder}"
        os.makedirs(folder_path, exist_ok=True)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder}")
    
    total_files = sum(len(videos) for videos in assignments.values())
    copied_count = 0
    error_count = 0
    start_time = datetime.now()
    
    print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ {total_files} —Ñ–∞–π–ª–æ–≤ –ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ {batch_size}...")
    
    for category, videos in assignments.items():
        print(f"\nüìÇ –ö–æ–ø–∏—Ä—É–µ–º {category}: {len(videos)} —Ñ–∞–π–ª–æ–≤...")
        
        category_copied = 0
        category_errors = 0
        
        # –ö–æ–ø–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç–∞–º–∏
        for i in range(0, len(videos), batch_size):
            batch = videos[i:i+batch_size]
            batch_copied = 0
            batch_errors = 0
            
            for video in batch:
                try:
                    source = video["original_path"]
                    target = video["target_path"]
                    
                    if not os.path.exists(source):
                        print(f"‚ö†Ô∏è –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {source}")
                        batch_errors += 1
                        continue
                    
                    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
                    shutil.copy2(source, target)
                    batch_copied += 1
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {video['original_name']} - {e}")
                    batch_errors += 1
            
            category_copied += batch_copied
            category_errors += batch_errors
            copied_count += batch_copied
            error_count += batch_errors
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress = (copied_count + error_count) / total_files * 100
            batch_num = (i // batch_size) + 1
            total_batches = (len(videos) + batch_size - 1) // batch_size
            
            elapsed = datetime.now() - start_time
            eta = elapsed * (total_files / (copied_count + error_count)) - elapsed if (copied_count + error_count) > 0 else elapsed
            
            print(f"  üì¶ –ü–∞–∫–µ—Ç {batch_num}/{total_batches}: +{batch_copied} ‚úÖ, +{batch_errors} ‚ùå | "
                  f"–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}% | ETA: {eta}")
        
        print(f"‚úÖ {category}: {category_copied} —É—Å–ø–µ—à–Ω–æ, {category_errors} –æ—à–∏–±–æ–∫")
    
    total_time = datetime.now() - start_time
    print(f"\nüéâ –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {total_time}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {copied_count}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {error_count}")
    print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {copied_count/(copied_count+error_count)*100:.1f}%")
    
    return copied_count, error_count

def save_final_config(assignments):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    all_videos = []
    for category, videos in assignments.items():
        all_videos.extend(videos)
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    final_config = {
        "system_info": {
            "version": "3.0 - Complete System",
            "created": datetime.now().isoformat(),
            "total_videos": len(all_videos),
            "categories": {cat: len(videos) for cat, videos in assignments.items()}
        },
        "video_structure": {
            "technique": {
                "count": len(assignments["technique"]),
                "pattern": "{exercise_slug}_technique_mod1.mp4",
                "folder": "exercises",
                "description": "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
            },
            "instruction": {
                "count": len(assignments["instruction"]),
                "pattern": "{exercise_slug}_instruction_{archetype}_mod1.mp4",
                "folder": "instructions",
                "description": "–ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤"
            },
            "reminder": {
                "count": len(assignments["reminder"]),
                "pattern": "{exercise_slug}_reminder_{archetype}_{number}.mp4",
                "folder": "reminders",
                "description": "–ö–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–¥–±–∞–¥—Ä–∏–≤–∞–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
            }
        },
        "archetypes": {
            "bro": "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä-–ø—Ä–∏—è—Ç–µ–ª—å",
            "sergeant": "–°—Ç—Ä–æ–≥–∏–π —Ç—Ä–µ–Ω–µ—Ä-—Å–µ—Ä–∂–∞–Ω—Ç",
            "intellectual": "–ú—É–¥—Ä—ã–π —Ç—Ä–µ–Ω–µ—Ä-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª"
        },
        "cloudflare_base": "https://ai-fitness-media.r2.cloudflarestorage.com/videos/",
        "exercises_index": {video["exercise_slug"]: video for video in assignments["technique"]},
        "chatgpt_integration": {
            "get_technique": "exercises/{exercise_slug}_technique_mod1.mp4",
            "get_instruction": "instructions/{exercise_slug}_instruction_{archetype}_mod1.mp4",
            "get_reminder": "reminders/{exercise_slug}_reminder_{archetype}_{1-3}.mp4"
        }
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_file = '/Users/alexbel/Desktop/AI Fitness Coach/media_lists/FINAL_COMPLETE_CONFIG.json'
    with open(config_file, 'w', encoding='utf-8') as f:
        json.dump(final_config, f, ensure_ascii=False, indent=2)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º CSV —Ñ–∞–π–ª—ã
    csv_files = []
    for category, videos in assignments.items():
        if videos:
            df = pd.DataFrame(videos)
            csv_file = f'/Users/alexbel/Desktop/AI Fitness Coach/media_lists/FINAL_{category.upper()}_VIDEOS.csv'
            df.to_csv(csv_file, index=False, encoding='utf-8')
            csv_files.append(csv_file)
    
    print(f"üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:")
    print(f"  üîß {config_file}")
    for csv_file in csv_files:
        print(f"  üìä {csv_file}")
    
    return final_config

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üé¨ –ü–û–õ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –í–ò–î–ï–û AI FITNESS COACH")
    print("=" * 60)
    print(f"üéØ –¶–µ–ª—å: —Å–æ–∑–¥–∞—Ç—å 1872 –≤–∏–¥–µ–æ (144 —Ç–µ—Ö–Ω–∏–∫–∞ + 432 –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ + 1296 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π)")
    print()
    
    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∏–¥–µ–æ
    print("üìÇ –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∏–¥–µ–æ...")
    suitable_videos = load_suitable_videos()
    
    if len(suitable_videos) < 144:
        print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∏–¥–µ–æ! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 144, –Ω–∞–π–¥–µ–Ω–æ {len(suitable_videos)}")
        return
    
    # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    print("\nüìã –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...")
    exercises = load_exercises()
    
    if not exercises:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è!")
        return
    
    # 3. –°–æ–∑–¥–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    print("\nüéØ –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –≤–∏–¥–µ–æ...")
    assignments = create_video_assignments(exercises, suitable_videos)
    
    # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print("\nüíæ –®–∞–≥ 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    final_config = save_final_config(assignments)
    
    # 5. –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    print("\nüìÅ –®–∞–≥ 5: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...")
    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ 1872 —Ñ–∞–π–ª–æ–≤ –∑–∞–π–º–µ—Ç 30-60 –º–∏–Ω—É—Ç!")
    
    copied, errors = batch_copy_videos(assignments, batch_size=25)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_size_gb = sum(video["size_mb"] for videos in assignments.values() for video in videos) / 1024
    
    print(f"\nüéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê!")
    print(f"üìä –°–æ–∑–¥–∞–Ω–æ –≤–∏–¥–µ–æ:")
    print(f"  üí™ –¢–µ—Ö–Ω–∏–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {len(assignments['technique'])}")
    print(f"  üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {len(assignments['instruction'])}")
    print(f"  üí¨ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {len(assignments['reminder'])}")
    print(f"  üéØ –í–°–ï–ì–û: {final_config['system_info']['total_videos']}")
    print(f"")
    print(f"üíæ –†–∞–∑–º–µ—Ä —Å–∏—Å—Ç–µ–º—ã: ~{total_size_gb:.1f} GB")
    print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {copied}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {errors}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {copied/(copied+errors)*100:.1f}%")
    print(f"")
    print(f"üîó –ì–æ—Ç–æ–≤–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Cloudflare R2!")
    print(f"ü§ñ –ì–æ—Ç–æ–≤–æ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ChatGPT!")

if __name__ == '__main__':
    main()