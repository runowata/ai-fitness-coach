#!/usr/bin/env python3
"""
–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö –≤–∏–¥–µ–æ
–û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 616 –≤–∏–¥–µ–æ —Å–æ–≥–ª–∞—Å–Ω–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π —Å—Ö–µ–º–µ
"""

import os
import pandas as pd
import json
from datetime import datetime

def load_correct_video_lists():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ –∏–∑ CSV —Ñ–∞–π–ª–æ–≤"""
    
    correct_videos = {
        "exercises": [],
        "motivational": []
    }
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ 271 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    try:
        exercises_df = pd.read_csv('/Users/alexbel/Desktop/AI Fitness Coach/media_lists/EXERCISES_271_VIDEOS.csv')
        for _, row in exercises_df.iterrows():
            correct_videos["exercises"].append({
                "new_name": row["new_name"],
                "target_path": row["target_path"]
            })
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(correct_videos['exercises'])} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {e}")
        return None
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ 345 –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö
    try:
        motivational_df = pd.read_csv('/Users/alexbel/Desktop/AI Fitness Coach/media_lists/MOTIVATIONAL_345_VIDEOS.csv')
        for _, row in motivational_df.iterrows():
            correct_videos["motivational"].append({
                "new_name": row["new_name"],
                "target_path": row["target_path"]
            })
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(correct_videos['motivational'])} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö: {e}")
        return None
    
    return correct_videos

def get_correct_filenames(correct_videos):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤"""
    
    correct_files = set()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    for video in correct_videos["exercises"]:
        filename = os.path.basename(video["target_path"])
        correct_files.add(filename)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö
    for video in correct_videos["motivational"]:
        filename = os.path.basename(video["target_path"])
        correct_files.add(filename)
    
    print(f"üìã –í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(correct_files)}")
    
    return correct_files

def cleanup_folder(folder_path, correct_files, folder_name):
    """–£–¥–∞–ª–∏—Ç—å –ª–∏—à–Ω–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏"""
    
    if not os.path.exists(folder_path):
        print(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {folder_path}")
        return 0, 0
    
    all_files = []
    for file in os.listdir(folder_path):
        if file.endswith('.mp4'):
            all_files.append(file)
    
    files_to_delete = []
    files_to_keep = []
    
    for file in all_files:
        if file in correct_files:
            files_to_keep.append(file)
        else:
            files_to_delete.append(file)
    
    print(f"\nüìÅ –ü–∞–ø–∫–∞ {folder_name}:")
    print(f"  –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(all_files)}")
    print(f"  –û—Å—Ç–∞–≤–∏—Ç—å: {len(files_to_keep)}")
    print(f"  –£–¥–∞–ª–∏—Ç—å: {len(files_to_delete)}")
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Ñ–∞–π–ª—ã
    deleted_count = 0
    for file in files_to_delete:
        try:
            file_path = os.path.join(folder_path, file)
            os.remove(file_path)
            deleted_count += 1
            if deleted_count % 50 == 0:
                print(f"    –£–¥–∞–ª–µ–Ω–æ: {deleted_count}/{len(files_to_delete)}")
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file}: {e}")
    
    return len(files_to_keep), deleted_count

def delete_unnecessary_folders():
    """–£–¥–∞–ª–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–∞–ø–∫–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é"""
    
    base_path = "/Volumes/Z9/AI_FITNESS_COACH_VIDEOS"
    
    # –ü–∞–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
    unnecessary_folders = ["instructions", "reminders"]
    
    deleted_folders = []
    
    for folder in unnecessary_folders:
        folder_path = os.path.join(base_path, folder)
        if os.path.exists(folder_path):
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            file_count = len([f for f in os.listdir(folder_path) if f.endswith('.mp4')])
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
            for file in os.listdir(folder_path):
                if file.endswith('.mp4'):
                    try:
                        os.remove(os.path.join(folder_path, file))
                    except:
                        pass
            
            # –£–¥–∞–ª—è–µ–º —Å–∞–º—É –ø–∞–ø–∫—É
            try:
                os.rmdir(folder_path)
                deleted_folders.append(folder)
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞ {folder} ({file_count} —Ñ–∞–π–ª–æ–≤)")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É {folder}: {e}")
    
    return deleted_folders

def generate_cleanup_report(before_counts, after_counts, correct_videos):
    """–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –æ–± –æ—á–∏—Å—Ç–∫–µ"""
    
    report = f"""# üßπ –û–¢–ß–ï–¢ –û–ë –û–ß–ò–°–¢–ö–ï –í–ò–î–ï–û

## –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ß–ò–°–¢–ö–ò:

### –î–æ –æ—á–∏—Å—Ç–∫–∏:
- exercises: {before_counts.get('exercises', 0)} —Ñ–∞–π–ª–æ–≤
- motivation: {before_counts.get('motivation', 0)} —Ñ–∞–π–ª–æ–≤  
- weekly: {before_counts.get('weekly', 0)} —Ñ–∞–π–ª–æ–≤
- progress: {before_counts.get('progress', 0)} —Ñ–∞–π–ª–æ–≤
- final: {before_counts.get('final', 0)} —Ñ–∞–π–ª–æ–≤
- instructions: {before_counts.get('instructions', 0)} —Ñ–∞–π–ª–æ–≤
- **–í–°–ï–ì–û: {sum(before_counts.values())} —Ñ–∞–π–ª–æ–≤**

### –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:
- exercises: {after_counts.get('exercises', 0)} —Ñ–∞–π–ª–æ–≤ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 271)
- motivation: {after_counts.get('motivation', 0)} —Ñ–∞–π–ª–æ–≤ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 315)
- weekly: {after_counts.get('weekly', 0)} —Ñ–∞–π–ª–æ–≤ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 18)
- progress: {after_counts.get('progress', 0)} —Ñ–∞–π–ª–æ–≤ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 9)
- final: {after_counts.get('final', 0)} —Ñ–∞–π–ª–æ–≤ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3)
- **–í–°–ï–ì–û: {sum(after_counts.values())} —Ñ–∞–π–ª–æ–≤ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 616)**

### –£–¥–∞–ª–µ–Ω–æ:
- exercises: {before_counts.get('exercises', 0) - after_counts.get('exercises', 0)} —Ñ–∞–π–ª–æ–≤
- motivation: {before_counts.get('motivation', 0) - after_counts.get('motivation', 0)} —Ñ–∞–π–ª–æ–≤
- weekly: {before_counts.get('weekly', 0) - after_counts.get('weekly', 0)} —Ñ–∞–π–ª–æ–≤
- progress: {before_counts.get('progress', 0) - after_counts.get('progress', 0)} —Ñ–∞–π–ª–æ–≤
- final: {before_counts.get('final', 0) - after_counts.get('final', 0)} —Ñ–∞–π–ª–æ–≤
- instructions: {before_counts.get('instructions', 0)} —Ñ–∞–π–ª–æ–≤ (–ø–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞)
- **–í–°–ï–ì–û –£–î–ê–õ–ï–ù–û: {sum(before_counts.values()) - sum(after_counts.values())} —Ñ–∞–π–ª–æ–≤**

## ‚úÖ –°–¢–ê–¢–£–°:

"""
    
    expected = {
        "exercises": 271,
        "motivation": 315,
        "weekly": 18,
        "progress": 9,
        "final": 3
    }
    
    all_correct = True
    for folder, expected_count in expected.items():
        actual_count = after_counts.get(folder, 0)
        if actual_count == expected_count:
            report += f"‚úÖ {folder}: {actual_count} = {expected_count} (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)\n"
        else:
            report += f"‚ùå {folder}: {actual_count} ‚â† {expected_count} (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ)\n"
            all_correct = False
    
    if all_correct and sum(after_counts.values()) == 616:
        report += "\n## üéâ –£–°–ü–ï–•! –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–∞ –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é: 616 –≤–∏–¥–µ–æ"
    else:
        report += f"\n## ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–ª–∞–Ω—É"
        report += f"\n–ò–º–µ–µ—Ç—Å—è: {sum(after_counts.values())} –≤–∏–¥–µ–æ"
        report += f"\n–î–æ–ª–∂–Ω–æ –±—ã—Ç—å: 616 –≤–∏–¥–µ–æ"
        report += f"\n–†–∞–∑–Ω–∏—Ü–∞: {sum(after_counts.values()) - 616} –≤–∏–¥–µ–æ"
    
    return report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏"""
    
    print("üßπ –û–ß–ò–°–¢–ö–ê –î–£–ë–õ–ò–ö–ê–¢–û–í –ò –õ–ò–®–ù–ò–• –í–ò–î–ï–û")
    print("=" * 50)
    
    base_path = "/Volumes/Z9/AI_FITNESS_COACH_VIDEOS"
    
    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ
    print("\nüìã –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–æ–≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ...")
    correct_videos = load_correct_video_lists()
    
    if not correct_videos:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ!")
        return
    
    # 2. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
    print("\nüìù –®–∞–≥ 2: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    correct_files = get_correct_filenames(correct_videos)
    
    # –†–∞–∑–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø–∞–ø–∫–∞–º
    correct_by_folder = {
        "exercises": set(),
        "motivation": set(),
        "weekly": set(),
        "progress": set(),
        "final": set()
    }
    
    for video in correct_videos["exercises"]:
        filename = os.path.basename(video["target_path"])
        correct_by_folder["exercises"].add(filename)
    
    for video in correct_videos["motivational"]:
        filename = os.path.basename(video["target_path"])
        folder = video["target_path"].split('/')[-2]  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–∞–ø–∫–∏
        if folder in correct_by_folder:
            correct_by_folder[folder].add(filename)
    
    # 3. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –î–û –æ—á–∏—Å—Ç–∫–∏
    print("\nüìä –®–∞–≥ 3: –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–æ –æ—á–∏—Å—Ç–∫–∏...")
    before_counts = {}
    folders = ["exercises", "motivation", "weekly", "progress", "final", "instructions"]
    
    for folder in folders:
        folder_path = os.path.join(base_path, folder)
        if os.path.exists(folder_path):
            count = len([f for f in os.listdir(folder_path) if f.endswith('.mp4')])
            before_counts[folder] = count
            print(f"  {folder}: {count} —Ñ–∞–π–ª–æ–≤")
        else:
            before_counts[folder] = 0
    
    print(f"  –í–°–ï–ì–û: {sum(before_counts.values())} —Ñ–∞–π–ª–æ–≤")
    
    # 4. –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–∞–ø–∫–∏
    print("\nüóëÔ∏è –®–∞–≥ 4: –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö –ø–∞–ø–æ–∫...")
    deleted_folders = delete_unnecessary_folders()
    
    # 5. –û—á–∏—â–∞–µ–º –ø–∞–ø–∫–∏ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    print("\nüßπ –®–∞–≥ 5: –û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–æ–∫ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...")
    after_counts = {}
    
    for folder, correct_files_for_folder in correct_by_folder.items():
        folder_path = os.path.join(base_path, folder)
        kept, deleted = cleanup_folder(folder_path, correct_files_for_folder, folder)
        after_counts[folder] = kept
        
        if deleted > 0:
            print(f"  ‚úÖ {folder}: —É–¥–∞–ª–µ–Ω–æ {deleted} –ª–∏—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤")
    
    # 6. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –ü–û–°–õ–ï –æ—á–∏—Å—Ç–∫–∏
    print("\nüìä –®–∞–≥ 6: –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏...")
    for folder in ["exercises", "motivation", "weekly", "progress", "final"]:
        folder_path = os.path.join(base_path, folder)
        if os.path.exists(folder_path):
            count = len([f for f in os.listdir(folder_path) if f.endswith('.mp4')])
            after_counts[folder] = count
            print(f"  {folder}: {count} —Ñ–∞–π–ª–æ–≤")
    
    print(f"  –í–°–ï–ì–û: {sum(after_counts.values())} —Ñ–∞–π–ª–æ–≤")
    
    # 7. –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    print("\nüìÑ –®–∞–≥ 7: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...")
    report = generate_cleanup_report(before_counts, after_counts, correct_videos)
    
    report_file = '/Users/alexbel/Desktop/AI Fitness Coach/media_lists/CLEANUP_REPORT.md'
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write(report)
    
    print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    
    # –ò—Ç–æ–≥
    print("\n" + "=" * 50)
    print("üéâ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print(f"üìä –ë—ã–ª–æ: {sum(before_counts.values())} —Ñ–∞–π–ª–æ–≤")
    print(f"üìä –°—Ç–∞–ª–æ: {sum(after_counts.values())} —Ñ–∞–π–ª–æ–≤")
    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: {sum(before_counts.values()) - sum(after_counts.values())} —Ñ–∞–π–ª–æ–≤")
    
    if sum(after_counts.values()) == 616:
        print("‚úÖ –£–°–ü–ï–•! –°–∏—Å—Ç–µ–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–æ–≤–Ω–æ 616 –≤–∏–¥–µ–æ –∫–∞–∫ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–æ—Å—å!")
    else:
        print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –í —Å–∏—Å—Ç–µ–º–µ {sum(after_counts.values())} –≤–∏–¥–µ–æ –≤–º–µ—Å—Ç–æ 616")

if __name__ == '__main__':
    main()