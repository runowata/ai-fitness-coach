#!/usr/bin/env python3
"""
–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤ –Ω–∞ Cloudflare R2 Storage
"""

import os
import boto3
import pandas as pd
from datetime import datetime
from botocore.config import Config
import hashlib
import time
import concurrent.futures
from pathlib import Path

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Cloudflare R2
CLOUDFLARE_R2_CONFIG = {
    'endpoint_url': 'https://92568f8b8a15c68a9ece5fe08c66485b.r2.cloudflarestorage.com',
    'bucket_name': 'ai-fitness-media',
    'public_base': 'https://pub-d620683e68bf49abb422f1bc95810ff7.r2.dev',
    'region': 'auto',
    'access_key_id': '3a9fd5a6b38ec994e057e33c1096874e',
    'secret_access_key': '0817f9a3154b63b1968620a966e05e36f80fca0308ba91d9c8bf65e8622baa13'
}

def check_cloudflare_credentials():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Cloudflare R2"""
    
    print("üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Cloudflare R2...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    access_key = CLOUDFLARE_R2_CONFIG['access_key_id']
    secret_key = CLOUDFLARE_R2_CONFIG['secret_access_key']
    
    if not access_key or not secret_key:
        print("‚ùå –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Cloudflare R2 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return False
    
    print("‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã")
    print(f"üì° Endpoint: {CLOUDFLARE_R2_CONFIG['endpoint_url']}")
    print(f"ü™£ Bucket: {CLOUDFLARE_R2_CONFIG['bucket_name']}")
    print(f"üåê Public URL: {CLOUDFLARE_R2_CONFIG['public_base']}")
    return True

def create_r2_client():
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Cloudflare R2"""
    
    try:
        s3_config = Config(
            region_name='auto',
            signature_version='s3v4',
            s3={
                'addressing_style': 'path'
            }
        )
        
        s3_client = boto3.client(
            's3',
            endpoint_url=CLOUDFLARE_R2_CONFIG['endpoint_url'],
            aws_access_key_id=CLOUDFLARE_R2_CONFIG['access_key_id'],
            aws_secret_access_key=CLOUDFLARE_R2_CONFIG['secret_access_key'],
            config=s3_config
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ - –ø—Ä–æ–±—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –≤–º–µ—Å—Ç–æ head_bucket
        try:
            response = s3_client.list_objects_v2(Bucket=CLOUDFLARE_R2_CONFIG['bucket_name'], MaxKeys=1)
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Cloudflare R2 —É—Å–ø–µ—à–Ω–æ")
        except Exception as list_error:
            print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {list_error}")
            print("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º...")
        
        return s3_client
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Cloudflare R2: {e}")
        return None

def get_video_files_info():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"""
    
    print("üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞—Ö...")
    
    files_info = {
        'exercises': [],
        'motivation': [],
        'weekly': [],
        'progress': [],
        'final': []
    }
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ CSV —Ñ–∞–π–ª–æ–≤
    csv_files = {
        'exercises': '/Users/alexbel/Desktop/AI Fitness Coach/media_lists/EXERCISES_271_VIDEOS.csv',
        'motivation': '/Users/alexbel/Desktop/AI Fitness Coach/media_lists/MOTIVATIONAL_345_VIDEOS.csv'
    }
    
    # –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    try:
        df = pd.read_csv(csv_files['exercises'])
        for _, row in df.iterrows():
            files_info['exercises'].append({
                'local_path': row['target_path'],
                'cloudflare_key': f"videos/exercises/{row['new_name']}",
                'cloudflare_url': row['cloudflare_url'],
                'size_mb': row['size_mb'],
                'filename': row['new_name']
            })
        print(f"‚úÖ Exercises: {len(files_info['exercises'])} —Ñ–∞–π–ª–æ–≤")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ exercises: {e}")
    
    # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ
    try:
        df = pd.read_csv(csv_files['motivation'])
        for _, row in df.iterrows():
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –ø—É—Ç–∏
            path_parts = row['target_path'].split('/')
            if 'motivation' in path_parts:
                category = 'motivation'
            elif 'weekly' in path_parts:
                category = 'weekly'
            elif 'progress' in path_parts:
                category = 'progress'
            elif 'final' in path_parts:
                category = 'final'
            else:
                category = 'motivation'
            
            files_info[category].append({
                'local_path': row['target_path'],
                'cloudflare_key': f"videos/{category}/{row['new_name']}",
                'cloudflare_url': row['cloudflare_url'],
                'size_mb': row['size_mb'],
                'filename': row['new_name']
            })
        
        print(f"‚úÖ Motivation: {len(files_info['motivation'])} —Ñ–∞–π–ª–æ–≤")
        print(f"‚úÖ Weekly: {len(files_info['weekly'])} —Ñ–∞–π–ª–æ–≤")
        print(f"‚úÖ Progress: {len(files_info['progress'])} —Ñ–∞–π–ª–æ–≤")
        print(f"‚úÖ Final: {len(files_info['final'])} —Ñ–∞–π–ª–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ motivational: {e}")
    
    total_files = sum(len(files_info[category]) for category in files_info)
    total_size = sum(
        sum(file['size_mb'] for file in files_info[category]) 
        for category in files_info
    )
    
    print(f"üìä –í—Å–µ–≥–æ –∫ –∑–∞–≥—Ä—É–∑–∫–µ: {total_files} —Ñ–∞–π–ª–æ–≤ ({total_size:.1f} –ú–ë)")
    
    return files_info

def upload_file_to_r2(s3_client, file_info, progress_callback=None):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–¥–∏–Ω —Ñ–∞–π–ª –Ω–∞ R2"""
    
    try:
        local_path = file_info['local_path']
        cloudflare_key = file_info['cloudflare_key']
        filename = file_info['filename']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(local_path):
            return {
                'status': 'error',
                'filename': filename,
                'error': f'–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {local_path}'
            }
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(local_path)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        start_time = time.time()
        
        s3_client.upload_file(
            local_path,
            CLOUDFLARE_R2_CONFIG['bucket_name'],
            cloudflare_key,
            ExtraArgs={
                'ContentType': 'video/mp4',
                'CacheControl': 'max-age=31536000',  # 1 –≥–æ–¥
                'Metadata': {
                    'original-filename': filename,
                    'upload-date': datetime.now().isoformat()
                }
            }
        )
        
        upload_time = time.time() - start_time
        
        if progress_callback:
            progress_callback(filename, 'success')
        
        return {
            'status': 'success',
            'filename': filename,
            'cloudflare_key': cloudflare_key,
            'size_bytes': file_size,
            'upload_time': upload_time,
            'speed_mbps': (file_size / 1024 / 1024) / upload_time if upload_time > 0 else 0
        }
        
    except Exception as e:
        if progress_callback:
            progress_callback(filename, 'error')
        
        return {
            'status': 'error',
            'filename': filename,
            'error': str(e)
        }

def upload_category_parallel(s3_client, category_files, category_name, max_workers=3):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
    
    print(f"\nüîÑ –ó–∞–≥—Ä—É–∑–∫–∞ {category_name}: {len(category_files)} —Ñ–∞–π–ª–æ–≤...")
    
    results = []
    uploaded = 0
    errors = 0
    
    def progress_callback(filename, status):
        nonlocal uploaded, errors
        if status == 'success':
            uploaded += 1
        else:
            errors += 1
        print(f"  {uploaded + errors:3d}/{len(category_files)}: {filename} {'‚úÖ' if status == 'success' else '‚ùå'}")
    
    with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
        future_to_file = {
            executor.submit(upload_file_to_r2, s3_client, file_info, progress_callback): file_info
            for file_info in category_files
        }
        
        for future in concurrent.futures.as_completed(future_to_file):
            result = future.result()
            results.append(result)
    
    print(f"‚úÖ {category_name}: {uploaded} —É—Å–ø–µ—à–Ω–æ, {errors} –æ—à–∏–±–æ–∫")
    
    return results

def generate_upload_report(all_results, start_time, end_time):
    """–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –æ –∑–∞–≥—Ä—É–∑–∫–µ"""
    
    total_files = sum(len(results) for results in all_results.values())
    successful = sum(
        len([r for r in results if r['status'] == 'success']) 
        for results in all_results.values()
    )
    failed = total_files - successful
    
    total_size_mb = sum(
        sum(r.get('size_bytes', 0) for r in results if r['status'] == 'success') 
        for results in all_results.values()
    ) / 1024 / 1024
    
    upload_duration = end_time - start_time
    
    report = f"""# üåê –û–¢–ß–ï–¢ –û –ó–ê–ì–†–£–ó–ö–ï –ù–ê CLOUDFLARE R2

## –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## üìä –°–í–û–î–ö–ê:

### –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
- **–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤**: {total_files}
- **–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ**: {successful} ‚úÖ
- **–û—à–∏–±–æ–∫**: {failed} ‚ùå
- **–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞**: {(successful/total_files*100):.1f}%
- **–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä**: {total_size_mb:.1f} –ú–ë
- **–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏**: {upload_duration/60:.1f} –º–∏–Ω—É—Ç
- **–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å**: {total_size_mb/(upload_duration/60):.1f} –ú–ë/–º–∏–Ω

---

## üìÅ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:

"""
    
    for category, results in all_results.items():
        successful_cat = len([r for r in results if r['status'] == 'success'])
        failed_cat = len([r for r in results if r['status'] == 'error'])
        total_cat = len(results)
        
        if total_cat > 0:
            size_cat = sum(r.get('size_bytes', 0) for r in results if r['status'] == 'success') / 1024 / 1024
            
            report += f"""### {category.title()}:
- –§–∞–π–ª–æ–≤: {total_cat}
- –£—Å–ø–µ—à–Ω–æ: {successful_cat} ‚úÖ
- –û—à–∏–±–æ–∫: {failed_cat} ‚ùå
- –†–∞–∑–º–µ—Ä: {size_cat:.1f} –ú–ë

"""
    
    report += """---

## üîó CLOUDFLARE R2 URLS:

### –ë–∞–∑–æ–≤—ã–π URL:
```
https://pub-d620683e68bf49abb422f1bc95810ff7.r2.dev
```

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤:
```
/videos/exercises/warmup_01_technique_m01.mp4
/videos/exercises/main_001_technique_m01.mp4
/videos/exercises/endurance_01_technique_m01.mp4
/videos/exercises/relaxation_01_technique_m01.mp4
/videos/motivation/intro_bro_m01.mp4
/videos/weekly/weekly_bro_week01.mp4
/videos/progress/progress_bro_week02.mp4
/videos/final/final_bro.mp4
```

---

## ‚ùå –û–®–ò–ë–ö–ò –ó–ê–ì–†–£–ó–ö–ò:

"""
    
    error_count = 0
    for category, results in all_results.items():
        for result in results:
            if result['status'] == 'error':
                error_count += 1
                report += f"- `{result['filename']}` ({category}): {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n"
    
    if error_count == 0:
        report += "–û—à–∏–±–æ–∫ –Ω–µ –±—ã–ª–æ.\n"
    
    report += f"""
---

## üéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:

1. ‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤ –ø–æ URL
2. ‚úÖ –û–±–Ω–æ–≤–∏—Ç—å Django –º–æ–¥–µ–ª–∏ MediaAsset
3. ‚úÖ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å CDN –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
4. ‚úÖ –û–±–Ω–æ–≤–∏—Ç—å frontend –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è R2 URLs

---

## üéâ –°–¢–ê–¢–£–°:

"""
    
    if failed == 0:
        report += "**üéâ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!**\n\n"
        report += "–í—Å–µ 616 –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ Cloudflare R2.\n"
        report += "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å CDN.\n"
    else:
        report += "**‚ö†Ô∏è –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò**\n\n"
        report += f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {successful} –∏–∑ {total_files} —Ñ–∞–π–ª–æ–≤.\n"
        report += f"–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ {failed} —Ñ–∞–π–ª–æ–≤.\n"
    
    return report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏"""
    
    print("üåê –ó–ê–ì–†–£–ó–ö–ê –í–ò–î–ï–û –ù–ê CLOUDFLARE R2")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("\nüîë –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    if not check_cloudflare_credentials():
        print("‚ùå –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞")
        return
    
    # 2. –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç R2
    print("\nüîó –®–∞–≥ 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Cloudflare R2...")
    s3_client = create_r2_client()
    
    if not s3_client:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Cloudflare R2")
        return
    
    # 3. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
    print("\nüìã –®–∞–≥ 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤...")
    files_info = get_video_files_info()
    
    if not any(files_info.values()):
        print("‚ùå –§–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # 4. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    print("\nüöÄ –®–∞–≥ 4: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤...")
    start_time = time.time()
    
    all_results = {}
    
    # –ü–æ—Ä—è–¥–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏: exercises, motivation, weekly, progress, final
    upload_order = ['exercises', 'motivation', 'weekly', 'progress', 'final']
    
    for category in upload_order:
        if files_info[category]:
            results = upload_category_parallel(s3_client, files_info[category], category)
            all_results[category] = results
    
    end_time = time.time()
    
    # 5. –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    print("\nüìÑ –®–∞–≥ 5: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...")
    report = generate_upload_report(all_results, start_time, end_time)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_file = '/Users/alexbel/Desktop/AI Fitness Coach/media_lists/CLOUDFLARE_R2_UPLOAD_REPORT.md'
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write(report)
    
    print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    
    # –ò—Ç–æ–≥
    total_files = sum(len(results) for results in all_results.values())
    successful = sum(
        len([r for r in results if r['status'] == 'success']) 
        for results in all_results.values()
    )
    failed = total_files - successful
    
    print("\n" + "=" * 60)
    if failed == 0:
        print("üéâ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {successful} —Ñ–∞–π–ª–æ–≤")
        print("üåê –í—Å–µ –≤–∏–¥–µ–æ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ Cloudflare R2")
    else:
        print("‚ö†Ô∏è –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful} —Ñ–∞–π–ª–æ–≤")
        print(f"‚ùå –û—à–∏–±–æ–∫: {failed} —Ñ–∞–π–ª–æ–≤")
        print("üìÑ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")

if __name__ == '__main__':
    main()