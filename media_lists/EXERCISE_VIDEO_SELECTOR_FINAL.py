#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–±–æ—Ä—â–∏–∫ –≤–∏–¥–µ–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏ exercises
–ë–µ—Ä–µ–º –≤–∏–¥–µ–æ 1-5 –º–∏–Ω—É—Ç –¥–ª—è –≤—Å–µ—Ö 144 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
"""

import os
import shutil
import json
import pandas as pd
from pathlib import Path

def get_file_size_mb(file_path):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö"""
    try:
        return os.path.getsize(file_path) / (1024 * 1024)
    except:
        return 0

def is_suitable_for_exercise(size_mb):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –≤–∏–¥–µ–æ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (1-5 –º–∏–Ω—É—Ç)"""
    # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: 1-5 –º–∏–Ω—É—Ç = 5-50 MB
    return 5 <= size_mb <= 50

def collect_exercise_videos():
    """–°–æ–±—Ä–∞—Ç—å –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∏–¥–µ–æ –∏–∑ –ø–∞–ø–∫–∏ exercises"""
    
    exercise_folder = "/Volumes/Z9/–º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è ai fitnes/exercises"
    
    print(f"üîç –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É exercises: {exercise_folder}")
    
    suitable_videos = []
    total_scanned = 0
    
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–¥–ø–∞–ø–∫–∏
    for root, dirs, files in os.walk(exercise_folder):
        for file in files:
            if file.lower().endswith('.mp4'):
                file_path = os.path.join(root, file)
                size_mb = get_file_size_mb(file_path)
                total_scanned += 1
                
                if is_suitable_for_exercise(size_mb):
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç exercises
                    rel_path = os.path.relpath(root, exercise_folder)
                    
                    suitable_videos.append({
                        "file_path": file_path,
                        "file_name": file,
                        "folder": rel_path if rel_path != "." else "root",
                        "size_mb": round(size_mb, 2),
                        "estimated_duration": f"{size_mb/10:.1f} –º–∏–Ω"  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ
                    })
                
                if total_scanned % 100 == 0:
                    print(f"  –ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {total_scanned}, –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö: {len(suitable_videos)}")
    
    print(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
    print(f"  –í—Å–µ–≥–æ –≤–∏–¥–µ–æ: {total_scanned}")
    print(f"  –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö (1-5 –º–∏–Ω): {len(suitable_videos)}")
    
    return suitable_videos

def load_exercise_database():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
    
    excel_file = '/Users/alexbel/Desktop/AI Fitness Coach/media_lists/MODERN_EXERCISES_DATABASE_2025.xlsx'
    
    try:
        df = pd.read_excel(excel_file, sheet_name='All_Modern_Exercises')
        exercises = df.to_dict('records')
        print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(exercises)} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã")
        return exercises
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {e}")
        return []

def create_full_exercise_mapping(exercises, available_videos):
    """–°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –≤—Å–µ—Ö 144 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
    
    print(f"üéØ –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è {len(exercises)} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...")
    print(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ {len(available_videos)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∏–¥–µ–æ")
    
    if len(available_videos) < len(exercises):
        print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í–∏–¥–µ–æ –º–µ–Ω—å—à–µ —á–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π!")
        print(f"   –ù—É–∂–Ω–æ: {len(exercises)}")
        print(f"   –ï—Å—Ç—å: {len(available_videos)}")
        print(f"   –ù–µ–¥–æ—Å—Ç–∞–µ—Ç: {len(exercises) - len(available_videos)}")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –ø–æ —Ä–∞–∑–º–µ—Ä—É (–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ä–∞–∑–º–µ—Ä—ã ~15-25MB)
    available_videos.sort(key=lambda x: abs(x["size_mb"] - 20))
    
    exercise_mapping = []
    
    for i, exercise in enumerate(exercises):
        # –ë–µ—Ä–µ–º –≤–∏–¥–µ–æ –ø–æ –ø–æ—Ä—è–¥–∫—É (–ª—É—á—à–∏–µ —Å–Ω–∞—á–∞–ª–∞)
        if i < len(available_videos):
            video = available_videos[i]
        else:
            # –ï—Å–ª–∏ –≤–∏–¥–µ–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ (—Ü–∏–∫–ª–∏—á–Ω–æ)
            video = available_videos[i % len(available_videos)]
            print(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è {i+1}")
        
        new_name = f"{exercise['slug']}_technique_mod1.mp4"
        
        exercise_mapping.append({
            "exercise_id": exercise.get('id', i+1),
            "exercise_slug": exercise["slug"],
            "exercise_name": exercise.get("name_en", f"Exercise {i+1}"),
            "exercise_name_ru": exercise.get("name_ru", f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {i+1}"),
            "category": exercise.get("category", "unknown"),
            "category_ru": exercise.get("category_ru", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "original_path": video["file_path"],
            "original_name": video["file_name"],
            "original_folder": video["folder"],
            "new_name": new_name,
            "size_mb": video["size_mb"],
            "estimated_duration": video["estimated_duration"],
            "target_path": f"/Volumes/Z9/AI_FITNESS_COACH_VIDEOS/exercises/{new_name}",
            "cloudflare_url": f"https://ai-fitness-media.r2.cloudflarestorage.com/videos/exercises/{new_name}",
            "video_reused": i >= len(available_videos)
        })
    
    print(f"‚úÖ –ú–∞–ø–ø–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω –¥–ª—è –≤—Å–µ—Ö {len(exercise_mapping)} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    reused_count = sum(1 for item in exercise_mapping if item.get("video_reused", False))
    if reused_count > 0:
        print(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {reused_count} –≤–∏–¥–µ–æ")
    
    return exercise_mapping

def create_additional_video_types(exercises, available_videos):
    """–°–æ–∑–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã –≤–∏–¥–µ–æ (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)"""
    
    print(f"üé¨ –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã –≤–∏–¥–µ–æ...")
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    small_videos = [v for v in available_videos if 5 <= v["size_mb"] <= 15]  # –î–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    medium_videos = [v for v in available_videos if 10 <= v["size_mb"] <= 25]  # –î–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    
    archetypes = ["bro", "sergeant", "intellectual"]
    
    instruction_mapping = []
    reminder_mapping = []
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: 3 –∞—Ä—Ö–µ—Ç–∏–ø–∞ √ó 144 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è = 432 –≤–∏–¥–µ–æ
    video_index = 0
    for exercise in exercises:
        for archetype in archetypes:
            if video_index < len(medium_videos):
                video = medium_videos[video_index % len(medium_videos)]
            else:
                video = available_videos[video_index % len(available_videos)]
            
            new_name = f"{exercise['slug']}_instruction_{archetype}_mod1.mp4"
            
            instruction_mapping.append({
                "exercise_slug": exercise["slug"],
                "exercise_name": exercise.get("name_en", ""),
                "archetype": archetype,
                "type": "instruction",
                "original_path": video["file_path"],
                "original_name": video["file_name"],
                "new_name": new_name,
                "size_mb": video["size_mb"],
                "target_path": f"/Volumes/Z9/AI_FITNESS_COACH_VIDEOS/instructions/{new_name}",
                "cloudflare_url": f"https://ai-fitness-media.r2.cloudflarestorage.com/videos/instructions/{new_name}"
            })
            video_index += 1
    
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: 3 –∞—Ä—Ö–µ—Ç–∏–ø–∞ √ó 3 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è √ó 144 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è = 1296 –≤–∏–¥–µ–æ
    video_index = 0
    for exercise in exercises:
        for archetype in archetypes:
            for reminder_num in range(1, 4):  # 3 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
                if video_index < len(small_videos):
                    video = small_videos[video_index % len(small_videos)]
                else:
                    video = available_videos[video_index % len(available_videos)]
                
                new_name = f"{exercise['slug']}_reminder_{archetype}_{reminder_num}.mp4"
                
                reminder_mapping.append({
                    "exercise_slug": exercise["slug"],
                    "exercise_name": exercise.get("name_en", ""),
                    "archetype": archetype,
                    "reminder_number": reminder_num,
                    "type": "reminder",
                    "original_path": video["file_path"],
                    "original_name": video["file_name"],
                    "new_name": new_name,
                    "size_mb": video["size_mb"],
                    "target_path": f"/Volumes/Z9/AI_FITNESS_COACH_VIDEOS/reminders/{new_name}",
                    "cloudflare_url": f"https://ai-fitness-media.r2.cloudflarestorage.com/videos/reminders/{new_name}"
                })
                video_index += 1
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ:")
    print(f"  üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {len(instruction_mapping)}")
    print(f"  üí¨ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(reminder_mapping)}")
    
    return instruction_mapping, reminder_mapping

def copy_all_videos(exercise_mapping, instruction_mapping, reminder_mapping, motivational_mapping):
    """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–∏–¥–µ–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    
    # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
    folders = ["exercises", "instructions", "reminders", "weekly", "final"]
    for folder in folders:
        os.makedirs(f"/Volumes/Z9/AI_FITNESS_COACH_VIDEOS/{folder}", exist_ok=True)
    
    all_mappings = [
        ("–£–ø—Ä–∞–∂–µ–Ω–∏—è", exercise_mapping),
        ("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", instruction_mapping),
        ("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", reminder_mapping),
        ("–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ", motivational_mapping)
    ]
    
    total_success = 0
    total_errors = 0
    
    for category_name, mapping in all_mappings:
        if not mapping:
            continue
            
        print(f"\nüìÅ –ö–æ–ø–∏—Ä—É–µ–º {category_name}: {len(mapping)} —Ñ–∞–π–ª–æ–≤...")
        
        category_success = 0
        category_errors = 0
        
        for i, item in enumerate(mapping):
            try:
                source = item["original_path"]
                target = item["target_path"]
                
                # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
                shutil.copy2(source, target)
                category_success += 1
                total_success += 1
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 —Ñ–∞–π–ª–æ–≤
                if (i + 1) % 50 == 0 or (i + 1) == len(mapping):
                    print(f"  –ü—Ä–æ–≥—Ä–µ—Å—Å: {i+1}/{len(mapping)} ({(i+1)/len(mapping)*100:.1f}%)")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {item.get('original_name', 'unknown')}: {e}")
                category_errors += 1
                total_errors += 1
        
        print(f"‚úÖ {category_name}: {category_success} —É—Å–ø–µ—à–Ω–æ, {category_errors} –æ—à–∏–±–æ–∫")
    
    print(f"\nüéâ –ò–¢–û–ì–û: {total_success} —É—Å–ø–µ—à–Ω–æ, {total_errors} –æ—à–∏–±–æ–∫")
    return total_success, total_errors

def save_complete_mapping(exercise_mapping, instruction_mapping, reminder_mapping, motivational_mapping):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞"""
    
    # –ü–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    complete_result = {
        "summary": {
            "total_exercises": len(exercise_mapping),
            "total_instructions": len(instruction_mapping),
            "total_reminders": len(reminder_mapping),
            "total_motivational": len(motivational_mapping),
            "grand_total": len(exercise_mapping) + len(instruction_mapping) + len(reminder_mapping) + len(motivational_mapping)
        },
        "exercises": exercise_mapping,
        "instructions": instruction_mapping,
        "reminders": reminder_mapping,
        "motivational": motivational_mapping
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π JSON
    json_file = '/Users/alexbel/Desktop/AI Fitness Coach/media_lists/COMPLETE_VIDEO_MAPPING.json'
    with open(json_file, 'w', encoding='utf-8') as f:
        json.dump(complete_result, f, ensure_ascii=False, indent=2)
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ CSV –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    files_created = []
    
    if exercise_mapping:
        df = pd.DataFrame(exercise_mapping)
        csv_file = '/Users/alexbel/Desktop/AI Fitness Coach/media_lists/ALL_EXERCISE_VIDEOS.csv'
        df.to_csv(csv_file, index=False, encoding='utf-8')
        files_created.append(csv_file)
    
    if instruction_mapping:
        df = pd.DataFrame(instruction_mapping)
        csv_file = '/Users/alexbel/Desktop/AI Fitness Coach/media_lists/ALL_INSTRUCTION_VIDEOS.csv'
        df.to_csv(csv_file, index=False, encoding='utf-8')
        files_created.append(csv_file)
    
    if reminder_mapping:
        df = pd.DataFrame(reminder_mapping)
        csv_file = '/Users/alexbel/Desktop/AI Fitness Coach/media_lists/ALL_REMINDER_VIDEOS.csv'
        df.to_csv(csv_file, index=False, encoding='utf-8')
        files_created.append(csv_file)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è ChatGPT
    chatgpt_config = {
        "system_info": {
            "version": "2.0",
            "phase": "Complete System - All Video Types",
            "total_videos": complete_result["summary"]["grand_total"]
        },
        "video_types": {
            "technique": {
                "count": len(exercise_mapping),
                "pattern": "{exercise_slug}_technique_mod1.mp4",
                "folder": "exercises"
            },
            "instruction": {
                "count": len(instruction_mapping),
                "pattern": "{exercise_slug}_instruction_{archetype}_mod1.mp4",
                "folder": "instructions"
            },
            "reminder": {
                "count": len(reminder_mapping),
                "pattern": "{exercise_slug}_reminder_{archetype}_{number}.mp4",
                "folder": "reminders"
            },
            "weekly": {
                "pattern": "weekly_{archetype}_week{number}.mp4",
                "folder": "weekly"
            },
            "final": {
                "pattern": "final_{archetype}.mp4",
                "folder": "final"
            }
        },
        "exercises_by_slug": {item["exercise_slug"]: item for item in exercise_mapping},
        "archetypes": ["bro", "sergeant", "intellectual"],
        "base_url": "https://ai-fitness-media.r2.cloudflarestorage.com/videos/"
    }
    
    config_file = '/Users/alexbel/Desktop/AI Fitness Coach/media_lists/COMPLETE_CHATGPT_CONFIG.json'
    with open(config_file, 'w', encoding='utf-8') as f:
        json.dump(chatgpt_config, f, ensure_ascii=False, indent=2)
    
    files_created.extend([json_file, config_file])
    
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ñ–∞–π–ª—ã:")
    for file in files_created:
        print(f"  üìÑ {file}")
    
    return complete_result

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üé¨ –ü–û–õ–ù–´–ô –û–¢–ë–û–† –í–ò–î–ï–û –î–õ–Ø AI FITNESS COACH")
    print("=" * 60)
    
    # 1. –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∏–¥–µ–æ –∏–∑ –ø–∞–ø–∫–∏ exercises
    print("\nüìä –®–∞–≥ 1: –°–±–æ—Ä –≤–∏–¥–µ–æ –∏–∑ –ø–∞–ø–∫–∏ exercises...")
    available_videos = collect_exercise_videos()
    
    if not available_videos:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∏–¥–µ–æ!")
        return
    
    # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    print("\nüìã –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...")
    exercises = load_exercise_database()
    
    if not exercises:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è!")
        return
    
    # 3. –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π (144 –≤–∏–¥–µ–æ)
    print("\nüéØ –®–∞–≥ 3: –ú–∞–ø–ø–∏–Ω–≥ —Ç–µ—Ö–Ω–∏–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...")
    exercise_mapping = create_full_exercise_mapping(exercises, available_videos)
    
    # 4. –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã –≤–∏–¥–µ–æ
    print("\nüé¨ –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
    instruction_mapping, reminder_mapping = create_additional_video_types(exercises, available_videos)
    
    # 5. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞–ø–ø–∏–Ω–≥ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
    print("\nüì• –®–∞–≥ 5: –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ...")
    try:
        motivational_df = pd.read_csv('/Users/alexbel/Desktop/AI Fitness Coach/media_lists/MOTIVATIONAL_VIDEOS.csv')
        motivational_mapping = motivational_df.to_dict('records')
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(motivational_mapping)} –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ")
    except:
        print("‚ö†Ô∏è –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        motivational_mapping = []
    
    # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥
    print("\nüíæ –®–∞–≥ 6: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞...")
    complete_result = save_complete_mapping(exercise_mapping, instruction_mapping, reminder_mapping, motivational_mapping)
    
    # 7. –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    print("\nüìÅ –®–∞–≥ 7: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤...")
    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –∑–∞–π–º–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!")
    
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    total_success, total_errors = copy_all_videos(
        exercise_mapping, 
        instruction_mapping, 
        reminder_mapping, 
        motivational_mapping
    )
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüéâ –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  üí™ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (—Ç–µ—Ö–Ω–∏–∫–∞): {len(exercise_mapping)}")
    print(f"  üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {len(instruction_mapping)}")
    print(f"  üí¨ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {len(reminder_mapping)}")
    print(f"  üé¨ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ: {len(motivational_mapping)}")
    print(f"  üéØ –í–°–ï–ì–û –í–ò–î–ï–û: {complete_result['summary']['grand_total']}")
    print(f"")
    print(f"üìÅ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: {total_success} —É—Å–ø–µ—à–Ω–æ, {total_errors} –æ—à–∏–±–æ–∫")
    print(f"üíæ –†–∞–∑–º–µ—Ä —Å–∏—Å—Ç–µ–º—ã: ~{sum(item['size_mb'] for item in exercise_mapping + instruction_mapping + reminder_mapping)/1024:.1f} GB")

if __name__ == '__main__':
    main()