#!/usr/bin/env python3
"""
–ü–†–ê–í–ò–õ–¨–ù–´–ô –æ—Ç–±–æ—Ä—â–∏–∫ –≤–∏–¥–µ–æ: —Ç–æ—á–Ω–æ 616 –≤–∏–¥–µ–æ
271 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π + 345 –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö = 616 –≤–∏–¥–µ–æ
"""

import os
import shutil
import json
import pandas as pd
from datetime import datetime

def get_file_size_mb(file_path):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö"""
    try:
        return os.path.getsize(file_path) / (1024 * 1024)
    except:
        return 0

def collect_exercise_videos():
    """–°–æ–±—Ä–∞—Ç—å 271 –≤–∏–¥–µ–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏ exercises"""
    
    exercise_folder = "/Volumes/Z9/–º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è ai fitnes/exercises"
    
    print(f"üí™ –°–æ–±–∏—Ä–∞–µ–º 271 –≤–∏–¥–µ–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...")
    
    suitable_videos = []
    
    for root, dirs, files in os.walk(exercise_folder):
        for file in files:
            if file.lower().endswith('.mp4'):
                file_path = os.path.join(root, file)
                size_mb = get_file_size_mb(file_path)
                
                # –ë–µ—Ä–µ–º –≤–∏–¥–µ–æ 1-5 –º–∏–Ω—É—Ç (5-50 MB)
                if 5 <= size_mb <= 50:
                    suitable_videos.append({
                        "file_path": file_path,
                        "file_name": file,
                        "size_mb": round(size_mb, 2)
                    })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É, –±–µ—Ä–µ–º –ª—É—á—à–∏–µ
    suitable_videos.sort(key=lambda x: abs(x["size_mb"] - 20))  # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º ~20MB
    
    # –ë–µ—Ä–µ–º —Ä–æ–≤–Ω–æ 271 –≤–∏–¥–µ–æ
    selected = suitable_videos[:271]
    
    print(f"‚úÖ –û—Ç–æ–±—Ä–∞–Ω–æ {len(selected)} –≤–∏–¥–µ–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ {len(suitable_videos)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
    
    return selected

def collect_trainer_videos():
    """–°–æ–±—Ä–∞—Ç—å 345 –≤–∏–¥–µ–æ –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤"""
    
    trainers = {
        "bro": "/Volumes/Z9/–º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è ai fitnes/trainer 1",
        "sergeant": "/Volumes/Z9/–º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è ai fitnes/trainer 2", 
        "intellectual": "/Volumes/Z9/–º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è ai fitnes/trainer 3"
    }
    
    print(f"üé¨ –°–æ–±–∏—Ä–∞–µ–º 345 –≤–∏–¥–µ–æ –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤...")
    
    trainer_videos = {}
    
    for archetype, path in trainers.items():
        videos = []
        
        for root, dirs, files in os.walk(path):
            for file in files:
                if file.lower().endswith('.mp4'):
                    file_path = os.path.join(root, file)
                    size_mb = get_file_size_mb(file_path)
                    
                    videos.append({
                        "file_path": file_path,
                        "file_name": file,
                        "size_mb": round(size_mb, 2),
                        "archetype": archetype
                    })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
        videos.sort(key=lambda x: x["size_mb"])
        trainer_videos[archetype] = videos
        
        print(f"  {archetype}: {len(videos)} –≤–∏–¥–µ–æ –¥–æ—Å—Ç—É–ø–Ω–æ")
    
    return trainer_videos

def collect_long_videos():
    """–°–æ–±—Ä–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö/—Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö"""
    
    long_folder = "/Volumes/Z9/–º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è ai fitnes/long and weekly videos"
    
    print(f"üìπ –°–æ–±–∏—Ä–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –≤–∏–¥–µ–æ...")
    
    long_videos = []
    
    for root, dirs, files in os.walk(long_folder):
        for file in files:
            if file.lower().endswith('.mp4'):
                file_path = os.path.join(root, file)
                size_mb = get_file_size_mb(file_path)
                
                # –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ –±–µ—Ä–µ–º –æ—Ç 30MB (–ø—Ä–∏–º–µ—Ä–Ω–æ 3+ –º–∏–Ω—É—Ç—ã)
                if size_mb >= 30:
                    long_videos.append({
                        "file_path": file_path,
                        "file_name": file,
                        "size_mb": round(size_mb, 2)
                    })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ä–∞–∑–º–µ—Ä—ã)
    long_videos.sort(key=lambda x: abs(x["size_mb"] - 50))
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(long_videos)} –¥–ª–∏–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ")
    
    return long_videos

def create_exercise_mapping(exercise_videos):
    """–°–æ–∑–¥–∞—Ç—å –º–∞–ø–ø–∏–Ω–≥ 271 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—É—é –±–∞–∑—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π (271 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ)
    excel_file = '/Users/alexbel/Desktop/AI Fitness Coach/media_lists/COMPLETE_EXERCISES_DATABASE.xlsx'
    
    try:
        df = pd.read_excel(excel_file, sheet_name='All_Exercises')
        exercises = df.to_dict('records')[:271]  # –ë–µ—Ä–µ–º —Ä–æ–≤–Ω–æ 271
        print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(exercises)} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {e}")
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        exercises = []
        categories = [
            ("warmup", "–†–∞–∑–º–∏–Ω–∫–∞", 42),
            ("main", "–û—Å–Ω–æ–≤–Ω—ã–µ", 145),
            ("sexual_endurance", "–°–µ–∫—Å—É–∞–ª—å–Ω–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å", 42),
            ("relaxation", "–†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ", 42)
        ]
        
        ex_id = 1
        for category, category_ru, count in categories:
            for i in range(count):
                exercises.append({
                    "id": ex_id,
                    "slug": f"{category}_{i+1:02d}",
                    "name_en": f"{category.replace('_', ' ').title()} {i+1}",
                    "name_ru": f"{category_ru} {i+1}",
                    "category": category,
                    "category_ru": category_ru,
                    "file_name": f"{category}_{i+1:02d}_technique_m01.mp4"
                })
                ex_id += 1
    
    # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥
    exercise_mapping = []
    
    for i, exercise in enumerate(exercises):
        video = exercise_videos[i] if i < len(exercise_videos) else exercise_videos[i % len(exercise_videos)]
        
        file_name = exercise.get("file_name", f"{exercise.get('slug', f'exercise_{i+1}')}_technique_m01.mp4")
        
        exercise_mapping.append({
            "exercise_id": exercise.get("id", i+1),
            "exercise_slug": exercise.get("slug", f"exercise_{i+1}"),
            "exercise_name": exercise.get("name_en", f"Exercise {i+1}"),
            "exercise_name_ru": exercise.get("name_ru", f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {i+1}"),
            "category": exercise.get("category", "unknown"),
            "category_ru": exercise.get("category_ru", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "original_path": video["file_path"],
            "original_name": video["file_name"],
            "new_name": file_name,
            "size_mb": video["size_mb"],
            "target_path": f"/Volumes/Z9/AI_FITNESS_COACH_VIDEOS/exercises/{file_name}",
            "cloudflare_url": f"https://ai-fitness-media.r2.cloudflarestorage.com/videos/exercises/{file_name}"
        })
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è {len(exercise_mapping)} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
    
    return exercise_mapping

def create_motivational_mapping(trainer_videos, long_videos):
    """–°–æ–∑–¥–∞—Ç—å –º–∞–ø–ø–∏–Ω–≥ 345 –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ"""
    
    archetypes = ["bro", "sergeant", "intellectual"]
    
    motivational_mapping = []
    
    # –ö–æ—Ä–æ—Ç–∫–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ (315 –≤–∏–¥–µ–æ: 63 √ó 5 —Ç–∏–ø–æ–≤)
    short_types = [
        ("intro", "–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"),
        ("warmup_motivation", "–ú–æ—Ç–∏–≤–∞—Ü–∏—è –ø–æ—Å–ª–µ —Ä–∞–∑–º–∏–Ω–∫–∏"),
        ("main_motivation", "–ú–æ—Ç–∏–≤–∞—Ü–∏—è –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö"),
        ("trainer_speech", "–ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π —Ä–æ–ª–∏–∫ —Ç—Ä–µ–Ω–µ—Ä–∞"),
        ("closing", "–ù–∞–ø—É—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ")
    ]
    
    video_index = 0
    
    # 1. –ö–æ—Ä–æ—Ç–∫–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ (315 –≤–∏–¥–µ–æ)
    for video_type, description in short_types:
        for week in range(1, 22):  # 21 –¥–µ–Ω—å –ø—Ä–æ–≥—Ä–∞–º–º—ã
            for archetype in archetypes:
                # –í—ã–±–∏—Ä–∞–µ–º –≤–∏–¥–µ–æ –æ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
                available_videos = trainer_videos.get(archetype, [])
                
                if available_videos:
                    video = available_videos[video_index % len(available_videos)]
                    
                    new_name = f"{video_type}_{archetype}_day{week:02d}.mp4"
                    
                    motivational_mapping.append({
                        "type": video_type,
                        "description": description,
                        "archetype": archetype,
                        "day": week,
                        "original_path": video["file_path"],
                        "original_name": video["file_name"],
                        "new_name": new_name,
                        "size_mb": video["size_mb"],
                        "target_path": f"/Volumes/Z9/AI_FITNESS_COACH_VIDEOS/motivation/{new_name}",
                        "cloudflare_url": f"https://ai-fitness-media.r2.cloudflarestorage.com/videos/motivation/{new_name}"
                    })
                    
                    video_index += 1
    
    # 2. –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –¥–ª–∏–Ω–Ω—ã–µ (18 –≤–∏–¥–µ–æ)
    long_index = 0
    for week in range(1, 7):  # 6 –Ω–µ–¥–µ–ª—å
        for archetype in archetypes:
            video = long_videos[long_index % len(long_videos)]
            
            new_name = f"weekly_{archetype}_week{week}.mp4"
            
            motivational_mapping.append({
                "type": "weekly",
                "description": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –¥–ª–∏–Ω–Ω—ã–µ (10 –º–∏–Ω)",
                "archetype": archetype,
                "week": week,
                "original_path": video["file_path"],
                "original_name": video["file_name"],
                "new_name": new_name,
                "size_mb": video["size_mb"],
                "target_path": f"/Volumes/Z9/AI_FITNESS_COACH_VIDEOS/weekly/{new_name}",
                "cloudflare_url": f"https://ai-fitness-media.r2.cloudflarestorage.com/videos/weekly/{new_name}"
            })
            
            long_index += 1
    
    # 3. –î–≤—É—Ö–Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–≤–∏–¥–µ–æ (9 –≤–∏–¥–µ–æ)
    for progress_num in range(1, 4):  # 3 —Ä–∞–∑–∞
        for archetype in archetypes:
            video = long_videos[long_index % len(long_videos)]
            
            new_name = f"progress_{archetype}_{progress_num}.mp4"
            
            motivational_mapping.append({
                "type": "progress",
                "description": "–î–≤—É—Ö–Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–≤–∏–¥–µ–æ",
                "archetype": archetype,
                "progress_number": progress_num,
                "original_path": video["file_path"],
                "original_name": video["file_name"],
                "new_name": new_name,
                "size_mb": video["size_mb"],
                "target_path": f"/Volumes/Z9/AI_FITNESS_COACH_VIDEOS/progress/{new_name}",
                "cloudflare_url": f"https://ai-fitness-media.r2.cloudflarestorage.com/videos/progress/{new_name}"
            })
            
            long_index += 1
    
    # 4. –§–∏–Ω–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ (3 –≤–∏–¥–µ–æ)
    for archetype in archetypes:
        video = long_videos[long_index % len(long_videos)]
        
        new_name = f"final_{archetype}.mp4"
        
        motivational_mapping.append({
            "type": "final",
            "description": "–§–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –∫—É—Ä—Å–∞",
            "archetype": archetype,
            "original_path": video["file_path"],
            "original_name": video["file_name"],
            "new_name": new_name,
            "size_mb": video["size_mb"],
            "target_path": f"/Volumes/Z9/AI_FITNESS_COACH_VIDEOS/final/{new_name}",
            "cloudflare_url": f"https://ai-fitness-media.r2.cloudflarestorage.com/videos/final/{new_name}"
        })
        
        long_index += 1
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è {len(motivational_mapping)} –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ —Ç–∏–ø–∞–º
    type_counts = {}
    for item in motivational_mapping:
        video_type = item["type"]
        type_counts[video_type] = type_counts.get(video_type, 0) + 1
    
    print(f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ:")
    for video_type, count in type_counts.items():
        print(f"  {video_type}: {count}")
    
    return motivational_mapping

def copy_all_616_videos(exercise_mapping, motivational_mapping):
    """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö 616 –≤–∏–¥–µ–æ"""
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
    folders = ["exercises", "motivation", "weekly", "progress", "final"]
    for folder in folders:
        folder_path = f"/Volumes/Z9/AI_FITNESS_COACH_VIDEOS/{folder}"
        os.makedirs(folder_path, exist_ok=True)
    
    all_videos = exercise_mapping + motivational_mapping
    total_files = len(all_videos)
    
    print(f"\nüöÄ –ö–æ–ø–∏—Ä—É–µ–º {total_files} –≤–∏–¥–µ–æ...")
    print(f"  üí™ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {len(exercise_mapping)}")
    print(f"  üé¨ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ: {len(motivational_mapping)}")
    
    copied_count = 0
    error_count = 0
    start_time = datetime.now()
    
    for i, video in enumerate(all_videos):
        try:
            source = video["original_path"]
            target = video["target_path"]
            
            if not os.path.exists(source):
                print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {source}")
                error_count += 1
                continue
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
            shutil.copy2(source, target)
            copied_count += 1
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 25 —Ñ–∞–π–ª–æ–≤
            if (i + 1) % 25 == 0 or (i + 1) == total_files:
                progress = (i + 1) / total_files * 100
                elapsed = datetime.now() - start_time
                eta = elapsed * (total_files / (i + 1)) - elapsed
                
                print(f"  üì¶ –ü—Ä–æ–≥—Ä–µ—Å—Å: {i+1}/{total_files} ({progress:.1f}%) | "
                      f"‚úÖ {copied_count} | ‚ùå {error_count} | ETA: {eta}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {video['original_name']} - {e}")
            error_count += 1
    
    total_time = datetime.now() - start_time
    
    print(f"\nüéâ –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {total_time}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {copied_count}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {error_count}")
    print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {copied_count/(copied_count+error_count)*100:.1f}%")
    
    return copied_count, error_count

def save_616_config(exercise_mapping, motivational_mapping):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è 616 –≤–∏–¥–µ–æ"""
    
    total_videos = len(exercise_mapping) + len(motivational_mapping)
    
    config = {
        "system_info": {
            "version": "616 Video System",
            "created": datetime.now().isoformat(),
            "total_videos": total_videos,
            "exercise_videos": len(exercise_mapping),
            "motivational_videos": len(motivational_mapping)
        },
        "video_structure": {
            "exercises": {
                "count": len(exercise_mapping),
                "categories": {
                    "warmup": 42,
                    "main": 145,
                    "sexual_endurance": 42,
                    "relaxation": 42
                }
            },
            "motivational": {
                "count": len(motivational_mapping),
                "types": {
                    "intro": 63,
                    "warmup_motivation": 63,
                    "main_motivation": 63,
                    "trainer_speech": 63,
                    "closing": 63,
                    "weekly": 18,
                    "progress": 9,
                    "final": 3
                }
            }
        },
        "exercises_by_category": {},
        "motivational_by_type": {},
        "cloudflare_base": "https://ai-fitness-media.r2.cloudflarestorage.com/videos/"
    }
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for video in exercise_mapping:
        category = video["category"]
        if category not in config["exercises_by_category"]:
            config["exercises_by_category"][category] = []
        config["exercises_by_category"][category].append(video)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø–∞–º
    for video in motivational_mapping:
        video_type = video["type"]
        if video_type not in config["motivational_by_type"]:
            config["motivational_by_type"][video_type] = []
        config["motivational_by_type"][video_type].append(video)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_file = '/Users/alexbel/Desktop/AI Fitness Coach/media_lists/SYSTEM_616_VIDEOS.json'
    with open(config_file, 'w', encoding='utf-8') as f:
        json.dump(config, f, ensure_ascii=False, indent=2)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º CSV
    exercise_df = pd.DataFrame(exercise_mapping)
    exercise_csv = '/Users/alexbel/Desktop/AI Fitness Coach/media_lists/EXERCISES_271_VIDEOS.csv'
    exercise_df.to_csv(exercise_csv, index=False, encoding='utf-8')
    
    motivational_df = pd.DataFrame(motivational_mapping)
    motivational_csv = '/Users/alexbel/Desktop/AI Fitness Coach/media_lists/MOTIVATIONAL_345_VIDEOS.csv'
    motivational_df.to_csv(motivational_csv, index=False, encoding='utf-8')
    
    print(f"\nüíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:")
    print(f"  üîß {config_file}")
    print(f"  üí™ {exercise_csv}")
    print(f"  üé¨ {motivational_csv}")
    
    return config

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üéØ –¢–û–ß–ù–û 616 –í–ò–î–ï–û –¥–ª—è AI FITNESS COACH")
    print("=" * 50)
    print("üí™ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: 271 –≤–∏–¥–µ–æ (42+145+42+42)")
    print("üé¨ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ: 345 –≤–∏–¥–µ–æ (315 –∫–æ—Ä–æ—Ç–∫–∏—Ö + 30 –¥–ª–∏–Ω–Ω—ã—Ö)")
    print("üéØ –ò–¢–û–ì–û: 616 –≤–∏–¥–µ–æ")
    print()
    
    # 1. –°–æ–±–∏—Ä–∞–µ–º –≤–∏–¥–µ–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    print("üìÇ –®–∞–≥ 1: –°–±–æ—Ä 271 –≤–∏–¥–µ–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...")
    exercise_videos = collect_exercise_videos()
    
    # 2. –°–æ–±–∏—Ä–∞–µ–º –≤–∏–¥–µ–æ —Ç—Ä–µ–Ω–µ—Ä–æ–≤
    print("\nüé¨ –®–∞–≥ 2: –°–±–æ—Ä –≤–∏–¥–µ–æ —Ç—Ä–µ–Ω–µ—Ä–æ–≤...")
    trainer_videos = collect_trainer_videos()
    
    # 3. –°–æ–±–∏—Ä–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
    print("\nüìπ –®–∞–≥ 3: –°–±–æ—Ä –¥–ª–∏–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ...")
    long_videos = collect_long_videos()
    
    # 4. –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    print("\nüí™ –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ 271 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è...")
    exercise_mapping = create_exercise_mapping(exercise_videos)
    
    # 5. –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö
    print("\nüé¨ –®–∞–≥ 5: –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ 345 –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö...")
    motivational_mapping = create_motivational_mapping(trainer_videos, long_videos)
    
    # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print("\nüíæ –®–∞–≥ 6: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    config = save_616_config(exercise_mapping, motivational_mapping)
    
    # 7. –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    print("\nüìÅ –®–∞–≥ 7: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ 616 —Ñ–∞–π–ª–æ–≤...")
    copied, errors = copy_all_616_videos(exercise_mapping, motivational_mapping)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_size_gb = sum(v["size_mb"] for v in exercise_mapping + motivational_mapping) / 1024
    
    print(f"\nüéâ –°–ò–°–¢–ï–ú–ê 616 –í–ò–î–ï–û –ì–û–¢–û–í–ê!")
    print(f"üìä –°–æ–∑–¥–∞–Ω–æ:")
    print(f"  üí™ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {len(exercise_mapping)}")
    print(f"  üé¨ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ: {len(motivational_mapping)}")
    print(f"  üéØ –í–°–ï–ì–û: {len(exercise_mapping) + len(motivational_mapping)}")
    print(f"")
    print(f"üíæ –†–∞–∑–º–µ—Ä: ~{total_size_gb:.1f} GB")
    print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {copied}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {errors}")
    print(f"")
    print(f"üîó –ì–æ—Ç–æ–≤–æ –¥–ª—è Cloudflare R2!")
    print(f"ü§ñ –ì–æ—Ç–æ–≤–æ –¥–ª—è ChatGPT!")

if __name__ == '__main__':
    main()