#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ –¥–ª—è –æ—Ç–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç ffprobe –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ
"""

import subprocess
import json
import os
import csv
from pathlib import Path

def get_video_duration(video_path):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –∏—Å–ø–æ–ª—å–∑—É—è ffprobe"""
    try:
        cmd = [
            'ffprobe', 
            '-v', 'quiet',
            '-print_format', 'json',
            '-show_format',
            video_path
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        if result.returncode == 0:
            data = json.loads(result.stdout)
            duration = float(data['format']['duration'])
            return duration
        else:
            return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {video_path}: {e}")
        return None

def categorize_by_duration(duration):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    if duration is None:
        return "unknown"
    elif duration <= 20:
        return "reminder"  # 10-20 —Å–µ–∫ - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    elif duration <= 40:
        return "instruction"  # 20-40 —Å–µ–∫ - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏  
    elif duration <= 60:
        return "technique"  # 30-60 —Å–µ–∫ - —Ç–µ—Ö–Ω–∏–∫–∞
    elif duration <= 300:  # 5 –º–∏–Ω—É—Ç
        return "weekly"  # 2-5 –º–∏–Ω - –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ
    else:
        return "final"  # 3-7+ –º–∏–Ω - —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ

def analyze_trainer_videos(trainer_path, trainer_name):
    """–ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞"""
    
    print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {trainer_name}...")
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ mp4 —Ñ–∞–π–ª—ã
    video_files = []
    for root, dirs, files in os.walk(trainer_path):
        for file in files:
            if file.lower().endswith('.mp4'):
                video_files.append(os.path.join(root, file))
    
    analysis_results = []
    categories = {
        "reminder": [],
        "instruction": [],
        "technique": [],
        "weekly": [],
        "final": [],
        "unknown": []
    }
    
    total_files = len(video_files)
    processed = 0
    
    for video_path in video_files:
        duration = get_video_duration(video_path)
        category = categorize_by_duration(duration)
        
        file_info = {
            "file_path": video_path,
            "file_name": os.path.basename(video_path),
            "duration_seconds": duration,
            "duration_formatted": f"{int(duration//60)}:{int(duration%60):02d}" if duration else "unknown",
            "category": category,
            "file_size": os.path.getsize(video_path) if os.path.exists(video_path) else 0
        }
        
        analysis_results.append(file_info)
        categories[category].append(file_info)
        
        processed += 1
        if processed % 50 == 0:
            print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}/{total_files}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = {
        "trainer": trainer_name,
        "total_videos": total_files,
        "categories": {cat: len(videos) for cat, videos in categories.items()},
        "avg_duration": sum(r['duration_seconds'] for r in analysis_results if r['duration_seconds']) / len([r for r in analysis_results if r['duration_seconds']]),
        "total_duration": sum(r['duration_seconds'] for r in analysis_results if r['duration_seconds'])
    }
    
    print(f"‚úÖ {trainer_name} - –Ω–∞–π–¥–µ–Ω–æ {total_files} –≤–∏–¥–µ–æ:")
    for cat, count in stats['categories'].items():
        print(f"  {cat}: {count}")
    
    return {
        "stats": stats,
        "videos": analysis_results,
        "categories": categories
    }

def analyze_all_trainers():
    """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤"""
    
    trainers = {
        "trainer_1": "/Volumes/Z9/–º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è ai fitnes/trainer 1",
        "trainer_2": "/Volumes/Z9/–º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è ai fitnes/trainer 2", 
        "trainer_3": "/Volumes/Z9/–º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è ai fitnes/trainer 3",
        "long_videos": "/Volumes/Z9/–º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è ai fitnes/long and weekly videos"
    }
    
    all_results = {}
    
    for trainer_id, trainer_path in trainers.items():
        if os.path.exists(trainer_path):
            result = analyze_trainer_videos(trainer_path, trainer_id)
            all_results[trainer_id] = result
        else:
            print(f"‚ùå –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {trainer_path}")
    
    return all_results

def create_selection_plan(analysis_results):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –æ—Ç–±–æ—Ä–∞ –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
    
    # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
    requirements = {
        "technique": 144,      # 144 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è √ó 1 —Ç–µ—Ö–Ω–∏–∫–∞
        "instruction": 432,    # 144 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è √ó 3 –∞—Ä—Ö–µ—Ç–∏–ø–∞  
        "reminder": 432,       # 144 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è √ó 3 –∞—Ä—Ö–µ—Ç–∏–ø–∞
        "weekly": 24,          # 3 –∞—Ä—Ö–µ—Ç–∏–ø–∞ √ó 8 –Ω–µ–¥–µ–ª—å
        "final": 3             # 3 –∞—Ä—Ö–µ—Ç–∏–ø–∞
    }
    
    # –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    available = {}
    for category in requirements.keys():
        available[category] = []
        for trainer_id, result in analysis_results.items():
            available[category].extend(result['categories'][category])
    
    selection_plan = {}
    
    for category, needed in requirements.items():
        available_count = len(available[category])
        
        if available_count >= needed:
            # –û—Ç–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ –≤–∏–¥–µ–æ
            videos = available[category]
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–±–ª–∏–∂–µ –∫ —Ü–µ–ª–µ–≤–æ–π)
            target_durations = {
                "technique": 45,    # 30-60 —Å–µ–∫, —Ü–µ–ª—å 45
                "instruction": 30,  # 20-40 —Å–µ–∫, —Ü–µ–ª—å 30
                "reminder": 15,     # 10-20 —Å–µ–∫, —Ü–µ–ª—å 15
                "weekly": 180,      # 2-5 –º–∏–Ω, —Ü–µ–ª—å 3 –º–∏–Ω
                "final": 300        # 3-7 –º–∏–Ω, —Ü–µ–ª—å 5 –º–∏–Ω
            }
            
            target = target_durations[category]
            videos.sort(key=lambda x: abs(x['duration_seconds'] - target) if x['duration_seconds'] else float('inf'))
            
            selected = videos[:needed]
            selection_plan[category] = {
                "needed": needed,
                "available": available_count,
                "selected": selected,
                "status": "sufficient"
            }
        else:
            selection_plan[category] = {
                "needed": needed,
                "available": available_count,
                "selected": available[category],  # –ë–µ—Ä–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
                "status": "insufficient"
            }
    
    return selection_plan

def save_analysis_results(analysis_results, selection_plan):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    output_file = '/Users/alexbel/Desktop/AI Fitness Coach/media_lists/VIDEO_DURATION_ANALYSIS.json'
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump({
            "analysis_results": analysis_results,
            "selection_plan": selection_plan
        }, f, ensure_ascii=False, indent=2)
    
    # –°–æ–∑–¥–∞–µ–º CSV –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    csv_file = '/Users/alexbel/Desktop/AI Fitness Coach/media_lists/VIDEO_SELECTION_LIST.csv'
    with open(csv_file, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(['Category', 'Original_Path', 'File_Name', 'Duration_Seconds', 'Duration_Formatted', 'New_Name_Pattern', 'Target_Folder'])
        
        for category, plan in selection_plan.items():
            for i, video in enumerate(plan['selected']):
                new_name_pattern = generate_new_name_pattern(category, i)
                target_folder = f"/Volumes/Z9/AI_FITNESS_COACH_VIDEOS/{get_target_folder(category)}"
                
                writer.writerow([
                    category,
                    video['file_path'],
                    video['file_name'],
                    video['duration_seconds'],
                    video['duration_formatted'],
                    new_name_pattern,
                    target_folder
                ])
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    create_selection_report(analysis_results, selection_plan)
    
    print(f"üíæ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
    print(f"üìä CSV —Å–ø–∏—Å–æ–∫: {csv_file}")

def generate_new_name_pattern(category, index):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏"""
    
    patterns = {
        "technique": f"exercise_{index+1:03d}_technique_mod1.mp4",
        "instruction": f"exercise_{(index//3)+1:03d}_instruction_arch{(index%3)+1}_mod1.mp4",
        "reminder": f"exercise_{(index//3)+1:03d}_reminder_arch{(index%3)+1}_{(index%3)+1}.mp4",
        "weekly": f"weekly_arch{(index//8)+1}_week{(index%8)+1}.mp4",
        "final": f"final_arch{index+1}.mp4"
    }
    
    return patterns.get(category, f"{category}_{index+1}.mp4")

def get_target_folder(category):
    """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    
    folders = {
        "technique": "exercises",
        "instruction": "instructions", 
        "reminder": "reminders",
        "weekly": "weekly",
        "final": "final"
    }
    
    return folders.get(category, "other")

def create_selection_report(analysis_results, selection_plan):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—Ç–±–æ—Ä—É"""
    
    report = f"""# –û—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∏ –æ—Ç–±–æ—Ä—É –≤–∏–¥–µ–æ

## üìä –ê–Ω–∞–ª–∏–∑ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ

### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç—Ä–µ–Ω–µ—Ä–∞–º:
"""
    
    for trainer_id, result in analysis_results.items():
        stats = result['stats']
        report += f"""
#### {trainer_id}:
- –í—Å–µ–≥–æ –≤–∏–¥–µ–æ: {stats['total_videos']}
- –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats['avg_duration']:.1f} —Å–µ–∫
- –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats['total_duration']:.0f} —Å–µ–∫ ({stats['total_duration']/3600:.1f} —á–∞—Å–æ–≤)

–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:
"""
        for cat, count in stats['categories'].items():
            report += f"- {cat}: {count} –≤–∏–¥–µ–æ\n"
    
    report += f"""
## üéØ –ü–ª–∞–Ω –æ—Ç–±–æ—Ä–∞ –≤–∏–¥–µ–æ

"""
    
    for category, plan in selection_plan.items():
        status_emoji = "‚úÖ" if plan['status'] == 'sufficient' else "‚ö†Ô∏è"
        report += f"""
### {status_emoji} {category.title()}
- –¢—Ä–µ–±—É–µ—Ç—Å—è: {plan['needed']} –≤–∏–¥–µ–æ
- –î–æ—Å—Ç—É–ø–Ω–æ: {plan['available']} –≤–∏–¥–µ–æ
- –û—Ç–æ–±—Ä–∞–Ω–æ: {len(plan['selected'])} –≤–∏–¥–µ–æ
- –°—Ç–∞—Ç—É—Å: {plan['status']}
"""
    
    report += f"""
## üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

1. **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ffprobe** - —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
2. **–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–±–æ—Ä** - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CSV —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
3. **–°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É** - —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏
4. **–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å** - –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–æ–≤—ã–µ –∏–º–µ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–∏—Å—Ç–µ–º–µ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
5. **–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ Cloudflare** - –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏

## ‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è

–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –¥–ª—è:
- –ú–∞—Å—Å–æ–≤–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è  
- –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
- –°–æ–∑–¥–∞–Ω–∏—è JSON-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""
    
    report_file = '/Users/alexbel/Desktop/AI Fitness Coach/media_lists/VIDEO_SELECTION_REPORT.md'
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write(report)
    
    print(f"üìã –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report_file}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üé¨ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ffprobe
    try:
        subprocess.run(['ffprobe', '-version'], capture_output=True, check=True)
        print("‚úÖ ffprobe –Ω–∞–π–¥–µ–Ω")
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå ffprobe –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg/ffprobe –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print("–î–ª—è macOS: brew install ffmpeg")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –≤–∏–¥–µ–æ
    analysis_results = analyze_all_trainers()
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –æ—Ç–±–æ—Ä–∞
    selection_plan = create_selection_plan(analysis_results)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    save_analysis_results(analysis_results, selection_plan)
    
    print("\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã:")
    print("  - VIDEO_DURATION_ANALYSIS.json")
    print("  - VIDEO_SELECTION_LIST.csv") 
    print("  - VIDEO_SELECTION_REPORT.md")

if __name__ == '__main__':
    main()