#!/usr/bin/env python3
"""
–û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ exercises –Ω–∞ Cloudflare R2
"""

import boto3
import pandas as pd
from collections import defaultdict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ R2
s3 = boto3.client('s3',
    endpoint_url='https://92568f8b8a15c68a9ece5fe08c66485b.r2.cloudflarestorage.com',
    aws_access_key_id='3a9fd5a6b38ec994e057e33c1096874e',
    aws_secret_access_key='0817f9a3154b63b1968620a966e05e36f80fca0308ba91d9c8bf65e8622baa13'
)

bucket_name = 'ai-fitness-media'

print("üîç –ü–û–ò–°–ö –î–£–ë–õ–ò–ö–ê–¢–û–í –í EXERCISES")
print("=" * 50)

# 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ CSV
print("\nüìã –ó–∞–≥—Ä—É–∂–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫...")
df = pd.read_csv('/Users/alexbel/Desktop/AI Fitness Coach/media_lists/EXERCISES_271_VIDEOS.csv')
correct_files = set()
for _, row in df.iterrows():
    correct_files.add(f"videos/exercises/{row['new_name']}")

print(f"‚úÖ –≠—Ç–∞–ª–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(correct_files)}")

# 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ R2
print("\nüåê –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ R2...")
paginator = s3.get_paginator('list_objects_v2')
pages = paginator.paginate(Bucket=bucket_name, Prefix='videos/exercises/')

all_exercise_files = []
for page in pages:
    if 'Contents' in page:
        for obj in page['Contents']:
            all_exercise_files.append(obj['Key'])

print(f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ exercises: {len(all_exercise_files)}")

# 3. –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
duplicates = []
correct_count = 0

for file_key in all_exercise_files:
    if file_key in correct_files:
        correct_count += 1
    else:
        duplicates.append(file_key)

print(f"\nüìä –ê–ù–ê–õ–ò–ó:")
print(f"  ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {correct_count}")
print(f"  ‚ùå –î—É–±–ª–∏–∫–∞—Ç–æ–≤/–ª–∏—à–Ω–∏—Ö: {len(duplicates)}")

if duplicates:
    print(f"\nüóëÔ∏è –§–ê–ô–õ–´ –ö –£–î–ê–õ–ï–ù–ò–Æ ({len(duplicates)}):")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É
    by_type = defaultdict(list)
    for dup in duplicates:
        filename = dup.split('/')[-1]
        if filename.startswith('warmup'):
            by_type['warmup'].append(dup)
        elif filename.startswith('main'):
            by_type['main'].append(dup)
        elif filename.startswith('endurance') or filename.startswith('sexual'):
            by_type['endurance/sexual'].append(dup)
        elif filename.startswith('relaxation'):
            by_type['relaxation'].append(dup)
        else:
            by_type['other'].append(dup)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    for file_type, files in by_type.items():
        if files:
            print(f"\n  {file_type}: {len(files)} —Ñ–∞–π–ª–æ–≤")
            for f in files[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"    - {f.split('/')[-1]}")
            if len(files) > 3:
                print(f"    ... –∏ –µ—â–µ {len(files) - 3}")
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print("\n" + "=" * 50)
    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —ç—Ç–∞–ª–æ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ.")
    print("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!")
    
    response = input("\nüîÑ –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã? (yes/no): ")
    
    if response.lower() == 'yes':
        print("\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...")
        deleted_count = 0
        error_count = 0
        
        for i, file_key in enumerate(duplicates, 1):
            try:
                s3.delete_object(Bucket=bucket_name, Key=file_key)
                deleted_count += 1
                if i % 10 == 0:
                    print(f"  –£–¥–∞–ª–µ–Ω–æ: {deleted_count}/{len(duplicates)}")
            except Exception as e:
                error_count += 1
                print(f"  ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file_key}: {e}")
        
        print(f"\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"  –£–¥–∞–ª–µ–Ω–æ: {deleted_count} —Ñ–∞–π–ª–æ–≤")
        if error_count:
            print(f"  –û—à–∏–±–æ–∫: {error_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏...")
        pages = paginator.paginate(Bucket=bucket_name, Prefix='videos/exercises/')
        final_count = sum(len(page.get('Contents', [])) for page in pages)
        
        print(f"üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"  –ë—ã–ª–æ: {len(all_exercise_files)} —Ñ–∞–π–ª–æ–≤")
        print(f"  –°—Ç–∞–ª–æ: {final_count} —Ñ–∞–π–ª–æ–≤")
        print(f"  –î–æ–ª–∂–Ω–æ –±—ã—Ç—å: 271 —Ñ–∞–π–ª–æ–≤")
        
        if final_count == 271:
            print("\nüéâ –£–°–ü–ï–•! –ü–∞–ø–∫–∞ exercises —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–æ–≤–Ω–æ 271 —Ñ–∞–π–ª!")
        else:
            print(f"\n‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {final_count} –≤–º–µ—Å—Ç–æ 271")
    else:
        print("\n‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
else:
    print("\n‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")