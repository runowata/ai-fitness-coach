#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ Cloudflare R2
"""

import boto3
import pandas as pd
import os
import time
from concurrent.futures import ThreadPoolExecutor, as_completed
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
config = {
    'access_key': '3a9fd5a6b38ec994e057e33c1096874e',
    'secret_key': '0817f9a3154b63b1968620a966e05e36f80fca0308ba91d9c8bf65e8622baa13',
    'endpoint': 'https://92568f8b8a15c68a9ece5fe08c66485b.r2.cloudflarestorage.com',
    'bucket': 'ai-fitness-media'
}

def create_s3_client():
    return boto3.client(
        's3',
        endpoint_url=config['endpoint'],
        aws_access_key_id=config['access_key'],
        aws_secret_access_key=config['secret_key']
    )

def upload_single_file(file_info, progress_counter):
    try:
        s3_client = create_s3_client()
        local_path = file_info['local_path']
        s3_key = file_info['s3_key']
        
        if not os.path.exists(local_path):
            return {'status': 'error', 'file': s3_key, 'error': 'File not found'}
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º
        s3_client.upload_file(
            local_path,
            config['bucket'],
            s3_key,
            ExtraArgs={'ContentType': 'video/mp4'}
        )
        
        progress_counter[0] += 1
        return {'status': 'success', 'file': s3_key}
        
    except Exception as e:
        return {'status': 'error', 'file': s3_key, 'error': str(e)}

def get_upload_list():
    files_to_upload = []
    
    # Exercises
    try:
        df = pd.read_csv('/Users/alexbel/Desktop/AI Fitness Coach/media_lists/EXERCISES_271_VIDEOS.csv')
        for _, row in df.iterrows():
            files_to_upload.append({
                'local_path': row['target_path'],
                's3_key': f"videos/exercises/{row['new_name']}"
            })
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ exercises CSV: {e}")
    
    # Motivational
    try:
        df = pd.read_csv('/Users/alexbel/Desktop/AI Fitness Coach/media_lists/MOTIVATIONAL_345_VIDEOS.csv')
        for _, row in df.iterrows():
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –ø—É—Ç–∏
            if '/motivation/' in row['target_path']:
                category = 'motivation'
            elif '/weekly/' in row['target_path']:
                category = 'weekly'
            elif '/progress/' in row['target_path']:
                category = 'progress'
            elif '/final/' in row['target_path']:
                category = 'final'
            else:
                category = 'motivation'
            
            files_to_upload.append({
                'local_path': row['target_path'],
                's3_key': f"videos/{category}/{row['new_name']}"
            })
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ motivational CSV: {e}")
    
    return files_to_upload

def main():
    print("üöÄ –ë–´–°–¢–†–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ù–ê CLOUDFLARE R2")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    files_to_upload = get_upload_list()
    total_files = len(files_to_upload)
    print(f"üìä –§–∞–π–ª–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ: {total_files}")
    
    if total_files == 0:
        print("‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
        return
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å-—Å—á–µ—Ç—á–∏–∫
    progress_counter = [0]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏–∑–º–µ–Ω—è–µ–º–æ—Å—Ç–∏
    start_time = time.time()
    
    print(f"\nüîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º {total_files} —Ñ–∞–π–ª–æ–≤...")
    print("–ü—Ä–æ–≥—Ä–µ—Å—Å:")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    with ThreadPoolExecutor(max_workers=5) as executor:
        futures = {
            executor.submit(upload_single_file, file_info, progress_counter): file_info
            for file_info in files_to_upload
        }
        
        results = {'success': 0, 'error': 0, 'errors': []}
        
        for future in as_completed(futures):
            result = future.result()
            
            if result['status'] == 'success':
                results['success'] += 1
                print(f"‚úÖ {results['success']:3d}/{total_files}: {result['file']}")
            else:
                results['error'] += 1
                results['errors'].append(result)
                print(f"‚ùå {results['error']:3d}: {result['file']} - {result['error']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Ñ–∞–π–ª–æ–≤
            if (results['success'] + results['error']) % 10 == 0:
                elapsed = time.time() - start_time
                rate = (results['success'] + results['error']) / elapsed * 60
                print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {results['success'] + results['error']}/{total_files} ({rate:.1f} —Ñ–∞–π–ª–æ–≤/–º–∏–Ω)")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    elapsed = time.time() - start_time
    print("\n" + "=" * 50)
    print("üéâ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {results['success']}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {results['error']}")
    print(f"‚è±Ô∏è –í—Ä–µ–º—è: {elapsed/60:.1f} –º–∏–Ω—É—Ç")
    print(f"üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {results['success']/(elapsed/60):.1f} —Ñ–∞–π–ª–æ–≤/–º–∏–Ω")
    
    if results['errors']:
        print(f"\n‚ùå –ü–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫:")
        for error in results['errors'][:5]:
            print(f"  {error['file']}: {error['error']}")

if __name__ == '__main__':
    main()