#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –∏–∑ –ø–∞–ø–∫–∏ exercises –±–µ–∑ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import os
import json
import pandas as pd

def get_file_size_mb(file_path):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö"""
    try:
        return os.path.getsize(file_path) / (1024 * 1024)
    except:
        return 0

def is_suitable_for_exercise(size_mb):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –≤–∏–¥–µ–æ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (1-5 –º–∏–Ω—É—Ç)"""
    return 5 <= size_mb <= 50

def quick_analysis():
    """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    exercise_folder = "/Volumes/Z9/–º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è ai fitnes/exercises"
    
    print(f"üîç –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞–ø–∫–∏ exercises...")
    
    suitable_videos = []
    total_scanned = 0
    total_size_gb = 0
    
    for root, dirs, files in os.walk(exercise_folder):
        for file in files:
            if file.lower().endswith('.mp4'):
                file_path = os.path.join(root, file)
                size_mb = get_file_size_mb(file_path)
                total_scanned += 1
                total_size_gb += size_mb / 1024
                
                if is_suitable_for_exercise(size_mb):
                    rel_path = os.path.relpath(root, exercise_folder)
                    
                    suitable_videos.append({
                        "file_path": file_path,
                        "file_name": file,
                        "folder": rel_path if rel_path != "." else "root",
                        "size_mb": round(size_mb, 2)
                    })
                
                if total_scanned % 200 == 0:
                    print(f"  –ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {total_scanned}, –Ω–∞–π–¥–µ–Ω–æ: {len(suitable_videos)}")
    
    print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:")
    print(f"  üìä –í—Å–µ–≥–æ –≤–∏–¥–µ–æ: {total_scanned}")
    print(f"  üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size_gb:.1f} GB")
    print(f"  üéØ –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö (1-5 –º–∏–Ω): {len(suitable_videos)}")
    print(f"  üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö: {len(suitable_videos)/total_scanned*100:.1f}%")
    
    if len(suitable_videos) >= 144:
        print(f"  ‚úÖ –î–û–°–¢–ê–¢–û–ß–ù–û –¥–ª—è –≤—Å–µ—Ö 144 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π!")
        surplus = len(suitable_videos) - 144
        print(f"  üìà –ó–∞–ø–∞—Å: {surplus} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ")
    else:
        shortage = 144 - len(suitable_videos)
        print(f"  ‚ö†Ô∏è –ù–ï–î–û–°–¢–ê–¢–û–ö: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {shortage} –≤–∏–¥–µ–æ")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    result = {
        "analysis_summary": {
            "total_videos": total_scanned,
            "total_size_gb": round(total_size_gb, 1),
            "suitable_videos": len(suitable_videos),
            "suitable_percentage": round(len(suitable_videos)/total_scanned*100, 1),
            "enough_for_144": len(suitable_videos) >= 144,
            "surplus_or_shortage": len(suitable_videos) - 144
        },
        "suitable_videos": suitable_videos[:200]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 200 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    }
    
    output_file = '/Users/alexbel/Desktop/AI Fitness Coach/media_lists/QUICK_VIDEO_ANALYSIS.json'
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(result, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
    print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∏–¥–µ–æ:")
    for i, video in enumerate(suitable_videos[:10]):
        print(f"  {i+1}. {video['file_name']} ({video['size_mb']} MB) - {video['folder']}")
    
    return result

if __name__ == '__main__':
    quick_analysis()