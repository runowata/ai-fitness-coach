#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –æ—Ç–±–æ—Ä—â–∏–∫ –≤–∏–¥–µ–æ –¥–ª—è AI Fitness Coach
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∫–∞–∫ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import os
import shutil
import json
import pandas as pd
from pathlib import Path

def get_file_size_mb(file_path):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö"""
    try:
        return os.path.getsize(file_path) / (1024 * 1024)
    except:
        return 0

def categorize_by_file_size(size_mb):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)"""
    if size_mb < 5:
        return "reminder"    # –ú–∞–ª–µ–Ω—å–∫–∏–µ —Ñ–∞–π–ª—ã - –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ
    elif size_mb < 15:
        return "instruction" # –°—Ä–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    elif size_mb < 30:
        return "technique"   # –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã - —Ç–µ—Ö–Ω–∏–∫–∞
    elif size_mb < 100:
        return "weekly"      # –û—á–µ–Ω—å –±–æ–ª—å—à–∏–µ - –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ
    else:
        return "final"       # –û–≥—Ä–æ–º–Ω—ã–µ - —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ

def analyze_videos_by_size():
    """–ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–æ–≤"""
    
    trainers = {
        "trainer_1": {
            "path": "/Volumes/Z9/–º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è ai fitnes/trainer 1",
            "archetype": "bro",
            "model": "mod1"
        },
        "trainer_2": {
            "path": "/Volumes/Z9/–º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è ai fitnes/trainer 2",
            "archetype": "sergeant", 
            "model": "mod2"
        },
        "trainer_3": {
            "path": "/Volumes/Z9/–º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è ai fitnes/trainer 3",
            "archetype": "intellectual",
            "model": "mod3"
        },
        "long_videos": {
            "path": "/Volumes/Z9/–º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è ai fitnes/long and weekly videos",
            "archetype": "mixed",
            "model": "various"
        }
    }
    
    analysis = {}
    
    for trainer_id, info in trainers.items():
        print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {trainer_id}...")
        
        videos = []
        trainer_path = info["path"]
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ mp4 —Ñ–∞–π–ª—ã
        for root, dirs, files in os.walk(trainer_path):
            for file in files:
                if file.lower().endswith('.mp4'):
                    file_path = os.path.join(root, file)
                    size_mb = get_file_size_mb(file_path)
                    category = categorize_by_file_size(size_mb)
                    
                    videos.append({
                        "file_path": file_path,
                        "file_name": file,
                        "size_mb": round(size_mb, 2),
                        "category": category,
                        "trainer": trainer_id,
                        "archetype": info["archetype"],
                        "model": info["model"]
                    })
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for video in videos:
            cat = video["category"]
            if cat not in categories:
                categories[cat] = []
            categories[cat].append(video)
        
        analysis[trainer_id] = {
            "info": info,
            "videos": videos,
            "categories": categories,
            "total_count": len(videos),
            "total_size_gb": sum(v["size_mb"] for v in videos) / 1024
        }
        
        print(f"  –ù–∞–π–¥–µ–Ω–æ {len(videos)} –≤–∏–¥–µ–æ, {analysis[trainer_id]['total_size_gb']:.1f} GB")
        for cat, vids in categories.items():
            print(f"    {cat}: {len(vids)} –≤–∏–¥–µ–æ")
    
    return analysis

def select_videos_for_phase1(analysis):
    """–û—Ç–±–æ—Ä –≤–∏–¥–µ–æ –¥–ª—è –§–∞–∑—ã 1 - –±–∞–∑–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ –Ω–æ–≤–æ–π –±–∞–∑—ã
    excel_file = '/Users/alexbel/Desktop/AI Fitness Coach/media_lists/MODERN_EXERCISES_DATABASE_2025.xlsx'
    
    try:
        df = pd.read_excel(excel_file, sheet_name='All_Modern_Exercises')
        exercises = df.to_dict('records')
        print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(exercises)} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {e}")
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
        exercises = [{"slug": f"exercise_{i+1:03d}", "name_en": f"Exercise {i+1}"} for i in range(144)]
    
    # –û—Ç–±–∏—Ä–∞–µ–º –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏ (trainer_1, –∫–∞—Ç–µ–≥–æ—Ä–∏—è technique)
    technique_videos = []
    if "trainer_1" in analysis:
        available_technique = analysis["trainer_1"]["categories"].get("technique", [])
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏)
        available_technique.sort(key=lambda x: abs(x["size_mb"] - 20))  # –¶–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä ~20MB
        
        # –û—Ç–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        needed = min(len(exercises), len(available_technique))
        technique_videos = available_technique[:needed]
        
        print(f"‚úÖ –û—Ç–æ–±—Ä–∞–Ω–æ {len(technique_videos)} –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
    
    # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ -> –≤–∏–¥–µ–æ
    exercise_video_mapping = []
    for i, exercise in enumerate(exercises[:len(technique_videos)]):
        video = technique_videos[i]
        new_name = f"{exercise['slug']}_technique_mod1.mp4"
        
        exercise_video_mapping.append({
            "exercise_slug": exercise["slug"],
            "exercise_name": exercise.get("name_en", f"Exercise {i+1}"),
            "original_path": video["file_path"],
            "original_name": video["file_name"],
            "new_name": new_name,
            "size_mb": video["size_mb"],
            "target_path": f"/Volumes/Z9/AI_FITNESS_COACH_VIDEOS/exercises/{new_name}",
            "cloudflare_url": f"https://ai-fitness-media.r2.cloudflarestorage.com/videos/exercises/{new_name}"
        })
    
    return exercise_video_mapping

def copy_and_rename_phase1(mapping):
    """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è –§–∞–∑—ã 1"""
    
    print(f"üìÅ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ {len(mapping)} –≤–∏–¥–µ–æ...")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    target_dir = "/Volumes/Z9/AI_FITNESS_COACH_VIDEOS/exercises"
    os.makedirs(target_dir, exist_ok=True)
    
    success_count = 0
    error_count = 0
    
    for item in mapping:
        try:
            source = item["original_path"]
            target = item["target_path"]
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
            shutil.copy2(source, target)
            success_count += 1
            
            if success_count % 20 == 0:
                print(f"  –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {success_count}/{len(mapping)}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {item['original_name']}: {e}")
            error_count += 1
    
    print(f"‚úÖ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {success_count} —É—Å–ø–µ—à–Ω–æ, {error_count} –æ—à–∏–±–æ–∫")
    
    return success_count, error_count

def select_motivational_videos(analysis):
    """–û—Ç–±–æ—Ä –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ (–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ)"""
    
    motivational_mapping = []
    
    # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ (24 –≤–∏–¥–µ–æ: 3 –∞—Ä—Ö–µ—Ç–∏–ø–∞ √ó 8 –Ω–µ–¥–µ–ª—å)
    long_videos = analysis.get("long_videos", {}).get("categories", {})
    weekly_candidates = long_videos.get("weekly", []) + long_videos.get("final", [])
    
    if weekly_candidates:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ä–∞–∑–º–µ—Ä—ã)
        weekly_candidates.sort(key=lambda x: abs(x["size_mb"] - 50))  # –¶–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä ~50MB
        
        archetypes = ["bro", "sergeant", "intellectual"]
        
        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ
        video_index = 0
        for week in range(1, 9):  # 8 –Ω–µ–¥–µ–ª—å
            for archetype in archetypes:
                if video_index < len(weekly_candidates):
                    video = weekly_candidates[video_index]
                    new_name = f"weekly_{archetype}_week{week}.mp4"
                    
                    motivational_mapping.append({
                        "type": "weekly",
                        "archetype": archetype,
                        "week": week,
                        "original_path": video["file_path"],
                        "original_name": video["file_name"],
                        "new_name": new_name,
                        "size_mb": video["size_mb"],
                        "target_path": f"/Volumes/Z9/AI_FITNESS_COACH_VIDEOS/weekly/{new_name}",
                        "cloudflare_url": f"https://ai-fitness-media.r2.cloudflarestorage.com/videos/weekly/{new_name}"
                    })
                    video_index += 1
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ (3 –≤–∏–¥–µ–æ: –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ –∞—Ä—Ö–µ—Ç–∏–ø)
        for i, archetype in enumerate(archetypes):
            if video_index + i < len(weekly_candidates):
                video = weekly_candidates[video_index + i]
                new_name = f"final_{archetype}.mp4"
                
                motivational_mapping.append({
                    "type": "final",
                    "archetype": archetype,
                    "original_path": video["file_path"],
                    "original_name": video["file_name"], 
                    "new_name": new_name,
                    "size_mb": video["size_mb"],
                    "target_path": f"/Volumes/Z9/AI_FITNESS_COACH_VIDEOS/final/{new_name}",
                    "cloudflare_url": f"https://ai-fitness-media.r2.cloudflarestorage.com/videos/final/{new_name}"
                })
    
    print(f"üéØ –û—Ç–æ–±—Ä–∞–Ω–æ {len(motivational_mapping)} –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ")
    return motivational_mapping

def copy_motivational_videos(mapping):
    """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ"""
    
    print(f"üé¨ –ö–æ–ø–∏—Ä—É–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ...")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
    for folder in ["weekly", "final"]:
        os.makedirs(f"/Volumes/Z9/AI_FITNESS_COACH_VIDEOS/{folder}", exist_ok=True)
    
    success_count = 0
    error_count = 0
    
    for item in mapping:
        try:
            source = item["original_path"]
            target = item["target_path"]
            
            shutil.copy2(source, target)
            success_count += 1
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {item['original_name']}: {e}")
            error_count += 1
    
    print(f"‚úÖ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ: {success_count} —É—Å–ø–µ—à–Ω–æ, {error_count} –æ—à–∏–±–æ–∫")
    return success_count, error_count

def save_mapping_results(exercise_mapping, motivational_mapping):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞–ø–ø–∏–Ω–≥–∞"""
    
    # –ü–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = {
        "phase_1_exercises": exercise_mapping,
        "motivational_videos": motivational_mapping,
        "summary": {
            "total_exercise_videos": len(exercise_mapping),
            "total_motivational_videos": len(motivational_mapping),
            "total_videos": len(exercise_mapping) + len(motivational_mapping),
            "total_size_gb": sum(item["size_mb"] for item in exercise_mapping + motivational_mapping) / 1024
        }
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON
    json_file = '/Users/alexbel/Desktop/AI Fitness Coach/media_lists/VIDEO_MAPPING_PHASE1.json'
    with open(json_file, 'w', encoding='utf-8') as f:
        json.dump(result, f, ensure_ascii=False, indent=2)
    
    # –°–æ–∑–¥–∞–µ–º CSV –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    exercise_df = pd.DataFrame(exercise_mapping)
    exercise_csv = '/Users/alexbel/Desktop/AI Fitness Coach/media_lists/EXERCISE_VIDEOS_PHASE1.csv'
    exercise_df.to_csv(exercise_csv, index=False, encoding='utf-8')
    
    # –°–æ–∑–¥–∞–µ–º CSV –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö
    motivational_df = pd.DataFrame(motivational_mapping)
    motivational_csv = '/Users/alexbel/Desktop/AI Fitness Coach/media_lists/MOTIVATIONAL_VIDEOS.csv'
    motivational_df.to_csv(motivational_csv, index=False, encoding='utf-8')
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è ChatGPT
    chatgpt_config = create_chatgpt_config(exercise_mapping, motivational_mapping)
    config_file = '/Users/alexbel/Desktop/AI Fitness Coach/media_lists/CHATGPT_VIDEO_CONFIG.json'
    with open(config_file, 'w', encoding='utf-8') as f:
        json.dump(chatgpt_config, f, ensure_ascii=False, indent=2)
    
    print(f"üíæ –ú–∞–ø–ø–∏–Ω–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:")
    print(f"  üìÑ {json_file}")
    print(f"  üìä {exercise_csv}")
    print(f"  üé¨ {motivational_csv}")
    print(f"  ü§ñ {config_file}")
    
    return result

def create_chatgpt_config(exercise_mapping, motivational_mapping):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è ChatGPT"""
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    exercises_by_category = {}
    for item in exercise_mapping:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ slug
        slug = item["exercise_slug"]
        if "prep" in slug or "activation" in slug:
            category = "movement_prep"
        elif "push" in slug or "pull" in slug or "squat" in slug:
            category = "fundamental_patterns"
        elif "jump" in slug or "explosive" in slug:
            category = "power_explosive"
        elif "beast" in slug or "crab" in slug or "flow" in slug:
            category = "primal_flow"
        elif "corrective" in slug or "mobility" in slug:
            category = "corrective_therapeutic"
        elif "mindful" in slug or "breathing" in slug:
            category = "mindful_movement"
        elif "recovery" in slug or "relaxation" in slug:
            category = "recovery_regeneration"
        else:
            category = "fundamental_patterns"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
        if category not in exercises_by_category:
            exercises_by_category[category] = []
        exercises_by_category[category].append(item)
    
    # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –ø–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞–º
    weekly_by_archetype = {}
    final_by_archetype = {}
    
    for item in motivational_mapping:
        if item["type"] == "weekly":
            archetype = item["archetype"]
            if archetype not in weekly_by_archetype:
                weekly_by_archetype[archetype] = []
            weekly_by_archetype[archetype].append(item)
        elif item["type"] == "final":
            final_by_archetype[item["archetype"]] = item
    
    config = {
        "system_info": {
            "version": "1.0",
            "phase": "Phase 1 - Basic Technique Videos",
            "total_exercises": len(exercise_mapping),
            "total_motivational": len(motivational_mapping)
        },
        "exercises": {
            "by_category": exercises_by_category,
            "by_slug": {item["exercise_slug"]: item for item in exercise_mapping}
        },
        "motivational": {
            "weekly_by_archetype": weekly_by_archetype,
            "final_by_archetype": final_by_archetype
        },
        "archetypes": {
            "bro": {
                "name": "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä-–ø—Ä–∏—è—Ç–µ–ª—å",
                "tone": "–ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π",
                "examples": ["–î–∞–≤–∞–π, –±—Ä–∞—Ç–∞–Ω!", "–¢—ã –º–æ–∂–µ—à—å!", "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"]
            },
            "sergeant": {
                "name": "–°—Ç—Ä–æ–≥–∏–π —Ç—Ä–µ–Ω–µ—Ä-—Å–µ—Ä–∂–∞–Ω—Ç", 
                "tone": "–ß–µ—Ç–∫–∏–π, –∫–æ–º–∞–Ω–¥–Ω—ã–π",
                "examples": ["–í—ã–ø–æ–ª–Ω—è–π!", "–ë–µ–∑ –ø–æ–±–ª–∞–∂–µ–∫!", "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞!"]
            },
            "intellectual": {
                "name": "–ú—É–¥—Ä—ã–π —Ç—Ä–µ–Ω–µ—Ä-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª",
                "tone": "–°–ø–æ–∫–æ–π–Ω—ã–π, –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π",
                "examples": ["–ü–æ–º–Ω–∏ –æ —Ç–µ—Ö–Ω–∏–∫–µ", "–ù–∞—É—á–Ω–æ –¥–æ–∫–∞–∑–∞–Ω–æ", "–û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ"]
            }
        },
        "usage_examples": {
            "get_exercise_video": "exercise_mapping['quality-push-up']['cloudflare_url']",
            "get_weekly_motivation": "weekly_by_archetype['bro'][week-1]['cloudflare_url']",
            "get_final_congratulation": "final_by_archetype['intellectual']['cloudflare_url']"
        }
    }
    
    return config

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üé¨ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –æ—Ç–±–æ—Ä—â–∏–∫–∞ –≤–∏–¥–µ–æ –¥–ª—è AI Fitness Coach")
    print("=" * 60)
    
    # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –ø–æ —Ä–∞–∑–º–µ—Ä—É
    print("\nüìä –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–æ–≤...")
    analysis = analyze_videos_by_size()
    
    # 2. –û—Ç–±–∏—Ä–∞–µ–º –≤–∏–¥–µ–æ –¥–ª—è –§–∞–∑—ã 1 (—Ç–µ—Ö–Ω–∏–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π)
    print("\nüéØ –®–∞–≥ 2: –û—Ç–±–æ—Ä –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...")
    exercise_mapping = select_videos_for_phase1(analysis)
    
    # 3. –û—Ç–±–∏—Ä–∞–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
    print("\nüé¨ –®–∞–≥ 3: –û—Ç–±–æ—Ä –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ...")
    motivational_mapping = select_motivational_videos(analysis)
    
    # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüíæ –®–∞–≥ 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    results = save_mapping_results(exercise_mapping, motivational_mapping)
    
    # 5. –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    print("\nüìÅ –®–∞–≥ 5: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...")
    
    print("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...")
    exercise_success, exercise_errors = copy_and_rename_phase1(exercise_mapping)
    motivational_success, motivational_errors = copy_motivational_videos(motivational_mapping)
    
    print(f"\nüéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìä –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {exercise_success} —É—Å–ø–µ—à–Ω–æ, {exercise_errors} –æ—à–∏–±–æ–∫")
    print(f"üé¨ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ: {motivational_success} —É—Å–ø–µ—à–Ω–æ, {motivational_errors} –æ—à–∏–±–æ–∫")
    
    print(f"\nüìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤: /Volumes/Z9/AI_FITNESS_COACH_VIDEOS/")
    print(f"üìä –í—Å–µ–≥–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ: {results['summary']['total_videos']} –≤–∏–¥–µ–æ")
    print(f"üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {results['summary']['total_size_gb']:.1f} GB")

if __name__ == '__main__':
    main()