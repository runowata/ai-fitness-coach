#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –≤–∏–¥–µ–æ –≤ AI –ø—Ä–æ–º–ø—Ç–∞—Ö
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ exercise_slug –≤ –ø—Ä–æ–º–ø—Ç–∞—Ö —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ 271 –≤–∏–¥–µ–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏
"""

import os
import csv
import re

def extract_exercise_slugs_from_prompt(prompt_file):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç exercise_slug –∏–∑ –ø—Ä–æ–º–ø—Ç —Ñ–∞–π–ª–∞"""
    if not os.path.exists(prompt_file):
        return []
    
    with open(prompt_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ò—â–µ–º —Å–µ–∫—Ü–∏—é —Å exercise_slug
    pattern = r"–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —ç—Ç–∏ exercise_slug'–∏:\s*\n\n(.*?)(?=\n\n[–ê-–Ø]|$)"
    match = re.search(pattern, content, re.DOTALL)
    
    if not match:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è —Å exercise_slug –≤ {prompt_file}")
        return []
    
    exercises_text = match.group(1)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ exercise_slug (—Ä–∞–∑–¥–µ–ª–µ–Ω—ã –∑–∞–ø—è—Ç—ã–º–∏)
    slugs = []
    for line in exercises_text.split('\n'):
        line = line.strip()
        if line and not line.startswith('#'):
            # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ –æ—á–∏—â–∞–µ–º
            line_slugs = [slug.strip().rstrip(',') for slug in line.split(',')]
            slugs.extend([slug for slug in line_slugs if slug])
    
    return slugs

def load_csv_exercises():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ CSV —Ñ–∞–π–ª–∞"""
    csv_file = '/Users/alexbel/Desktop/AI Fitness Coach/media_lists/EXERCISES_271_VIDEOS.csv'
    
    if not os.path.exists(csv_file):
        print(f"‚ùå CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_file}")
        return []
    
    exercises = []
    with open(csv_file, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            slug = row['exercise_slug'].strip()
            if slug:
                exercises.append({
                    'slug': slug,
                    'category': row.get('category', '').strip(),
                    'file_name': row.get('file_name', '').strip()
                })
    
    return exercises

def categorize_exercises_by_video_names():
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤"""
    csv_exercises = load_csv_exercises()
    
    categories = {
        'warmup': [],      # –†–∞–∑–º–∏–Ω–∫–∞  
        'main': [],        # –û—Å–Ω–æ–≤–Ω—ã–µ
        'endurance': [],   # –°–µ–∫—Å—É–∞–ª—å–Ω–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å (sexual_*)
        'cooldown': []     # –†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ
    }
    
    for exercise in csv_exercises:
        file_name = exercise['file_name'].lower()
        slug = exercise['slug']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∞–π–ª–∞
        if any(keyword in file_name for keyword in ['warmup', 'warm_up', '—Ä–∞–∑–º–∏–Ω–∫–∞']):
            categories['warmup'].append(slug)
        elif any(keyword in file_name for keyword in ['sexual_', 'endurance', '–≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å']):
            categories['endurance'].append(slug)
        elif any(keyword in file_name for keyword in ['relax', 'stretch', '—Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ', '—Ä–∞—Å—Ç—è–∂–∫–∞', 'final_', 'gratitude', 'breathing', 'pose']):
            categories['cooldown'].append(slug)
        else:
            # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—á–∏—Ç–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–º–∏
            categories['main'].append(slug)
    
    return categories, csv_exercises

def analyze_prompt_coverage():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –≤–∏–¥–µ–æ –≤ –ø—Ä–æ–º–ø—Ç–∞—Ö"""
    print("üîç –ê–ù–ê–õ–ò–ó –ü–û–ö–†–´–¢–ò–Ø –í–ò–î–ï–û –í AI –ü–†–û–ú–ü–¢–ê–•")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ CSV
    categories, csv_exercises = categorize_exercises_by_video_names()
    csv_slugs = set(ex['slug'] for ex in csv_exercises)
    
    print(f"\nüìä –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø –ò–ó CSV ({len(csv_exercises)} –≤—Å–µ–≥–æ):")
    for category, slugs in categories.items():
        print(f"  {category:10}: {len(slugs):3d} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–º–ø—Ç —Ñ–∞–π–ª
    prompt_files = [
        '/Users/alexbel/Desktop/AI Fitness Coach/prompts/workout_plan_bro.txt',
        '/Users/alexbel/Desktop/AI Fitness Coach/prompts/workout_plan_sergeant.txt',
        '/Users/alexbel/Desktop/AI Fitness Coach/prompts/workout_plan_intellectual.txt'
    ]
    
    print(f"\nüéØ –ê–ù–ê–õ–ò–ó –ü–†–û–ú–ü–¢ –§–ê–ô–õ–û–í:")
    
    all_prompt_slugs = set()
    
    for prompt_file in prompt_files:
        if not os.path.exists(prompt_file):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {prompt_file}")
            continue
            
        prompt_name = os.path.basename(prompt_file).replace('workout_plan_', '').replace('.txt', '')
        prompt_slugs = extract_exercise_slugs_from_prompt(prompt_file)
        
        print(f"\nüìÑ {prompt_name.upper()}:")
        print(f"  –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –ø—Ä–æ–º–ø—Ç–µ: {len(prompt_slugs)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å CSV
        matching = csv_slugs & set(prompt_slugs)
        only_in_prompt = set(prompt_slugs) - csv_slugs
        only_in_csv = csv_slugs - set(prompt_slugs)
        
        print(f"  ‚úÖ –°–æ–≤–ø–∞–¥–∞—é—Ç —Å CSV: {len(matching)}")
        print(f"  ‚ùå –¢–æ–ª—å–∫–æ –≤ –ø—Ä–æ–º–ø—Ç–µ: {len(only_in_prompt)}")
        print(f"  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ø—Ä–æ–º–ø—Ç–µ: {len(only_in_csv)}")
        
        if only_in_prompt:
            print(f"  üîç –õ–∏—à–Ω–∏–µ –≤ –ø—Ä–æ–º–ø—Ç–µ (–ø–µ—Ä–≤—ã–µ 5): {list(only_in_prompt)[:5]}")
        
        all_prompt_slugs.update(prompt_slugs)
    
    # –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑
    print(f"\nüìà –û–ë–©–ò–ô –ê–ù–ê–õ–ò–ó:")
    print(f"  –í—Å–µ–≥–æ –≤ CSV: {len(csv_slugs)}")
    print(f"  –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤ –ø—Ä–æ–º–ø—Ç–∞—Ö: {len(all_prompt_slugs)}")
    print(f"  –ü–æ–∫—Ä—ã—Ç–∏–µ: {len(csv_slugs & all_prompt_slugs)}/{len(csv_slugs)} ({(len(csv_slugs & all_prompt_slugs)/len(csv_slugs)*100):.1f}%)")
    
    # –ß—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–º–ø—Ç–∞—Ö
    missing_in_prompts = csv_slugs - all_prompt_slugs
    if missing_in_prompts:
        print(f"\n‚ùå –û–¢–°–£–¢–°–¢–í–£–Æ–¢ –í –ü–†–û–ú–ü–¢–ê–• ({len(missing_in_prompts)} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π):")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for category, category_slugs in categories.items():
            missing_in_category = set(category_slugs) & missing_in_prompts
            if missing_in_category:
                print(f"  {category:10}: {len(missing_in_category)} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                print(f"    –ü—Ä–∏–º–µ—Ä—ã: {list(missing_in_category)[:3]}")
    
    # –ß—Ç–æ –ª–∏—à–Ω–µ–µ –≤ –ø—Ä–æ–º–ø—Ç–∞—Ö
    extra_in_prompts = all_prompt_slugs - csv_slugs
    if extra_in_prompts:
        print(f"\n‚ö†Ô∏è –õ–ò–®–ù–ò–ï –í –ü–†–û–ú–ü–¢–ê–• ({len(extra_in_prompts)} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π):")
        print(f"  –ü—Ä–∏–º–µ—Ä—ã: {list(extra_in_prompts)[:10]}")

def check_motivational_videos():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—á–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ –≤ —Å–∏—Å—Ç–µ–º–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤"""
    print(f"\n\nüé§ –ê–ù–ê–õ–ò–ó –ú–û–¢–ò–í–ê–¶–ò–û–ù–ù–´–• –í–ò–î–ï–û")
    print("=" * 60)
    
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ –∏–∑ –Ω–∞—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    motivational_structure = {
        'intro': 63,              # –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ (21 –¥–µ–Ω—å √ó 3 —Ç—Ä–µ–Ω–µ—Ä–∞)
        'after_warmup': 63,       # –ü–æ—Å–ª–µ —Ä–∞–∑–º–∏–Ω–∫–∏  
        'after_main': 63,         # –ü–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö
        'motivating_speech': 63,  # –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π —Ä–æ–ª–∏–∫
        'farewell': 63,           # –ù–∞–ø—É—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
        'weekly': 18,             # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ (6 –Ω–µ–¥–µ–ª—å √ó 3 —Ç—Ä–µ–Ω–µ—Ä–∞)
        'biweekly': 9,            # –î–≤—É—Ö–Ω–µ–¥–µ–ª—å–Ω—ã–µ (3 —Ä–∞–∑–∞ √ó 3 —Ç—Ä–µ–Ω–µ—Ä–∞)
        'final': 3                # –§–∏–Ω–∞–ª—å–Ω—ã–µ (3 —Ç—Ä–µ–Ω–µ—Ä–∞)
    }
    
    total_motivational = sum(motivational_structure.values())
    
    print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ:")
    for category, count in motivational_structure.items():
        print(f"  {category:18}: {count:3d} –≤–∏–¥–µ–æ")
    
    print(f"\nüìà –ò—Ç–æ–≥–æ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö: {total_motivational} –≤–∏–¥–µ–æ")
    print(f"üìà –ò—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: 271 –≤–∏–¥–µ–æ")
    print(f"üéØ –û–ë–©–ò–ô –ò–¢–û–ì: {total_motivational + 271} = 616 –≤–∏–¥–µ–æ")
    
    print(f"\n‚úÖ –í–°–ï 616 –í–ò–î–ï–û –£–ß–¢–ï–ù–´ –í –ù–û–í–û–ô –°–ò–°–¢–ï–ú–ï –ü–õ–ï–ô–õ–ò–°–¢–û–í!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    print("üöÄ –ü–†–û–í–ï–†–ö–ê –ü–û–ö–†–´–¢–ò–Ø –í–°–ï–• –í–ò–î–ï–û –í AI –ü–†–û–ú–ü–¢–ê–•")
    print("=" * 80)
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –ø—Ä–æ–º–ø—Ç–∞—Ö
        analyze_prompt_coverage()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
        check_motivational_videos()
        
        print(f"\n\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        print("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –ø—Ä–æ–º–ø—Ç–∞–º–∏ –∏ —Ä–µ–∞–ª—å–Ω—ã–º–∏ 616 –≤–∏–¥–µ–æ.")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()