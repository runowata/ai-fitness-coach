#!/usr/bin/env python3
"""
–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö 271 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
"""

import os
import csv
import re

def categorize_exercises_by_names():
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏–π –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è"""
    csv_file = '/Users/alexbel/Desktop/AI Fitness Coach/media_lists/EXERCISES_271_VIDEOS.csv'
    
    if not os.path.exists(csv_file):
        print(f"‚ùå CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_file}")
        return {}
    
    exercises = []
    with open(csv_file, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            exercises.append({
                'slug': row['exercise_slug'].strip(),
                'new_name': row.get('new_name', '').strip(),
                'category': row.get('category', '').strip()
            })
    
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(exercises)} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ CSV")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    categories = {
        'warmup': [],       # –†–∞–∑–º–∏–Ω–∫–∞
        'main': [],         # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–ª–æ–≤—ã–µ
        'endurance': [],    # –°–µ–∫—Å—É–∞–ª—å–Ω–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å  
        'cooldown': []      # –†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ/—Ä–∞—Å—Ç—è–∂–∫–∞
    }
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
    warmup_keywords = [
        'warmup', 'warm_up', 'circles', 'swings', 'bird_dog_warmup', 
        'bear_crawl_warmup', 'calf_raises_warmup', 'cat_cow_warmup',
        'butt_kicks', 'high_knees', 'leg_swings', 'arm_circles',
        'ankle_circles', 'shoulder_rolls', 'hip_circles'
    ]
    
    endurance_keywords = [
        'sexual', 'pelvic', 'kegel', 'hip_thrust', 'bridge_sexual',
        'curtsy_lunges_sexual', 'deep_squats_sexual', 'cat_cow_sexual',
        'dynamic_bridge_sexual', 'glute_bridge_sexual', 'hip_circles_sexual'
    ]
    
    cooldown_keywords = [
        'stretch', 'relax', 'pose', 'breathing', 'gratitude', 'final_',
        'corpse_pose', 'childs_pose', 'cobra_pose', 'butterfly_pose',
        'cat_pose_relax', 'calf_stretch_relax', 'butterfly_pose_relax',
        'chest_stretch_final', 'final_gratitude', 'final_hip_stretch',
        'final_relaxation', 'face_muscle_relax', 'deep_breathing'
    ]
    
    for exercise in exercises:
        slug = exercise['slug'].lower()
        new_name = exercise['new_name'].lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        if any(keyword in slug for keyword in warmup_keywords):
            categories['warmup'].append(exercise)
        elif any(keyword in slug for keyword in endurance_keywords):
            categories['endurance'].append(exercise)
        elif any(keyword in slug for keyword in cooldown_keywords):
            categories['cooldown'].append(exercise)
        else:
            # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –æ—Å–Ω–æ–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
            categories['main'].append(exercise)
    
    return categories

def validate_categories(categories):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print(f"\nüîç –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–ô:")
    print("=" * 50)
    
    total = 0
    for category, exercises in categories.items():
        count = len(exercises)
        total += count
        print(f"{category:10}: {count:3d} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        if exercises:
            examples = [ex['slug'] for ex in exercises[:3]]
            print(f"           –ü—Ä–∏–º–µ—Ä—ã: {', '.join(examples)}")
    
    print(f"\nüìà –û–±—â–∏–π –∏—Ç–æ–≥: {total} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è
    expected_ratios = {
        'warmup': (30, 50),     # 30-50 —Ä–∞–∑–º–∏–Ω–æ—á–Ω—ã—Ö
        'main': (120, 160),     # 120-160 –æ—Å–Ω–æ–≤–Ω—ã—Ö
        'endurance': (30, 50),  # 30-50 –Ω–∞ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å
        'cooldown': (30, 50)    # 30-50 —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏—Ö
    }
    
    print(f"\n‚öñÔ∏è –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–ù–û–®–ï–ù–ò–ô:")
    for category, (min_val, max_val) in expected_ratios.items():
        count = len(categories[category])
        status = "‚úÖ" if min_val <= count <= max_val else "‚ö†Ô∏è"
        print(f"{category:10}: {count:3d} (–æ–∂–∏–¥–∞–µ—Ç—Å—è {min_val}-{max_val}) {status}")

def save_categorized_lists(categories):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    print(f"\nüíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –°–ü–ò–°–ö–û–í –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
    
    for category, exercises in categories.items():
        file_path = f'/Users/alexbel/Desktop/AI Fitness Coach/prompts/exercises_{category}.txt'
        
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(f"# –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–ò: {category.upper()}\n")
            f.write(f"# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(exercises)} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n")
            f.write(f"# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º exercise_slug —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
            slugs = [ex['slug'] for ex in exercises]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ 8 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ —Å—Ç—Ä–æ–∫–µ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            for i in range(0, len(slugs), 8):
                line_slugs = slugs[i:i+8]
                f.write(', '.join(line_slugs))
                if i + 8 < len(slugs):
                    f.write(',')
                f.write('\n')
        
        print(f"  ‚úÖ {category}: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {file_path}")

def create_playlist_schema():
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ö–µ–º—É –ø–ª–µ–π–ª–∏—Å—Ç–∞ –¥–ª—è AI"""
    schema = {
        'daily_structure': [
            {
                'order': 1,
                'type': 'motivational',
                'category': 'intro',
                'description': '–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞',
                'duration': '2 –º–∏–Ω—É—Ç—ã',
                'trainer_dependent': True
            },
            {
                'order': 2,
                'type': 'exercise',
                'category': 'warmup',
                'count': 2,
                'description': '–†–∞–∑–º–∏–Ω–æ—á–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è',
                'duration': '3.25 –º–∏–Ω—É—Ç—ã –∫–∞–∂–¥–æ–µ (3 –ø–æ–¥—Ö–æ–¥–∞ √ó 15 –ø–æ–≤—Ç–æ—Ä–æ–≤)',
                'trainer_dependent': False
            },
            {
                'order': 3,
                'type': 'motivational',
                'category': 'after_warmup',
                'description': '–ú–æ—Ç–∏–≤–∞—Ü–∏—è –ø–æ—Å–ª–µ —Ä–∞–∑–º–∏–Ω–∫–∏',
                'duration': '2 –º–∏–Ω—É—Ç—ã',
                'trainer_dependent': True
            },
            {
                'order': 4,
                'type': 'exercise',
                'category': 'main',
                'count': 5,
                'description': '–û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–ª–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è',
                'duration': '3.25 –º–∏–Ω—É—Ç—ã –∫–∞–∂–¥–æ–µ (3 –ø–æ–¥—Ö–æ–¥–∞ √ó 15 –ø–æ–≤—Ç–æ—Ä–æ–≤)',
                'trainer_dependent': False
            },
            {
                'order': 5,
                'type': 'motivational',
                'category': 'after_main',
                'description': '–ú–æ—Ç–∏–≤–∞—Ü–∏—è –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π',
                'duration': '2 –º–∏–Ω—É—Ç—ã',
                'trainer_dependent': True
            },
            {
                'order': 6,
                'type': 'exercise',
                'category': 'endurance',
                'count': 2,
                'description': '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ–∫—Å—É–∞–ª—å–Ω—É—é –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å',
                'duration': '3.25 –º–∏–Ω—É—Ç—ã –∫–∞–∂–¥–æ–µ (3 –ø–æ–¥—Ö–æ–¥–∞ √ó 15 –ø–æ–≤—Ç–æ—Ä–æ–≤)',
                'trainer_dependent': False
            },
            {
                'order': 7,
                'type': 'motivational',
                'category': 'motivating_speech',
                'description': '–ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π —Ä–æ–ª–∏–∫ —Ç—Ä–µ–Ω–µ—Ä–∞',
                'duration': '2 –º–∏–Ω—É—Ç—ã',
                'trainer_dependent': True
            },
            {
                'order': 8,
                'type': 'exercise',
                'category': 'cooldown',
                'count': 2,
                'description': '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ –∏ —Ä–∞—Å—Ç—è–∂–∫—É',
                'duration': '3.25 –º–∏–Ω—É—Ç—ã –∫–∞–∂–¥–æ–µ (3 –ø–æ–¥—Ö–æ–¥–∞ √ó 15 –ø–æ–≤—Ç–æ—Ä–æ–≤)',
                'trainer_dependent': False
            },
            {
                'order': 9,
                'type': 'motivational',
                'category': 'farewell',
                'description': '–ù–∞–ø—É—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞',
                'duration': '2 –º–∏–Ω—É—Ç—ã',
                'trainer_dependent': True
            }
        ],
        'special_videos': {
            'weekly': {
                'frequency': '–ö–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (–¥–Ω–∏ 7, 14, 21)',
                'duration': '10 –º–∏–Ω—É—Ç',
                'description': '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ'
            },
            'biweekly': {
                'frequency': '–ö–∞–∂–¥—ã–µ 2 –Ω–µ–¥–µ–ª–∏ (–¥–Ω–∏ 14, 28, 42)',
                'duration': '15 –º–∏–Ω—É—Ç',
                'description': '–î–≤—É—Ö–Ω–µ–¥–µ–ª—å–Ω–æ–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–≤–∏–¥–µ–æ'
            },
            'final': {
                'frequency': '–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –∫—É—Ä—Å–∞',
                'duration': '10-15 –º–∏–Ω—É—Ç',
                'description': '–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ'
            }
        },
        'rules': [
            '–ó–ê–ü–†–ï–©–ï–ù–û –ø–æ–≤—Ç–æ—Ä—è—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –¥–Ω—è',
            '–ó–ê–ü–†–ï–©–ï–ù–û –ø–æ–≤—Ç–æ—Ä—è—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –ø–µ—Ä–≤—ã–µ 3 –Ω–µ–¥–µ–ª–∏ (21 –¥–µ–Ω—å)',
            '–í –Ω–µ–¥–µ–ª—è—Ö 4-6 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –æ—Ü–µ–Ω–∫–æ–π ‚â• 4 –∑–≤–µ–∑–¥—ã',
            '–°–æ–±–ª—é–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å –≥—Ä—É–ø–ø –º—ã—à—Ü –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è—Ö',
            '–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–Ω—é –∫—É—Ä—Å–∞ –∏ –∞—Ä—Ö–µ—Ç–∏–ø—É —Ç—Ä–µ–Ω–µ—Ä–∞'
        ]
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ö–µ–º—É
    schema_file = '/Users/alexbel/Desktop/AI Fitness Coach/prompts/playlist_schema.txt'
    
    with open(schema_file, 'w', encoding='utf-8') as f:
        f.write("# –°–•–ï–ú–ê –ï–ñ–ï–î–ù–ï–í–ù–û–ì–û –ü–õ–ï–ô–õ–ò–°–¢–ê –î–õ–Ø AI\n")
        f.write("# 16 –≤–∏–¥–µ–æ, –æ–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 45.8 –º–∏–Ω—É—Ç\n\n")
        
        f.write("–°–¢–†–£–ö–¢–£–†–ê –ï–ñ–ï–î–ù–ï–í–ù–û–ì–û –ü–õ–ï–ô–õ–ò–°–¢–ê:\n")
        f.write("=" * 60 + "\n\n")
        
        for item in schema['daily_structure']:
            f.write(f"{item['order']}. {item['type'].upper()}")
            if 'count' in item:
                f.write(f" ({item['count']} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è)")
            f.write(f" - {item['category']}\n")
            f.write(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {item['description']}\n")
            f.write(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {item['duration']}\n")
            f.write(f"   –û—Ç —Ç—Ä–µ–Ω–µ—Ä–∞: {'–î–∞' if item['trainer_dependent'] else '–ù–µ—Ç'}\n\n")
        
        f.write("–°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –í–ò–î–ï–û:\n")
        f.write("=" * 30 + "\n\n")
        
        for video_type, info in schema['special_videos'].items():
            f.write(f"{video_type.upper()}:\n")
            f.write(f"  –ß–∞—Å—Ç–æ—Ç–∞: {info['frequency']}\n")
            f.write(f"  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {info['duration']}\n")
            f.write(f"  –û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}\n\n")
        
        f.write("–°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê:\n")
        f.write("=" * 20 + "\n\n")
        
        for i, rule in enumerate(schema['rules'], 1):
            f.write(f"{i}. {rule}\n")
    
    print(f"  ‚úÖ –°—Ö–µ–º–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {schema_file}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("üöÄ –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–Ø –£–ü–†–ê–ñ–ù–ï–ù–ò–ô –î–õ–Ø AI –ü–†–û–ú–ü–¢–û–í")
    print("=" * 70)
    
    try:
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        categories = categorize_exercises_by_names()
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        validate_categories(categories)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        save_categorized_lists(categories)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –ø–ª–µ–π–ª–∏—Å—Ç–∞
        create_playlist_schema()
        
        print(f"\n‚úÖ –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("–°–æ–∑–¥–∞–Ω—ã —Å–ø–∏—Å–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —Å—Ö–µ–º–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –¥–ª—è AI.")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()