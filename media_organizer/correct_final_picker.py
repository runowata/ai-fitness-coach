#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Å–∫—Ä–∏–ø—Ç —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
"""

import os
import sys
import csv
import random
import shutil
from pathlib import Path

# –ü–†–ê–í–ò–õ–¨–ù–´–ï –¶–ï–õ–ï–í–´–ï –ö–û–õ–ò–ß–ï–°–¢–í–ê
CORRECT_TARGETS = {
    "technique": 147,      # 1√ó –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ = 147
    "instruction": 441,    # 3√ó –∞—Ä—Ö–µ—Ç–∏–ø √ó 147 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π = 441  
    "mistake": 147,        # 1√ó –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ = 147
    "reminder": 441,       # 3√ó –∞—Ä—Ö–µ—Ç–∏–ø √ó 147 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π √ó 1 –≤–∞—Ä–∏–∞–Ω—Ç = 441 (–ù–ï 1323!)
    "weekly": 36,          # 12 –Ω–µ–¥–µ–ª—å √ó 3 –∞—Ä—Ö–µ—Ç–∏–ø–∞ = 36
    "final": 3,            # 1√ó –Ω–∞ –∞—Ä—Ö–µ—Ç–∏–ø = 3
    "avatars": 9,          # 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ √ó 3 –∞—Ä—Ö–µ—Ç–∏–ø–∞ = 9
    "cards": 600,          # 600 –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
}

# –ò–¢–û–ì–û –ü–†–ê–í–ò–õ–¨–ù–û:
# –í–∏–¥–µ–æ: 147+441+147+441+36+3 = 1215 –≤–∏–¥–µ–æ (–ù–ï 2097!)
# –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: 9+600 = 609 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
# –í–°–ï–ì–û: 1824 —Ñ–∞–π–ª–∞

SOURCE_DIR = "/Volumes/fitnes ai/"
TARGET_DIR = "/Users/alexbel/Desktop/–ü—Ä–æ–µ–∫—Ç—ã/AI Fitness Coach/selected_media"
EXERCISES_FILE = "/Users/alexbel/Desktop/–ü—Ä–æ–µ–∫—Ç—ã/AI Fitness Coach/media_organizer/exercises.csv"
ARCHETYPES = ["wise_mentor", "best_mate", "pro_coach"]

def load_exercises():
    exercises = []
    with open(EXERCISES_FILE, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            exercises.append(row['slug'])
    return exercises

def get_current_counts():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤"""
    counts = {}
    
    # –í–∏–¥–µ–æ
    counts['technique'] = len(list(Path(TARGET_DIR, "videos/exercises").glob("*technique*")))
    counts['instruction'] = len(list(Path(TARGET_DIR, "videos/instructions").glob("*")))
    
    reminder_path = Path(TARGET_DIR, "videos/reminders")
    counts['reminder'] = len(list(reminder_path.glob("*"))) if reminder_path.exists() else 0
    
    motivation_path = Path(TARGET_DIR, "videos/motivation")
    if motivation_path.exists():
        counts['weekly'] = len(list(motivation_path.glob("*weekly*")))
        counts['final'] = len(list(motivation_path.glob("*final*")))
    else:
        counts['weekly'] = 0
        counts['final'] = 0
    
    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    avatars_path = Path(TARGET_DIR, "images/avatars")
    cards_path = Path(TARGET_DIR, "images/cards")
    counts['avatars'] = len(list(avatars_path.glob("*"))) if avatars_path.exists() else 0
    counts['cards'] = len(list(cards_path.glob("*"))) if cards_path.exists() else 0
    
    return counts

def generate_filename(category, counter, exercises):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞"""
    
    if category == "reminder":
        # 147 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π √ó 3 –∞—Ä—Ö–µ—Ç–∏–ø–∞ = 441 (–ù–ï 1323!)
        exercise_idx = counter % len(exercises)
        archetype_idx = (counter // len(exercises)) % len(ARCHETYPES)
        
        exercise = exercises[exercise_idx]
        archetype = ARCHETYPES[archetype_idx]
        
        return f"videos/reminders/{exercise}_reminder_{archetype}_01"
    
    elif category == "weekly":
        week_num = (counter % 12) + 1
        archetype = ARCHETYPES[counter % len(ARCHETYPES)]
        return f"videos/motivation/weekly_{archetype}_week{week_num:02d}"
    
    elif category == "final":
        archetype = ARCHETYPES[counter % len(ARCHETYPES)]
        return f"videos/motivation/final_{archetype}"
    
    elif category == "avatars":
        archetype = ARCHETYPES[counter // 3]
        variant = (counter % 3) + 1
        return f"images/avatars/{archetype}_avatar_{variant:02d}"
    
    elif category == "cards":
        card_category = random.choice(['motivation', 'progress', 'success', 'challenge'])
        return f"images/cards/card_{card_category}_{counter+1:05d}"
    
    return "misc/unknown"

def continue_with_correct_amounts():
    """–ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏"""
    
    exercises = load_exercises()
    current_counts = get_current_counts()
    
    print(f"üìä –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –° –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –¶–ï–õ–Ø–ú–ò:")
    print("=" * 50)
    
    total_current = 0
    total_target = sum(CORRECT_TARGETS.values())
    
    for category, target in CORRECT_TARGETS.items():
        current = current_counts.get(category, 0)
        remaining = max(0, target - current)
        total_current += current
        
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å—à–µ —Ü–µ–ª–µ–≤–æ–≥–æ - –æ–±—Ä–µ–∑–∞–µ–º
        if current > target:
            print(f"‚ö†Ô∏è  {category}: {current}/{target} (–õ–ò–®–ù–ò–ï! –ù—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å {current - target})")
        elif remaining > 0:
            print(f"‚è≥ {category}: {current}/{target} (–æ—Å—Ç–∞–ª–æ—Å—å {remaining})")
        else:
            print(f"‚úÖ {category}: {current}/{target} (–≥–æ—Ç–æ–≤–æ)")
    
    print("=" * 50)
    print(f"   –ò–¢–û–ì–û: {total_current}/{total_target}")
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ reminder –≤–∏–¥–µ–æ –µ—Å–ª–∏ –µ—Å—Ç—å
    if current_counts.get('reminder', 0) > CORRECT_TARGETS['reminder']:
        print(f"\nüóëÔ∏è  –£–¥–∞–ª—è—é –ª–∏—à–Ω–∏–µ reminder –≤–∏–¥–µ–æ...")
        reminder_files = list(Path(TARGET_DIR, "videos/reminders").glob("*"))
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Ñ–∞–π–ª—ã
        excess_count = len(reminder_files) - CORRECT_TARGETS['reminder']
        for i in range(excess_count):
            reminder_files[-(i+1)].unlink()
        
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {excess_count} –ª–∏—à–Ω–∏—Ö reminder —Ñ–∞–π–ª–æ–≤")
        current_counts['reminder'] = CORRECT_TARGETS['reminder']
    
    # –°–æ–±–∏—Ä–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    print(f"\nüìÇ –°–æ–±–∏—Ä–∞—é —Ñ–∞–π–ª—ã —Å –¥–∏—Å–∫–∞...")
    
    all_videos = []
    all_images = []
    
    for path in Path(SOURCE_DIR).rglob('*'):
        if path.is_file():
            ext = path.suffix.lower()
            if ext in {'.mp4', '.mov', '.avi', '.mkv', '.webm'}:
                all_videos.append(path)
            elif ext in {'.jpg', '.jpeg', '.png', '.webp', '.gif'}:
                all_images.append(path)
    
    random.shuffle(all_videos)
    random.shuffle(all_images)
    
    print(f"üìπ –î–æ—Å—Ç—É–ø–Ω–æ {len(all_videos)} –≤–∏–¥–µ–æ")
    print(f"üì∑ –î–æ—Å—Ç—É–ø–Ω–æ {len(all_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    video_idx = 0
    image_idx = 0
    
    # –ö–æ–ø–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã
    categories_to_copy = ["reminder", "weekly", "final", "avatars", "cards"]
    
    for category in categories_to_copy:
        current_count = current_counts.get(category, 0)
        target_count = CORRECT_TARGETS[category]
        remaining = target_count - current_count
        
        if remaining <= 0:
            continue
            
        print(f"\nüìÅ {category}: –∫–æ–ø–∏—Ä—É—é {remaining} –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É
        if category in ["reminder"]:
            folder = "videos/reminders"
            file_source = all_videos
            idx_ref = 'video_idx'
        elif category in ["weekly", "final"]:
            folder = "videos/motivation" 
            file_source = all_videos
            idx_ref = 'video_idx'
        else:  # avatars, cards
            folder = f"images/{category}"
            file_source = all_images
            idx_ref = 'image_idx'
            
        os.makedirs(os.path.join(TARGET_DIR, folder), exist_ok=True)
        
        for i in range(remaining):
            if idx_ref == 'video_idx':
                if video_idx >= len(all_videos):
                    print(f"‚ùå –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤–∏–¥–µ–æ!")
                    break
                source_file = all_videos[video_idx]
                video_idx += 1
            else:
                if image_idx >= len(all_images):
                    print(f"‚ùå –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
                    break
                source_file = all_images[image_idx] 
                image_idx += 1
            
            counter = current_count + i
            filename_base = generate_filename(category, counter, exercises)
            target_file = filename_base + source_file.suffix
            target_path = os.path.join(TARGET_DIR, target_file)
            
            try:
                shutil.copy2(source_file, target_path)
                
                if (i + 1) % 50 == 0:
                    print(f"    {i + 1}/{remaining} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ")
                    
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        final_count = len(list(Path(TARGET_DIR, folder).glob("*")))
        print(f"‚úÖ {category}: –∑–∞–≤–µ—Ä—à–µ–Ω–æ ({final_count}/{target_count})")

def verify_final_correct_results():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ü–µ–ª—è–º–∏"""
    print(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –° –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –¶–ï–õ–Ø–ú–ò:")
    print("=" * 60)
    
    total_actual = 0
    total_target = sum(CORRECT_TARGETS.values())
    
    for category, target in CORRECT_TARGETS.items():
        if category == "technique":
            actual = len(list(Path(TARGET_DIR, "videos/exercises").glob("*technique*")))
        elif category == "instruction":
            actual = len(list(Path(TARGET_DIR, "videos/instructions").glob("*")))
        elif category == "reminder":
            actual = len(list(Path(TARGET_DIR, "videos/reminders").glob("*")))
        elif category in ["weekly", "final"]:
            actual = len(list(Path(TARGET_DIR, "videos/motivation").glob(f"*{category}*")))
        else:  # avatars, cards
            actual = len(list(Path(TARGET_DIR, f"images/{category}").glob("*")))
        
        total_actual += actual
        status = "‚úÖ" if actual == target else ("‚ö†Ô∏è" if actual > target else "‚ùå")
        print(f"{status} {category:12} {actual:4}/{target:4}")
    
    print("=" * 60)
    print(f"   {'–ò–¢–û–ì–û':12} {total_actual:4}/{total_target:4}")
    
    # –†–∞–∑–º–µ—Ä
    size_gb = sum(f.stat().st_size for f in Path(TARGET_DIR).rglob('*') if f.is_file()) / (1024**3)
    print(f"   {'–†–ê–ó–ú–ï–†':12} {size_gb:.1f} GB")
    
    print(f"\n–ü–†–ê–í–ò–õ–¨–ù–´–ï –¶–ï–õ–ò:")
    print(f"- –í–∏–¥–µ–æ: {147+441+147+441+36+3} = 1215 —à—Ç—É–∫")  
    print(f"- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {9+600} = 609 —à—Ç—É–∫")
    print(f"- –í–°–ï–ì–û: {1215+609} = 1824 —Ñ–∞–π–ª–∞")

def main():
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–õ–ò–ß–ï–°–¢–í –ò –ó–ê–í–ï–†–®–ï–ù–ò–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    print("‚ö†Ô∏è  –ò–°–ü–†–ê–í–õ–Ø–Æ: reminder = 441 (–ù–ï 1323!)")
    print("=" * 60)
    
    continue_with_correct_amounts()
    verify_final_correct_results()
    
    print(f"\nüéâ –ì–û–¢–û–í–û! –í—Å–µ —Ñ–∞–π–ª—ã —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏ –≤ {TARGET_DIR}")

if __name__ == '__main__':
    main()