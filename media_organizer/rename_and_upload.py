#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ —Å –¥–∏—Å–∫–∞ 'fitnes ai' 
–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Google Drive.
"""

import argparse
import csv
import mimetypes
import os
import shutil
import sys
from collections import defaultdict
from pathlib import Path
from typing import Dict, List, Tuple

try:
    import yaml
except ImportError:
    print("‚ùå PyYAML –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyyaml")
    sys.exit(1)

try:
    from google.auth.transport.requests import Request
    from google.oauth2.credentials import Credentials
    from google_auth_oauthlib.flow import InstalledAppFlow
    from googleapiclient.discovery import build
    from googleapiclient.errors import HttpError
    from googleapiclient.http import MediaFileUpload
except ImportError:
    print("‚ùå Google API –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install google-api-python-client google-auth-httplib2 google-auth-oauthlib")
    sys.exit(1)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SCOPES = ['https://www.googleapis.com/auth/drive.file']
TOKEN_FILE = 'token.json'
CREDENTIALS_FILE = 'credentials.json'
CATEGORIES_FILE = 'categories.yml'
LOG_FILE = 'rename_log.csv'
GDRIVE_FOLDER = 'ai_fitness_media'
TEMP_DIR = 'temp_media'

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
VIDEO_EXTS = {'.mp4', '.avi', '.mov', '.mkv', '.webm'}
PHOTO_EXTS = {'.jpg', '.jpeg', '.png', '.gif', '.webp'}


def authenticate_gdrive():
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Google Drive API."""
    creds = None
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
    if os.path.exists(TOKEN_FILE):
        creds = Credentials.from_authorized_user_file(
            TOKEN_FILE, SCOPES
        )
    
    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            if not os.path.exists(CREDENTIALS_FILE):
                print(f"‚ùå –§–∞–π–ª {CREDENTIALS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                print("–°–∫–∞—á–∞–π—Ç–µ OAuth credentials —Å Google Cloud Console")
                sys.exit(1)
                
            flow = InstalledAppFlow.from_client_secrets_file(
                CREDENTIALS_FILE, SCOPES
            )
            creds = flow.run_local_server(port=0)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        with open(TOKEN_FILE, 'w') as token:
            token.write(creds.to_json())
    
    return build('drive', 'v3', credentials=creds)


def load_categories(file_path: str) -> Dict[str, str]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–≤–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ YAML."""
    if not os.path.exists(file_path):
        print(f"‚ö†Ô∏è  –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –ø—Ä–∏–º–µ—Ä...")
        
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞
        example = {
            'pushup': 'chest',
            'squat': 'legs', 
            'plank': 'core',
            'workout': 'general',
            'alex': 'models',
            'selfie': 'progress',
            'motivation': 'quotes'
        }
        
        with open(file_path, 'w', encoding='utf-8') as f:
            yaml.dump(example, f, allow_unicode=True)
        
        return example
    
    with open(file_path, 'r', encoding='utf-8') as f:
        return yaml.safe_load(f) or {}


def categorize_file(filename: str, rules: Dict[str, str]) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ–∞–π–ª–∞ –ø–æ –∏–º–µ–Ω–∏."""
    name_lower = filename.lower()
    
    for keyword, category in rules.items():
        if keyword.lower() in name_lower:
            return category
    
    return 'uncategorized'


def scan_media_files(source_dir: str) -> Tuple[List[Path], List[Path]]:
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤."""
    videos = []
    photos = []
    
    source_path = Path(source_dir)
    
    if not source_path.exists():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {source_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        sys.exit(1)
    
    print(f"üìÇ –°–∫–∞–Ω–∏—Ä—É—é {source_dir}...")
    
    for file_path in source_path.rglob('*'):
        if file_path.is_file():
            ext = file_path.suffix.lower()
            
            if ext in VIDEO_EXTS:
                videos.append(file_path)
            elif ext in PHOTO_EXTS:
                photos.append(file_path)
    
    print(f"‚úì –ù–∞–π–¥–µ–Ω–æ: {len(videos)} –≤–∏–¥–µ–æ, {len(photos)} —Ñ–æ—Ç–æ")
    return videos, photos


def create_gdrive_folder(service, name: str, parent_id=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –Ω–∞ Google Drive."""
    file_metadata = {
        'name': name,
        'mimeType': 'application/vnd.google-apps.folder'
    }
    
    if parent_id:
        file_metadata['parents'] = [parent_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    query = f"name='{name}' and mimeType='application/vnd.google-apps.folder'"
    if parent_id:
        query += f" and '{parent_id}' in parents"
    else:
        query += " and 'root' in parents"
    
    results = service.files().list(
        q=query,
        fields="files(id, name)"
    ).execute()
    
    items = results.get('files', [])
    
    if items:
        return items[0]['id']
    else:
        folder = service.files().create(
            body=file_metadata,
            fields='id'
        ).execute()
        return folder.get('id')


def upload_to_gdrive(service, local_path: str, 
                     gdrive_path: str, parent_id: str):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ Google Drive."""
    file_name = os.path.basename(gdrive_path)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-—Ç–∏–ø
    mime_type, _ = mimetypes.guess_type(local_path)
    if not mime_type:
        mime_type = 'application/octet-stream'
    
    file_metadata = {
        'name': file_name,
        'parents': [parent_id]
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    query = f"name='{file_name}' and '{parent_id}' in parents"
    results = service.files().list(
        q=query,
        fields="files(id)"
    ).execute()
    
    items = results.get('files', [])
    
    media = MediaFileUpload(
        local_path,
        mimetype=mime_type,
        resumable=True
    )
    
    if items:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
        file_id = items[0]['id']
        service.files().update(
            fileId=file_id,
            media_body=media
        ).execute()
    else:
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
        service.files().create(
            body=file_metadata,
            media_body=media,
            fields='id'
        ).execute()


def process_media(source_dir: str, rules: Dict[str, str], 
                  service, dry_run: bool = False):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤."""
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    videos, photos = scan_media_files(source_dir)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    temp_path = Path(TEMP_DIR)
    if not dry_run:
        temp_path.mkdir(exist_ok=True)
    
    # –°–æ–∑–¥–∞—ë–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –Ω–∞ GDrive
    if not dry_run and service:
        root_folder_id = create_gdrive_folder(service, GDRIVE_FOLDER)
        videos_folder_id = create_gdrive_folder(
            service, 'videos', root_folder_id
        )
        photos_folder_id = create_gdrive_folder(
            service, 'photos', root_folder_id
        )
    
    # –°—á—ë—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    category_counters = defaultdict(lambda: {'video': 0, 'photo': 0})
    category_folders = {}
    
    # –õ–æ–≥ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π
    rename_log = []
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
    print("\nüìπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ...")
    for i, video_path in enumerate(videos[:50]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
        filename = video_path.name
        category = categorize_file(filename, rules)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
        category_counters[category]['video'] += 1
        counter = category_counters[category]['video']
        
        # –ù–æ–≤–æ–µ –∏–º—è
        new_name = f"{category}_{counter:03d}{video_path.suffix}"
        new_rel_path = f"videos/{category}/{new_name}"
        
        # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ GDrive
        if not dry_run and service and category not in category_folders:
            cat_folder_id = create_gdrive_folder(
                service, category, videos_folder_id
            )
            category_folders[f"video_{category}"] = cat_folder_id
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        temp_file = temp_path / new_rel_path
        if not dry_run:
            temp_file.parent.mkdir(parents=True, exist_ok=True)
            try:
                shutil.copy2(video_path, temp_file)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ GDrive
                if service:
                    upload_to_gdrive(
                        service, 
                        str(temp_file),
                        new_name,
                        category_folders[f"video_{category}"]
                    )
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å —Ñ–∞–π–ª–æ–º {filename}: {e}")
                continue
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        rename_log.append({
            'old_name': str(video_path),
            'new_name': new_rel_path,
            'category': category,
            'type': 'video'
        })
        
        print(f"  ‚úì {filename} ‚Üí {new_rel_path}")
        
        if i > 0 and i % 10 == 0:
            print(f"    –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i+1} –∏–∑ {len(videos)} –≤–∏–¥–µ–æ...")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
    print(f"\nüì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ...")
    for i, photo_path in enumerate(photos[:100]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
        filename = photo_path.name
        category = categorize_file(filename, rules)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
        category_counters[category]['photo'] += 1
        counter = category_counters[category]['photo']
        
        # –ù–æ–≤–æ–µ –∏–º—è
        new_name = f"{category}_{counter:03d}{photo_path.suffix}"
        new_rel_path = f"photos/{category}/{new_name}"
        
        # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ GDrive
        if not dry_run and service and f"photo_{category}" not in category_folders:
            cat_folder_id = create_gdrive_folder(
                service, category, photos_folder_id
            )
            category_folders[f"photo_{category}"] = cat_folder_id
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        temp_file = temp_path / new_rel_path
        if not dry_run:
            temp_file.parent.mkdir(parents=True, exist_ok=True)
            try:
                shutil.copy2(photo_path, temp_file)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ GDrive
                if service:
                    upload_to_gdrive(
                        service,
                        str(temp_file),
                        new_name,
                        category_folders[f"photo_{category}"]
                    )
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å —Ñ–∞–π–ª–æ–º {filename}: {e}")
                continue
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        rename_log.append({
            'old_name': str(photo_path),
            'new_name': new_rel_path,
            'category': category,
            'type': 'photo'
        })
        
        print(f"  ‚úì {filename} ‚Üí {new_rel_path}")
        
        if i > 0 and i % 20 == 0:
            print(f"    –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i+1} –∏–∑ {len(photos)} —Ñ–æ—Ç–æ...")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è—é –ª–æ–≥ –≤ {LOG_FILE}...")
    with open(LOG_FILE, 'w', newline='', encoding='utf-8') as csvfile:
        fieldnames = ['old_name', 'new_name', 'category', 'type']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(rename_log)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    for category in sorted(category_counters.keys()):
        counts = category_counters[category]
        print(f"  {category:20} - "
              f"–≤–∏–¥–µ–æ: {counts['video']:4}, "
              f"—Ñ–æ—Ç–æ: {counts['photo']:4}")
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    if not dry_run and temp_path.exists():
        shutil.rmtree(temp_path)
        print(f"\nüßπ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ {TEMP_DIR} –æ—á–∏—â–µ–Ω–∞")
    
    if not dry_run and service:
        print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ GDrive/{GDRIVE_FOLDER}/")
    else:
        print(f"\n‚úÖ –°—É—Ö–æ–π –ø—Ä–æ–≥–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω. –°–æ–∑–¥–∞–Ω –ª–æ–≥ {LOG_FILE}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(
        description='–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞ –Ω–∞ Google Drive'
    )
    parser.add_argument(
        '--source',
        default='/Volumes/fitnes ai/',
        help='–ü—É—Ç—å –∫ –¥–∏—Å–∫—É —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏'
    )
    parser.add_argument(
        '--categories',
        default=CATEGORIES_FILE,
        help='–§–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏'
    )
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏'
    )
    
    args = parser.parse_args()
    
    print("üöÄ AI Fitness Media Organizer")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞
    print(f"üìã –ó–∞–≥—Ä—É–∂–∞—é –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ {args.categories}...")
    rules = load_categories(args.categories)
    print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(rules)} –ø—Ä–∞–≤–∏–ª")
    
    if args.dry_run:
        print("\n‚ö†Ô∏è  –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - —Ñ–∞–π–ª—ã –Ω–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        service = None
    else:
        try:
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            print("\nüîê –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ Google Drive...")
            service = authenticate_gdrive()
            print("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Drive: {e}")
            print("–ó–∞–ø—É—Å–∫–∞—é –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...")
            service = None
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞
    process_media(args.source, rules, service, args.dry_run or service is None)


if __name__ == '__main__':
    main()