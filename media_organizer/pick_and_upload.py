#!/usr/bin/env python3
"""
AI-Fitness Media Picker & Uploader v2
–°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ —Å –¥–∏—Å–∫–∞ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤ Google Drive
"""

import argparse
import csv
import mimetypes
import os
import random
import sys
from collections import defaultdict
from pathlib import Path
from typing import Dict, List, Set, Tuple

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è Google API
try:
    from google.auth.transport.requests import Request
    from google.oauth2.credentials import Credentials
    from google_auth_oauthlib.flow import InstalledAppFlow
    from googleapiclient.discovery import build
    from googleapiclient.errors import HttpError
    from googleapiclient.http import MediaFileUpload
except ImportError:
    print("‚ùå Google API –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install google-api-python-client google-auth-httplib2 google-auth-oauthlib")
    sys.exit(1)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
#  1. –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ö–û–ù–°–¢–ê–ù–¢–´
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #

SOURCE_DIR = "/Volumes/fitnes ai/"
GDRIVE_ROOT = "ai_fitness_media"
ARCHETYPES = ["wise_mentor", "best_mate", "pro_coach"]

EXERCISE_FILE = "exercises.csv"

VIDEO_TARGETS = {
    "technique": 147,                               # 1√ó –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    "instruction": 147 * len(ARCHETYPES),           # 3√ó –∞—Ä—Ö–µ—Ç–∏–ø-–∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ = 441
    "mistake": 147,                                 # 1√ó ¬´–æ—à–∏–±–∫–∏¬ª (–æ–ø—Ü.)
    "reminder": 147 * len(ARCHETYPES) * 3,          # 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π = 1323
    "weekly": 12 * len(ARCHETYPES),                 # 36
    "final": 1 * len(ARCHETYPES)                    # 3
}

IMAGE_TARGETS = {
    "avatars": 9,                                   # 3 –∞—Ä—Ö–µ—Ç–∏–ø–∞ √ó 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞
    "cards": 600,                                   # –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
}

# –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
VIDEO_EXTS = {".mp4", ".mov", ".avi", ".mkv", ".webm"}
IMAGE_EXTS = {".jpg", ".jpeg", ".png", ".webp"}

# Google Drive API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
SCOPES = ['https://www.googleapis.com/auth/drive.file']
TOKEN_FILE = 'token.json'
CREDENTIALS_FILE = 'credentials.json'

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_FILE = 'rename_log.csv'


def load_exercises(file_path: str) -> List[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç slug-–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ CSV —Ñ–∞–π–ª–∞."""
    exercises = []
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        sys.exit(1)
    
    with open(file_path, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            exercises.append(row['slug'])
    
    print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(exercises)} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ {file_path}")
    return exercises


def authenticate_gdrive():
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Google Drive API."""
    creds = None
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
    if os.path.exists(TOKEN_FILE):
        creds = Credentials.from_authorized_user_file(TOKEN_FILE, SCOPES)
    
    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            if not os.path.exists(CREDENTIALS_FILE):
                print(f"‚ùå –§–∞–π–ª {CREDENTIALS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                print("–°–∫–∞—á–∞–π—Ç–µ OAuth credentials —Å Google Cloud Console")
                return None
                
            flow = InstalledAppFlow.from_client_secrets_file(
                CREDENTIALS_FILE, SCOPES
            )
            creds = flow.run_local_server(port=0)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
        with open(TOKEN_FILE, 'w') as token:
            token.write(creds.to_json())
    
    return build('drive', 'v3', credentials=creds)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
#  2. –õ–û–ì–ò–ö–ê –í–´–ë–û–†–ê –§–ê–ô–õ–û–í
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #

def scan_source_files(source_dir: str) -> Tuple[Dict[str, List[Path]], 
                                                Dict[str, List[Path]]]:
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –ø–æ —Ç–∏–ø–∞–º."""
    video_candidates = defaultdict(list)
    image_candidates = defaultdict(list)
    
    source_path = Path(source_dir)
    if not source_path.exists():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {source_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        sys.exit(1)
    
    print(f"üìÇ –°–∫–∞–Ω–∏—Ä—É—é {source_dir}...")
    
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã
    for file_path in source_path.rglob('*'):
        if not file_path.is_file():
            continue
            
        ext = file_path.suffix.lower()
        name_lower = file_path.name.lower()
        parent_name_lower = file_path.parent.name.lower()
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ
        if ext in VIDEO_EXTS:
            if any(word in name_lower for word in ['technique', 'tech']):
                video_candidates['technique'].append(file_path)
            elif any(word in name_lower for word in ['instruction', 'instr']):
                video_candidates['instruction'].append(file_path)
            elif any(word in name_lower for word in ['mistake', 'error', 'wrong']):
                video_candidates['mistake'].append(file_path)
            elif any(word in name_lower for word in ['reminder', 'remind']):
                video_candidates['reminder'].append(file_path)
            elif any(word in name_lower for word in ['weekly', 'week']):
                video_candidates['weekly'].append(file_path)
            elif any(word in name_lower for word in ['final', 'complete']):
                video_candidates['final'].append(file_path)
            else:
                # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ —Å—á–∏—Ç–∞–µ–º technique (—Ç–µ—Ö–Ω–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
                video_candidates['technique'].append(file_path)
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        elif ext in IMAGE_EXTS:
            if any(word in name_lower for word in ['avatar', 'profile']):
                image_candidates['avatars'].append(file_path)
            elif any(word in parent_name_lower for word in ['avatar', 'profile']):
                image_candidates['avatars'].append(file_path)
            elif any(word in name_lower for word in ['card', 'motivation', 'quote', 'inspire']):
                image_candidates['cards'].append(file_path)
            elif any(word in parent_name_lower for word in ['card', 'motivation', 'quote']):
                image_candidates['cards'].append(file_path)
            elif any(word in name_lower for word in ['story', 'cover']):
                image_candidates['stories'].append(file_path)
            elif any(word in parent_name_lower for word in ['story', 'stories']):
                image_candidates['stories'].append(file_path)
            else:
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å—á–∏—Ç–∞–µ–º cards
                image_candidates['cards'].append(file_path)
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    for category, files in video_candidates.items():
        print(f"  üìπ {category}: {len(files)} –≤–∏–¥–µ–æ")
    for category, files in image_candidates.items():
        print(f"  üì∑ {category}: {len(files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    return dict(video_candidates), dict(image_candidates)


def pick_random_files(candidates: Dict[str, List[Path]], 
                     targets: Dict[str, int]) -> Dict[str, List[Path]]:
    """–°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    selected = {}
    
    for category, target_count in targets.items():
        available = candidates.get(category, [])
        
        if len(available) < target_count:
            print(f"‚ö†Ô∏è  {category}: –Ω—É–∂–Ω–æ {target_count}, "
                  f"–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(available)}")
            selected[category] = available
        else:
            # –°–ª—É—á–∞–π–Ω–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ N
            random.shuffle(available)
            selected[category] = available[:target_count]
            print(f"‚úì {category}: –≤—ã–±—Ä–∞–Ω–æ {target_count} –∏–∑ {len(available)}")
    
    return selected


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
#  3. –®–ê–ë–õ–û–ù–´ –ù–û–í–´–• –ò–ú–Å–ù
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #

def generate_new_name(file_path: Path, category: str, 
                     exercises: List[str], counters: Dict) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –ø–æ —à–∞–±–ª–æ–Ω–∞–º."""
    ext = file_path.suffix.lower()
    
    # –î–ª—è –≤–∏–¥–µ–æ
    if category == "technique":
        slug = random.choice(exercises)
        return f"videos/exercises/{slug}_technique_m01{ext}"
    
    elif category == "instruction":
        slug = random.choice(exercises)
        archetype = random.choice(ARCHETYPES)
        return f"videos/instructions/{slug}_instruction_{archetype}_m01{ext}"
    
    elif category == "mistake":
        slug = random.choice(exercises)
        return f"videos/exercises/{slug}_mistake_m01{ext}"
    
    elif category == "reminder":
        slug = random.choice(exercises)
        archetype = random.choice(ARCHETYPES)
        reminder_num = (counters[f"reminder_{archetype}_{slug}"] % 3) + 1
        return f"videos/reminders/{slug}_reminder_{archetype}_{reminder_num:02d}{ext}"
    
    elif category == "weekly":
        archetype = random.choice(ARCHETYPES)
        week_num = (counters[f"weekly_{archetype}"] % 12) + 1
        return f"videos/motivation/weekly_{archetype}_week{week_num:02d}{ext}"
    
    elif category == "final":
        archetype = random.choice(ARCHETYPES)
        return f"videos/motivation/final_{archetype}{ext}"
    
    # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    elif category == "avatars":
        archetype = random.choice(ARCHETYPES)
        avatar_num = (counters[f"avatar_{archetype}"] % 3) + 1
        return f"images/avatars/{archetype}_avatar_{avatar_num:02d}{ext}"
    
    elif category == "cards":
        card_num = counters.get("cards", 0) + 1
        card_category = random.choice(['motivation', 'progress', 'success', 'challenge'])
        return f"images/cards/card_{card_category}_{card_num:05d}{ext}"
    
    elif category == "stories":
        # –î–ª—è stories —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è
        return f"images/stories/{file_path.name}"
    
    return f"misc/{file_path.name}"


def create_gdrive_folder(service, name: str, parent_id: str = None) -> str:
    """–°–æ–∑–¥–∞—ë—Ç –ø–∞–ø–∫—É –Ω–∞ Google Drive –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π."""
    file_metadata = {
        'name': name,
        'mimeType': 'application/vnd.google-apps.folder'
    }
    
    if parent_id:
        file_metadata['parents'] = [parent_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    query = f"name='{name}' and mimeType='application/vnd.google-apps.folder'"
    if parent_id:
        query += f" and '{parent_id}' in parents"
    else:
        query += " and 'root' in parents"
    
    results = service.files().list(q=query, fields="files(id, name)").execute()
    items = results.get('files', [])
    
    if items:
        return items[0]['id']
    else:
        folder = service.files().create(body=file_metadata, fields='id').execute()
        return folder.get('id')


def upload_to_gdrive(service, local_path: Path, gdrive_path: str, 
                    parent_id: str) -> bool:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ Google Drive."""
    file_name = Path(gdrive_path).name
    
    # MIME-—Ç–∏–ø
    mime_type, _ = mimetypes.guess_type(str(local_path))
    if not mime_type:
        mime_type = 'application/octet-stream'
    
    file_metadata = {
        'name': file_name,
        'parents': [parent_id]
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    query = f"name='{file_name}' and '{parent_id}' in parents"
    results = service.files().list(q=query, fields="files(id)").execute()
    items = results.get('files', [])
    
    try:
        media = MediaFileUpload(str(local_path), mimetype=mime_type, resumable=True)
        
        if items:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
            file_id = items[0]['id']
            service.files().update(fileId=file_id, media_body=media).execute()
        else:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
            service.files().create(body=file_metadata, media_body=media).execute()
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_name}: {e}")
        return False


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
#  4. –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #

def setup_gdrive_structure(service) -> Dict[str, str]:
    """–°–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –Ω–∞ Google Drive."""
    folder_ids = {}
    
    # –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞
    root_id = create_gdrive_folder(service, GDRIVE_ROOT)
    folder_ids['root'] = root_id
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–ø–∫–∏
    videos_id = create_gdrive_folder(service, 'videos', root_id)
    images_id = create_gdrive_folder(service, 'images', root_id)
    
    folder_ids['videos'] = videos_id
    folder_ids['images'] = images_id
    
    # –ü–æ–¥–ø–∞–ø–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ
    folder_ids['videos/exercises'] = create_gdrive_folder(service, 'exercises', videos_id)
    folder_ids['videos/instructions'] = create_gdrive_folder(service, 'instructions', videos_id)
    folder_ids['videos/reminders'] = create_gdrive_folder(service, 'reminders', videos_id)
    folder_ids['videos/motivation'] = create_gdrive_folder(service, 'motivation', videos_id)
    
    # –ü–æ–¥–ø–∞–ø–∫–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    folder_ids['images/avatars'] = create_gdrive_folder(service, 'avatars', images_id)
    folder_ids['images/cards'] = create_gdrive_folder(service, 'cards', images_id)
    folder_ids['images/stories'] = create_gdrive_folder(service, 'stories', images_id)
    
    print("‚úì –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ –Ω–∞ Google Drive —Å–æ–∑–¥–∞–Ω–∞")
    return folder_ids


def process_files(selected_videos: Dict[str, List[Path]], 
                 selected_images: Dict[str, List[Path]],
                 exercises: List[str], 
                 service=None, 
                 dry_run: bool = False) -> List[Dict]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã - –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç."""
    
    log_entries = []
    counters = defaultdict(int)
    
    if service and not dry_run:
        folder_ids = setup_gdrive_structure(service)
    else:
        folder_ids = {}
    
    print("\nüìπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤...")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
    for category, files in selected_videos.items():
        print(f"\n  {category.upper()}: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(files)} —Ñ–∞–π–ª–æ–≤")
        
        for i, file_path in enumerate(files):
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏
            if category == "reminder":
                slug = random.choice(exercises)
                archetype = random.choice(ARCHETYPES)
                key = f"reminder_{archetype}_{slug}"
                counters[key] += 1
            elif category == "weekly":
                archetype = random.choice(ARCHETYPES)
                counters[f"weekly_{archetype}"] += 1
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è
            new_path = generate_new_name(file_path, category, exercises, counters)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É
            folder_key = str(Path(new_path).parent)
            parent_id = folder_ids.get(folder_key)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ Drive (–µ—Å–ª–∏ –Ω–µ dry-run)
            uploaded = True
            if service and not dry_run and parent_id:
                uploaded = upload_to_gdrive(service, file_path, new_path, parent_id)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥
            log_entries.append({
                'old_path': str(file_path),
                'new_rel_path': new_path,
                'type': 'video',
                'subtype': category,
                'archetype_slug': 'various',
                'picked': uploaded
            })
            
            if (i + 1) % 50 == 0:
                print(f"    –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i + 1} –∏–∑ {len(files)}")
    
    print("\nüì∑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    for category, files in selected_images.items():
        print(f"\n  {category.upper()}: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(files)} —Ñ–∞–π–ª–æ–≤")
        
        for i, file_path in enumerate(files):
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏
            if category == "avatars":
                archetype = random.choice(ARCHETYPES)
                counters[f"avatar_{archetype}"] += 1
            elif category == "cards":
                counters["cards"] += 1
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è
            new_path = generate_new_name(file_path, category, exercises, counters)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É
            folder_key = str(Path(new_path).parent)
            parent_id = folder_ids.get(folder_key)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ Drive (–µ—Å–ª–∏ –Ω–µ dry-run)
            uploaded = True
            if service and not dry_run and parent_id:
                uploaded = upload_to_gdrive(service, file_path, new_path, parent_id)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥
            log_entries.append({
                'old_path': str(file_path),
                'new_rel_path': new_path,
                'type': 'image',
                'subtype': category,
                'archetype_slug': 'various',
                'picked': uploaded
            })
            
            if (i + 1) % 100 == 0:
                print(f"    –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i + 1} –∏–∑ {len(files)}")
    
    return log_entries


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
#  5. –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ò –û–¢–ß–Å–¢–´
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #

def save_log(log_entries: List[Dict], log_file: str = LOG_FILE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥ –≤ CSV."""
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è—é –ª–æ–≥ –≤ {log_file}...")
    
    with open(log_file, 'w', newline='', encoding='utf-8') as csvfile:
        fieldnames = ['old_path', 'new_rel_path', 'type', 'subtype', 
                     'archetype_slug', 'picked']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(log_entries)


def print_summary(selected_videos: Dict[str, List[Path]], 
                 selected_images: Dict[str, List[Path]]):
    """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É."""
    print("\nüìä –°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê:")
    print("=" * 50)
    
    # –í–∏–¥–µ–æ
    total_videos = 0
    for category, target in VIDEO_TARGETS.items():
        selected_count = len(selected_videos.get(category, []))
        total_videos += selected_count
        status = "‚úì" if selected_count == target else "‚ö†Ô∏è"
        print(f"{status} {category:12} {selected_count:4}/{target:4}")
    
    print(f"   {'–í–°–ï–ì–û –í–ò–î–ï–û':12} {total_videos:4}")
    print()
    
    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    total_images = 0
    for category, target in IMAGE_TARGETS.items():
        selected_count = len(selected_images.get(category, []))
        total_images += selected_count
        status = "‚úì" if selected_count == target else "‚ö†Ô∏è"
        print(f"{status} {category:12} {selected_count:4}/{target:4}")
    
    # Stories –æ—Ç–¥–µ–ª—å–Ω–æ (–±–µ–∑ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
    stories_count = len(selected_images.get('stories', []))
    if stories_count > 0:
        print(f"‚úì {'stories':12} {stories_count:4}/–≤—Å–µ")
    
    total_images += stories_count
    print(f"   {'–í–°–ï–ì–û –§–û–¢–û':12} {total_images:4}")
    print("=" * 50)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
#  6. MAIN
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(
        description='AI-Fitness Media Picker & Uploader v2'
    )
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Google Drive'
    )
    parser.add_argument(
        '--source',
        default=SOURCE_DIR,
        help='–ü—É—Ç—å –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤'
    )
    
    args = parser.parse_args()
    
    print("üöÄ AI-Fitness Media Picker & Uploader v2")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    exercises = load_exercises(EXERCISE_FILE)
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Drive
    service = None
    if not args.dry_run:
        print("\nüîê –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ Google Drive...")
        service = authenticate_gdrive()
        if service:
            print("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Drive —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Drive, –∑–∞–ø—É—Å–∫–∞—é –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
            args.dry_run = True
    
    if args.dry_run:
        print("‚ö†Ô∏è  –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - —Ñ–∞–π–ª—ã –Ω–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
    video_candidates, image_candidates = scan_source_files(args.source)
    
    # –î–æ–±–∞–≤–ª—è–µ–º stories –∫ —Ü–µ–ª—è–º (–≤—Å–µ —á—Ç–æ –Ω–∞–π–¥—ë–º)
    stories_count = len(image_candidates.get('stories', []))
    if stories_count > 0:
        IMAGE_TARGETS['stories'] = stories_count
    
    # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤
    print(f"\nüé≤ –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤...")
    random.seed()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
    
    selected_videos = pick_random_files(video_candidates, VIDEO_TARGETS)
    selected_images = pick_random_files(image_candidates, IMAGE_TARGETS)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
    log_entries = process_files(
        selected_videos, selected_images, exercises, service, args.dry_run
    )
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–∞
    save_log(log_entries)
    
    # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    print_summary(selected_videos, selected_images)
    
    if args.dry_run:
        print(f"\n‚úÖ –°—É—Ö–æ–π –ø—Ä–æ–≥–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω. –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {LOG_FILE}")
    else:
        print(f"\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –§–∞–π–ª—ã –≤ Google Drive/{GDRIVE_ROOT}/")
        print(f"   –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π: {LOG_FILE}")


if __name__ == '__main__':
    main()