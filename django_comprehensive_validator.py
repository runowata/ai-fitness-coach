#!/usr/bin/env python3
"""
DJANGO-–°–ü–ï–¶–ò–§–ò–ß–ù–´–ô –í–ê–õ–ò–î–ê–¢–û–†
–ò—â–µ—Ç –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ Exercise –º–æ–¥–µ–ª—å –≤ Django –∫–æ–¥–µ
"""
import os
import re
import ast
import sys
from pathlib import Path
from typing import List, Dict, Tuple

class DjangoComprehensiveValidator:
    def __init__(self, project_root: str):
        self.project_root = Path(project_root)
        
    def get_production_files(self) -> List[Path]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        python_files = []
        
        exclude_dirs = {'.venv', 'venv', '.git', '__pycache__', 'node_modules', 'env'}
        exclude_files = {
            'comprehensive_legacy_validator.py', 'mass_exercise_refactor.py', 
            'final_validation_accurate.py', 'production_final_validator.py',
            'django_comprehensive_validator.py'
        }
        
        for root, dirs, files in os.walk(self.project_root):
            dirs[:] = [d for d in dirs if d not in exclude_dirs and 'backup' not in d.lower()]
            
            for file in files:
                if file.endswith('.py') and file not in exclude_files:
                    file_path = Path(root) / file
                    if not any('backup' in part.lower() for part in file_path.parts):
                        python_files.append(file_path)
        
        return python_files
    
    def check_all_django_exercise_references(self, content: str, file_path: Path) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ Django —Å—Å—ã–ª–∫–∏ –Ω–∞ Exercise"""
        issues = []
        
        # 1. Direct model imports
        if re.search(r'from\s+apps\.workouts\.models\s+import\s+.*\bExercise\b(?!Validation)', content):
            issues.append("‚ùå Direct Exercise model import")
        
        # 2. Exercise.objects –∏ Exercise.DoesNotExist
        if re.search(r'\bExercise\.objects\b', content):
            issues.append("‚ùå Exercise.objects usage")
        if re.search(r'\bExercise\.DoesNotExist\b', content):
            issues.append("‚ùå Exercise.DoesNotExist usage")
        
        # 3. STRING REFERENCES - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ!
        if re.search(r'[\'"]workouts\.Exercise[\'"]', content):
            issues.append("‚ùå String reference 'workouts.Exercise' (ForeignKey/admin)")
        
        # 4. Admin registration
        if re.search(r'admin\.site\.register\s*\(\s*Exercise\b', content):
            issues.append("‚ùå Admin registration of Exercise")
        if re.search(r'@admin\.register\s*\(\s*Exercise\b', content):
            issues.append("‚ùå Admin decorator registration of Exercise")
        
        # 5. ContentType references
        if re.search(r'ContentType.*Exercise', content):
            issues.append("‚ùå ContentType reference to Exercise")
        
        # 6. Serializer references
        if re.search(r'model\s*=\s*Exercise\b', content):
            issues.append("‚ùå Serializer model = Exercise")
        
        # 7. Exercise() –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        if re.search(r'\bExercise\s*\(', content):
            issues.append("‚ùå Exercise() constructor")
        
        # 8. Migration references
        if re.search(r'workouts_exercise', content) and 'migrations' in str(file_path):
            issues.append("‚ö†Ô∏è Migration table reference 'workouts_exercise'")
        
        # 9. Test fixtures/factories
        if re.search(r'class\s+\w*Exercise\w*Factory', content):
            issues.append("‚ùå Exercise factory class")
        
        return issues
    
    def run_comprehensive_validation(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é Django-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é"""
        print("üîç DJANGO-–°–ü–ï–¶–ò–§–ò–ß–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø EXERCISE –°–°–´–õ–û–ö")
        print("=" * 60)
        
        production_files = self.get_production_files()
        print(f"üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è {len(production_files)} —Ñ–∞–π–ª–æ–≤")
        
        all_issues = []
        problematic_files = []
        
        for file_path in production_files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ Django-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                issues = self.check_all_django_exercise_references(content, file_path)
                
                if issues:
                    all_issues.extend(issues)
                    problematic_files.append((file_path, issues))
                    
            except Exception as e:
                all_issues.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ DJANGO-–í–ê–õ–ò–î–ê–¶–ò–ò:")
        
        if not all_issues:
            print("‚úÖ –û–¢–õ–ò–ß–ù–û: –ù–∏–∫–∞–∫–∏—Ö Exercise —Å—Å—ã–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            print("‚úÖ Django –∞–¥–º–∏–Ω –±–µ–∑–æ–ø–∞—Å–µ–Ω")
            print("‚úÖ –í—Å–µ ForeignKey –∏—Å–ø–æ–ª—å–∑—É—é—Ç CSVExercise")
            print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
            print("\nüéâ DJANGO –ì–û–¢–û–í –ö –î–ï–ü–õ–û–Æ!")
            return True
        else:
            print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {len(all_issues)} –ø—Ä–æ–±–ª–µ–º –≤ {len(problematic_files)} —Ñ–∞–π–ª–∞—Ö:")
            
            for file_path, issues in problematic_files:
                print(f"\nüìÑ {file_path}:")
                for issue in issues:
                    print(f"   {issue}")
            
            return False
    
    def create_django_fix_script(self):
        """–°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Django —Å—Å—ã–ª–æ–∫"""
        fix_script = '''#!/usr/bin/env python3
"""
DJANGO FIX SCRIPT - –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ Django-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ Exercise
"""
import os
import re
from pathlib import Path

def fix_django_references():
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ Django —Å—Å—ã–ª–∫–∏ –Ω–∞ Exercise"""
    
    fixes_applied = 0
    
    for root, dirs, files in os.walk('.'):
        dirs[:] = [d for d in dirs if 'backup' not in d.lower() and d not in {'.venv', '.git'}]
        
        for file in files:
            if file.endswith('.py'):
                file_path = Path(root) / file
                
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    original_content = content
                    
                    # Fix 1: String ForeignKey references
                    content = re.sub(r"'workouts\\.Exercise'", "'workouts.CSVExercise'", content)
                    content = re.sub(r'"workouts\\.Exercise"', '"workouts.CSVExercise"', content)
                    
                    # Fix 2: Admin references
                    content = re.sub(r'admin\\.site\\.register\\s*\\(\\s*Exercise\\b', 'admin.site.register(CSVExercise', content)
                    content = re.sub(r'@admin\\.register\\s*\\(\\s*Exercise\\b', '@admin.register(CSVExercise', content)
                    
                    # Fix 3: Direct imports
                    content = re.sub(r'from\\s+apps\\.workouts\\.models\\s+import\\s+(.*?)\\bExercise\\b', 
                                   r'from apps.workouts.models import \\1CSVExercise', content)
                    
                    # Fix 4: Serializer model references
                    content = re.sub(r'model\\s*=\\s*Exercise\\b', 'model = CSVExercise', content)
                    
                    if content != original_content:
                        with open(file_path, 'w', encoding='utf-8') as f:
                            f.write(content)
                        fixes_applied += 1
                        print(f"‚úÖ Fixed: {file_path}")
                        
                except Exception as e:
                    print(f"‚ùå Error fixing {file_path}: {e}")
    
    print(f"\\nüéâ Applied fixes to {fixes_applied} files")

if __name__ == '__main__':
    fix_django_references()
'''
        
        with open(self.project_root / 'django_fix_script.py', 'w') as f:
            f.write(fix_script)
        
        print("üìù –°–æ–∑–¥–∞–Ω django_fix_script.py –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

def main():
    validator = DjangoComprehensiveValidator(os.getcwd())
    success = validator.run_comprehensive_validation()
    
    if not success:
        print("\nüõ†Ô∏è –°–æ–∑–¥–∞—é —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
        validator.create_django_fix_script()
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python django_fix_script.py")
    
    return 0 if success else 1

if __name__ == '__main__':
    sys.exit(main())