#!/usr/bin/env python3
"""
–†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô –í–ê–õ–ò–î–ê–¢–û–† LEGACY –ö–û–î–ê
–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ Exercise –º–æ–¥–µ–ª–∏
"""
import ast
import os
import sys
import importlib
from pathlib import Path
from typing import List, Dict, Set, Tuple
import subprocess


class ComprehensiveLegacyValidator:
    def __init__(self, project_root: str):
        self.project_root = Path(project_root)
        self.python_files = []
        self.errors = []
        self.warnings = []
        self.legacy_patterns = {
            # –°—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            'forbidden_imports': [
                'from apps.workouts.models import CSVExercise',
                'from .models import CSVExercise', 
                'import Exercise',
            ],
            'forbidden_references': [
                'CSVExercise.objects',
                'CSVExercise.DoesNotExist',
                'CSVExercise(',
                'Exercise.Meta',
                '# @admin.register(Exercise) - REMOVED in Phase 5.6',
            ],
            'forbidden_fields': [
                'muscle_groups',
                'equipment_needed', 
                # 'alternatives' - —É–¥–∞–ª–µ–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å false positives –≤ validator
            ],
            # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (—Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏)
            'suspicious_patterns': [
                'muscle_group[^_s]',  # muscle_group –Ω–æ –Ω–µ muscle_groups –∏–ª–∏ muscle_group_count
                'equipment.*need',
                'alternative.*relationship',
                'Exercise[^V]',  # Exercise –Ω–æ –Ω–µ ExerciseValidation
            ]
        }
        
    def scan_all_python_files(self):
        """–ù–∞–π—Ç–∏ –≤—Å–µ Python —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
        print("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö Python —Ñ–∞–π–ª–æ–≤...")
        
        exclude_dirs = {'.venv', 'venv', '.git', '__pycache__', 'node_modules', 'env'}
        
        for root, dirs, files in os.walk(self.project_root):
            # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            dirs[:] = [d for d in dirs if d not in exclude_dirs]
            
            for file in files:
                if file.endswith('.py'):
                    file_path = Path(root) / file
                    self.python_files.append(file_path)
                    
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(self.python_files)} Python —Ñ–∞–π–ª–æ–≤")
        return self.python_files
    
    def validate_syntax(self) -> List[Tuple[str, str]]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤—Å–µ—Ö Python —Ñ–∞–π–ª–æ–≤"""
        print("\nüîç –°–ò–ù–¢–ê–ö–°–ò–ß–ï–°–ö–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø...")
        syntax_errors = []
        
        for file_path in self.python_files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    code = f.read()
                    
                ast.parse(code, filename=str(file_path))
                
            except SyntaxError as e:
                error_msg = f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: —Å—Ç—Ä–æ–∫–∞ {e.lineno}: {e.msg}"
                syntax_errors.append((str(file_path), error_msg))
                print(f"‚ùå {file_path}: {error_msg}")
                
            except UnicodeDecodeError as e:
                error_msg = f"–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏: {e}"
                syntax_errors.append((str(file_path), error_msg))
                print(f"‚ùå {file_path}: {error_msg}")
                
        if not syntax_errors:
            print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
            
        return syntax_errors
    
    def analyze_ast_imports(self) -> Dict[str, List[str]]:
        """–ê–Ω–∞–ª–∏–∑ AST –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
        print("\nüîç AST –ê–ù–ê–õ–ò–ó –ò–ú–ü–û–†–¢–û–í...")
        import_analysis = {}
        forbidden_found = []
        
        for file_path in self.python_files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    code = f.read()
                
                tree = ast.parse(code, filename=str(file_path))
                imports = []
                
                for node in ast.walk(tree):
                    if isinstance(node, ast.Import):
                        for alias in node.names:
                            imports.append(f"import {alias.name}")
                            
                    elif isinstance(node, ast.ImportFrom):
                        module = node.module or ""
                        for alias in node.names:
                            imports.append(f"from {module} import {alias.name}")
                
                import_analysis[str(file_path)] = imports
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
                for imp in imports:
                    for forbidden in self.legacy_patterns['forbidden_imports']:
                        if forbidden in imp:
                            forbidden_found.append((str(file_path), imp))
                            print(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {file_path}")
                            print(f"   –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç: {imp}")
                            
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ AST {file_path}: {e}")
                
        if not forbidden_found:
            print("‚úÖ –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
        return import_analysis
    
    def search_forbidden_patterns(self) -> Dict[str, List[Tuple[int, str]]]:
        """–ü–æ–∏—Å–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –∫–æ–¥–µ"""
        print("\nüîç –ü–û–ò–°–ö –ó–ê–ü–†–ï–©–Å–ù–ù–´–• –ü–ê–¢–¢–ï–†–ù–û–í...")
        violations = {}
        
        for file_path in self.python_files:
            file_violations = []
            
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                
                for line_num, line in enumerate(lines, 1):
                    line_clean = line.strip()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
                    for forbidden in self.legacy_patterns['forbidden_references']:
                        if forbidden in line_clean and not line_clean.startswith('#'):
                            file_violations.append((line_num, f"–ó–∞–ø—Ä–µ—â—ë–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞: {forbidden}"))
                            print(f"üö® {file_path}:{line_num} - {forbidden}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –ø–æ–ª—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)
                    if not line_clean.startswith('#'):
                        for field in self.legacy_patterns['forbidden_fields']:
                            if field in line_clean:
                                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                                if self._is_legacy_field_usage(line_clean, field):
                                    file_violations.append((line_num, f"–ó–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ –ø–æ–ª–µ: {field}"))
                                    print(f"üö® {file_path}:{line_num} - –ø–æ–ª–µ {field}")
            
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
                
            if file_violations:
                violations[str(file_path)] = file_violations
                
        if not violations:
            print("‚úÖ –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
        return violations
    
    def _is_legacy_field_usage(self, line: str, field: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è legacy"""
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
        if line.startswith('#'):
            return False
            
        if field == 'muscle_groups':
            # –î–æ–ø—É—Å—Ç–∏–º–æ: muscle_group_count, muscle_group_distribution
            if 'muscle_group_count' in line or 'muscle_group_distribution' in line:
                return False
            # –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ: –ø—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ muscle_groups
            return 'muscle_groups' in line
            
        elif field == 'equipment_needed':
            # –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ –ª—é–±–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            return True
            
        # elif field == 'alternatives':
        #     # –î–æ–ø—É—Å—Ç–∏–º–æ: —Ñ—É–Ω–∫—Ü–∏–∏ alternatives, get_alternatives
        #     # –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ: –ø–æ–ª–µ –º–æ–¥–µ–ª–∏ .alternatives  
        #     return '.alternatives' in line or 'alternatives=' in line
            
        return True
    
    def test_django_imports(self) -> List[str]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Django –∏–º–ø–æ—Ä—Ç–æ–≤"""
        print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï DJANGO –ò–ú–ü–û–†–¢–û–í...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Django –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings_sqlite')
        
        try:
            import django
            django.setup()
            print("‚úÖ Django setup —É—Å–ø–µ—à–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Django setup: {e}")
            return [f"Django setup failed: {e}"]
        
        import_errors = []
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã
        critical_imports = [
            'apps.workouts.models.CSVExercise',
            'apps.workouts.models.VideoClip', 
            'apps.workouts.models.WorkoutPlan',
            'apps.ai_integration.fallback_service.FallbackService',
            'apps.core.services.exercise_validation.ExerciseValidationService'
        ]
        
        for module_path in critical_imports:
            try:
                module_parts = module_path.split('.')
                module_name = '.'.join(module_parts[:-1])
                class_name = module_parts[-1]
                
                module = importlib.import_module(module_name)
                getattr(module, class_name)
                
                print(f"‚úÖ {module_path}")
                
            except ImportError as e:
                error_msg = f"Import failed: {module_path} - {e}"
                import_errors.append(error_msg)
                print(f"‚ùå {error_msg}")
                
            except AttributeError as e:
                error_msg = f"Class not found: {module_path} - {e}"
                import_errors.append(error_msg)
                print(f"‚ùå {error_msg}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        forbidden_tests = [
            'apps.workouts.models.Exercise',
            'apps.workouts.admin.ExerciseAdmin'
        ]
        
        for forbidden_import in forbidden_tests:
            try:
                module_parts = forbidden_import.split('.')
                module_name = '.'.join(module_parts[:-1])
                class_name = module_parts[-1]
                
                module = importlib.import_module(module_name)
                getattr(module, class_name)
                
                error_msg = f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–π –∫–ª–∞—Å—Å –≤—Å—ë –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {forbidden_import}"
                import_errors.append(error_msg)
                print(f"üö® {error_msg}")
                
            except (ImportError, AttributeError):
                print(f"‚úÖ –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–¥–∞–ª—ë–Ω: {forbidden_import}")
        
        return import_errors
    
    def run_static_analysis(self) -> Dict[str, str]:
        """–ó–∞–ø—É—Å–∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤"""
        print("\nüîç –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ö–û–î–ê...")
        
        results = {}
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º flake8
        try:
            result = subprocess.run(
                ['flake8', '--select=F,E999', '--exclude=.venv,venv,migrations', '.'],
                cwd=self.project_root,
                capture_output=True,
                text=True,
                timeout=60
            )
            results['flake8'] = result.stdout if result.stdout else "–ë–µ–∑ –æ—à–∏–±–æ–∫"
            print(f"‚úÖ flake8 –∑–∞–≤–µ—Ä—à—ë–Ω")
        except Exception as e:
            results['flake8'] = f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}"
            print(f"‚ùå flake8 –æ—à–∏–±–∫–∞: {e}")
        
        return results
    
    def generate_comprehensive_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞"""
        print("\nüìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–û–õ–ù–û–ì–û –û–¢–ß–Å–¢–ê...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        syntax_errors = self.validate_syntax()
        import_analysis = self.analyze_ast_imports()
        pattern_violations = self.search_forbidden_patterns()
        django_errors = self.test_django_imports()
        static_analysis = self.run_static_analysis()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
        report = "# COMPREHENSIVE LEGACY VALIDATION REPORT\n\n"
        
        report += f"## –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n"
        report += f"- –í—Å–µ–≥–æ Python —Ñ–∞–π–ª–æ–≤: {len(self.python_files)}\n"
        report += f"- –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫: {len(syntax_errors)}\n"
        report += f"- –ù–∞—Ä—É—à–µ–Ω–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {sum(len(v) for v in pattern_violations.values())}\n"
        report += f"- Django –æ—à–∏–±–æ–∫: {len(django_errors)}\n\n"
        
        if syntax_errors:
            report += "## üö® –°–ò–ù–¢–ê–ö–°–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò\n"
            for file_path, error in syntax_errors:
                report += f"- {file_path}: {error}\n"
            report += "\n"
        
        if pattern_violations:
            report += "## üö® –ù–ê–†–£–®–ï–ù–ò–Ø LEGACY –ü–ê–¢–¢–ï–†–ù–û–í\n"
            for file_path, violations in pattern_violations.items():
                report += f"### {file_path}\n"
                for line_num, violation in violations:
                    report += f"- –°—Ç—Ä–æ–∫–∞ {line_num}: {violation}\n"
                report += "\n"
        
        if django_errors:
            report += "## üö® DJANGO –ò–ú–ü–û–†–¢ –û–®–ò–ë–ö–ò\n"
            for error in django_errors:
                report += f"- {error}\n"
            report += "\n"
        
        # –°—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        total_errors = len(syntax_errors) + len(django_errors) + sum(len(v) for v in pattern_violations.values())
        
        if total_errors == 0:
            report += "## ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–û–ô–î–ï–ù–ê\n"
            report += "–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω—ã. Legacy –∫–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω.\n"
        else:
            report += f"## ‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–ï –ü–†–û–ô–î–ï–ù–ê\n"
            report += f"–ù–∞–π–¥–µ–Ω–æ {total_errors} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º, —Ç—Ä–µ–±—É—é—â–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n"
        
        return report


def main():
    print("üöÄ –ó–ê–ü–£–°–ö –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò LEGACY –ö–û–î–ê")
    print("=" * 60)
    
    project_root = os.getcwd()
    validator = ComprehensiveLegacyValidator(project_root)
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    validator.scan_all_python_files()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç
    report = validator.generate_comprehensive_report()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
    report_path = Path(project_root) / "LEGACY_VALIDATION_REPORT.md"
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write(report)
    
    print(f"\nüìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}")
    
    # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
    print("\n" + "=" * 60)
    print("üìä –ö–†–ê–¢–ö–û–ï –†–ï–ó–Æ–ú–ï:")
    lines = report.split('\n')
    for line in lines:
        if 'üö®' in line or '‚úÖ' in line or '‚ùå' in line:
            print(line)
    
    return report


if __name__ == '__main__':
    main()