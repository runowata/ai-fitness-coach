#!/usr/bin/env python3
"""
Extract all 271 exercises from R2 storage and create complete CSV
"""
import boto3
import csv
import re
from collections import defaultdict

def get_r2_client():
    """Initialize R2 S3 client with actual credentials"""
    access_key = '3a9fd5a6b38ec994e057e33c1096874e'
    secret_key = '0817f9a3154b63b1968620a966e05e36f80fca0308ba91d9c8bf65e8622baa13'
    endpoint_url = 'https://92568f8b8a15c68a9ece5fe08c66485b.r2.cloudflarestorage.com'
    
    return boto3.client(
        's3',
        endpoint_url=endpoint_url,
        aws_access_key_id=access_key,
        aws_secret_access_key=secret_key,
        region_name='auto'
    )

def scan_full_r2_structure():
    """Scan entire R2 structure and extract all video data"""
    s3_client = get_r2_client()
    bucket_name = 'ai-fitness-media'
    
    all_files = []
    exercises = set()
    video_types = defaultdict(int)
    archetypes = set()
    
    try:
        paginator = s3_client.get_paginator('list_objects_v2')
        
        print("üîç Scanning all videos in R2...")
        
        for page in paginator.paginate(Bucket=bucket_name, Prefix='videos/'):
            if 'Contents' not in page:
                continue
                
            for obj in page['Contents']:
                key = obj['Key']
                size = obj['Size']
                
                # Skip directories
                if key.endswith('/'):
                    continue
                
                all_files.append({
                    'key': key,
                    'size': size,
                    'size_mb': round(size / (1024*1024), 2)
                })
                
                # Parse different video patterns
                parsed = parse_video_file(key)
                if parsed:
                    exercises.add(parsed['exercise_id'])
                    video_types[parsed['video_type']] += 1
                    if parsed['archetype']:
                        archetypes.add(parsed['archetype'])
                    
        print(f"‚úÖ Found {len(all_files)} total files")
        print(f"‚úÖ Found {len(exercises)} unique exercises")
        print(f"‚úÖ Found {len(archetypes)} archetypes: {sorted(archetypes)}")
        
        return {
            'all_files': all_files,
            'exercises': sorted(exercises), 
            'video_types': dict(video_types),
            'archetypes': sorted(archetypes)
        }
        
    except Exception as e:
        print(f"‚ùå Error scanning R2: {e}")
        return None

def parse_video_file(filepath):
    """Parse video file to extract metadata"""
    if not filepath.startswith('videos/'):
        return None
    
    # Remove videos/ prefix and extension
    path = filepath[7:]  # Remove 'videos/'
    if '.' in path:
        path = path.rsplit('.', 1)[0]  # Remove extension
    
    parts = path.split('/')
    if len(parts) < 2:
        return None
    
    category = parts[0]  # exercises, instructions, reminders, motivation, etc.
    filename = parts[-1]
    
    result = {
        'category': category,
        'exercise_id': None,
        'video_type': None,
        'archetype': None,
        'model': None,
        'original_path': filepath
    }
    
    # Parse different patterns
    if category == 'exercises' and '/explain/' not in filepath:
        # videos/exercises/{exercise}_technique_{model}.mp4
        match = re.match(r'(.+)_(technique|mistake)_(.+)', filename)
        if match:
            result['exercise_id'] = match.group(1)
            result['video_type'] = match.group(2)
            result['model'] = match.group(3)
            return result
            
    elif category == 'exercises' and '/explain/' in filepath:
        # videos/exercises/explain/{exercise}_explain_{model}.mp4
        match = re.match(r'(.+)_explain_(.+)', filename)
        if match:
            result['exercise_id'] = match.group(1)
            result['video_type'] = 'explain'
            result['model'] = match.group(2)
            return result
            
    elif category == 'instructions':
        # videos/instructions/{exercise}_instruction_{archetype}_{model}.mp4
        match = re.match(r'(.+)_instruction_(.+)_(.+)', filename)
        if match:
            result['exercise_id'] = match.group(1)
            result['video_type'] = 'instruction'
            result['archetype'] = match.group(2)
            result['model'] = match.group(3)
            return result
            
    elif category == 'reminders':
        # videos/reminders/{exercise}_reminder_{archetype}_{number}.mp4
        match = re.match(r'(.+)_reminder_(.+)_(\d+)', filename)
        if match:
            result['exercise_id'] = match.group(1)
            result['video_type'] = 'reminder'
            result['archetype'] = match.group(2)
            result['model'] = f'r{match.group(3)}'
            return result
            
    elif category in ['motivation', 'intros', 'closing', 'weekly', 'final', 'progress']:
        # Various motivation video patterns
        result['video_type'] = category
        result['exercise_id'] = f'{category}_video'
        
        # Try to extract archetype from filename
        for arch in ['best_mate', 'pro_coach', 'wise_mentor', 'bro', 'sergeant', 'intellectual']:
            if arch in filename:
                result['archetype'] = arch
                break
                
        return result
    
    return result if result['exercise_id'] else None

def categorize_exercise(exercise_id):
    """Determine category and properties from exercise ID"""
    if exercise_id.startswith('warmup_'):
        return {
            'category': 'warmup',
            'exercise_type': 'mobility',
            'level': 'beginner',
            'muscle_group': '–í—Å–µ —Ç–µ–ª–æ'
        }
    elif exercise_id.startswith('main_'):
        return {
            'category': 'main',
            'exercise_type': 'strength', 
            'level': 'intermediate',
            'muscle_group': '–ú—ã—à—Ü—ã –∫–æ—Ä–∞'
        }
    elif exercise_id.startswith('endurance_'):
        return {
            'category': 'endurance',
            'exercise_type': 'cardio',
            'level': 'intermediate', 
            'muscle_group': '–í—Å–µ —Ç–µ–ª–æ'
        }
    elif exercise_id.startswith('relaxation_'):
        return {
            'category': 'relaxation',
            'exercise_type': 'flexibility',
            'level': 'beginner',
            'muscle_group': '–í—Å–µ —Ç–µ–ª–æ'
        }
    else:
        return {
            'category': 'unknown',
            'exercise_type': 'strength',
            'level': 'intermediate',
            'muscle_group': '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
        }

def generate_exercise_names():
    """Generate Russian and English names for exercises"""
    
    # Base names for different categories
    warmup_names = [
        ("–í—Ä–∞—â–µ–Ω–∏—è —Ç–∞–∑–æ–º", "Hip Circles"),
        ("–ú–∞—Ö–∏ –Ω–æ–≥–∞–º–∏", "Leg Swings"), 
        ("–ö—Ä—É–≥–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –ø–ª–µ—á–∞–º–∏", "Shoulder Rolls"),
        ("–ù–∞–∫–ª–æ–Ω—ã —Ç—É–ª–æ–≤–∏—â–∞", "Torso Bends"),
        ("–ö–æ—à–∫–∞-–ö–æ—Ä–æ–≤–∞", "Cat-Cow Pose"),
        ("–•–æ–¥—å–±–∞ –Ω–∞ –º–µ—Å—Ç–µ", "High Knees Marching"),
        ("–ü—Ä—ã–∂–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ", "Jumping Jacks Light"),
        ("–í—Ä–∞—â–µ–Ω–∏—è —Å—É—Å—Ç–∞–≤–æ–≤", "Joint Rotations"),
        ("–ù–∞–∫–ª–æ–Ω—ã —Ç–∞–∑–∞", "Pelvic Tilts"),
        ("–ü–æ–≤–æ—Ä–æ—Ç—ã –∫–æ—Ä–ø—É—Å–∞", "Torso Twists"),
        ("–ú–æ—Å—Ç–∏–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏—è", "Glute Bridge Activation"),
        ("–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Ä–∞–∑–º–∏–Ω–æ—á–Ω—ã–µ", "Warm-up Squats"),
        ("–û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç —Å—Ç–µ–Ω—ã", "Wall Push-ups"),
        ("–ß–µ—Ä–≤—è–∫", "Inchworm"),
        ("–í—ã–ø–∞–¥—ã —Ä–∞–∑–º–∏–Ω–æ—á–Ω—ã–µ", "Warm-up Lunges"),
    ]
    
    main_names = [
        ("–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è", "Squats"),
        ("–û—Ç–∂–∏–º–∞–Ω–∏—è", "Push-ups"),
        ("–í—ã–ø–∞–¥—ã", "Lunges"),
        ("–ü–ª–∞–Ω–∫–∞", "Plank"),
        ("–ú–æ—Å—Ç–∏–∫", "Glute Bridge"),
        ("–ü–æ–¥—ä–µ–º—ã –Ω–æ–≥", "Leg Raises"),
        ("–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è", "Crunches"),
        ("–°—É–ø–µ—Ä–º–µ–Ω", "Superman"),
        ("–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è", "Pull-ups"),
        ("–ë–µ—Ä–ø–∏", "Burpees"),
        ("–ñ–∏–º", "Press"),
        ("–¢—è–≥–∞", "Rows"),
        ("–ü—Ä–∏—Å–µ–¥-–ø—Ä—ã–∂–æ–∫", "Jump Squats"),
        ("–í—ã–ø–∞–¥-–ø—Ä—ã–∂–æ–∫", "Jumping Lunges"),
        ("–ü–æ–¥—ä–µ–º –Ω–∞ –Ω–æ—Å–∫–∏", "Calf Raises"),
    ]
    
    endurance_names = [
        ("–ö–∞—Ä–¥–∏–æ-–∏–Ω—Ç–µ—Ä–≤–∞–ª", "Cardio Interval"),
        ("–í—ã—Å–æ–∫–æ–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π –±–µ–≥", "High Intensity Running"),
        ("–ü—Ä—ã–∂–∫–∏", "Jumping Exercise"),
        ("–ö–∞—Ä–¥–∏–æ-–º–∏–∫—Å", "Cardio Mix"),
        ("–ò–Ω—Ç–µ–Ω—Å–∏–≤", "High Intensity"),
        ("–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å", "Endurance Training"),
        ("–ö–∞—Ä–¥–∏–æ-–±–ª–æ–∫", "Cardio Block"),
        ("–ê—ç—Ä–æ–±–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞", "Aerobic Exercise"),
        ("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "Functional Training"),
        ("–ö—Ä—É–≥–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "Circuit Training"),
    ]
    
    relaxation_names = [
        ("–†–∞—Å—Ç—è–∂–∫–∞ —Å–ø–∏–Ω—ã", "Back Stretch"),
        ("–†–∞—Å—Ç—è–∂–∫–∞ –Ω–æ–≥", "Leg Stretch"), 
        ("–†–∞—Å—Ç—è–∂–∫–∞ –ø–ª–µ—á", "Shoulder Stretch"),
        ("–†–∞—Å—Ç—è–∂–∫–∞ –≥—Ä—É–¥–∏", "Chest Stretch"),
        ("–†–∞—Å—Ç—è–∂–∫–∞ –±–µ–¥–µ—Ä", "Hip Stretch"),
        ("–ü–æ–∑–∞ —Ä–µ–±–µ–Ω–∫–∞", "Child's Pose"),
        ("–°–∫—Ä—É—á–∏–≤–∞–Ω–∏–µ", "Spinal Twist"),
        ("–†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ", "Relaxation Pose"),
        ("–ú–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞", "Meditative Stretch"),
        ("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", "Recovery Stretch"),
    ]
    
    return {
        'warmup': warmup_names,
        'main': main_names, 
        'endurance': endurance_names,
        'relaxation': relaxation_names
    }

def create_full_exercise_csv():
    """Create complete CSV with all exercises from R2"""
    
    print("üîç Scanning R2 storage structure...")
    r2_data = scan_full_r2_structure()
    
    if not r2_data:
        print("‚ùå Failed to scan R2!")
        return
    
    exercises = [ex for ex in r2_data['exercises'] if not ex.endswith('_video')]
    
    print(f"\nüìä R2 STRUCTURE ANALYSIS:")
    print(f"  Total files: {len(r2_data['all_files'])}")
    print(f"  Total exercises: {len(exercises)}")
    print(f"  Video types: {r2_data['video_types']}")
    print(f"  Archetypes: {r2_data['archetypes']}")
    
    if not exercises:
        print("‚ùå No exercises found in R2!")
        return
    
    # Generate names
    names = generate_exercise_names()
    
    # Create CSV
    csv_file = 'data/clean/exercises_complete_r2.csv'
    
    with open(csv_file, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        
        # Header
        writer.writerow([
            'id', 'name_ru', 'name_en', 'description', 'muscle_group', 
            'exercise_type', 'level', 'ai_tags', 'category'
        ])
        
        for exercise_id in exercises:
            props = categorize_exercise(exercise_id)
            category = props['category']
            
            # Extract number from ID 
            number_match = re.search(r'(\d+)', exercise_id)
            number = int(number_match.group(1)) if number_match else 1
            
            # Get appropriate name list
            name_list = names.get(category, names['main'])
            
            # Cycle through names
            name_index = (number - 1) % len(name_list)
            base_ru, base_en = name_list[name_index]
            
            # Add variation number if needed
            variation = ((number - 1) // len(name_list)) + 1
            if variation > 1:
                name_ru = f"{base_ru} {variation}"
                name_en = f"{base_en} {variation}"
            else:
                name_ru = base_ru
                name_en = base_en
                
            # Generate description
            descriptions = {
                'warmup': f"–†–∞–∑–º–∏–Ω–æ—á–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç–µ–ª–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ. {name_ru} –ø–æ–º–æ–≥–∞–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º—ã—à—Ü—ã –∏ —É–ª—É—á—à–∏—Ç—å –ø–æ–¥–≤–∏–∂–Ω–æ—Å—Ç—å —Å—É—Å—Ç–∞–≤–æ–≤.",
                'main': f"–û—Å–Ω–æ–≤–Ω–æ–µ —Å–∏–ª–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –º—ã—à–µ—á–Ω–æ–π —Å–∏–ª—ã –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏. {name_ru} —è–≤–ª—è–µ—Ç—Å—è –∫–ª—é—á–µ–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.",
                'endurance': f"–ö–∞—Ä–¥–∏–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã. {name_ru} –ø–æ–≤—ã—à–∞–µ—Ç –æ–±—â—É—é —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É.",
                'relaxation': f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–∞ —Ä–∞—Å—Ç—è–∂–∫—É –∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. {name_ru} –ø–æ–º–æ–≥–∞–µ—Ç —Å–Ω—è—Ç—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏ —É–ª—É—á—à–∏—Ç—å –≥–∏–±–∫–æ—Å—Ç—å."
            }
            
            # Generate AI tags
            ai_tags_map = {
                'warmup': '["–†–∞–∑–º–∏–Ω–∫–∞", "–ü–æ–¥–≤–∏–∂–Ω–æ—Å—Ç—å", "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞", "–ê–∫—Ç–∏–≤–∞—Ü–∏—è"]',
                'main': '["–°–∏–ª–∞", "–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å", "–û—Å–Ω–æ–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "–ú—ã—à–µ—á–Ω–∞—è –º–∞—Å—Å–∞"]',
                'endurance': '["–ö–∞—Ä–¥–∏–æ", "–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å", "–°–∂–∏–≥–∞–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π", "–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å"]', 
                'relaxation': '["–†–∞—Å—Ç—è–∂–∫–∞", "–†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ", "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", "–ì–∏–±–∫–æ—Å—Ç—å"]'
            }
            
            writer.writerow([
                exercise_id,
                name_ru,
                name_en,
                descriptions.get(category, "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"),
                props['muscle_group'],
                props['exercise_type'], 
                props['level'],
                ai_tags_map.get(category, '["–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"]'),
                category
            ])
    
    print(f"‚úÖ Created complete CSV with {len(exercises)} exercises: {csv_file}")
    
    # Show breakdown
    breakdown = defaultdict(int)
    for exercise_id in exercises:
        category = categorize_exercise(exercise_id)['category']
        breakdown[category] += 1
    
    print("\nüìä BREAKDOWN:")
    for category, count in sorted(breakdown.items()):
        print(f"  {category}: {count} exercises")

if __name__ == "__main__":
    create_full_exercise_csv()