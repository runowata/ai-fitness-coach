#!/usr/bin/env python3
"""
–ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ —Å –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
"""

import csv
import os
import random
import shutil
from pathlib import Path

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
SOURCE_DIR = "/Volumes/fitnes ai/"
TARGET_DIR = "/Users/alexbel/Desktop/–ü—Ä–æ–µ–∫—Ç—ã/AI Fitness Coach/selected_media"
EXERCISES_FILE = "/Users/alexbel/Desktop/–ü—Ä–æ–µ–∫—Ç—ã/AI Fitness Coach/media_organizer/exercises.csv"
ARCHETYPES = ["wise_mentor", "best_mate", "pro_coach"]

# –¶–µ–ª–µ–≤—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
TARGETS = {
    "instruction": 441,    # –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å 224
    "reminder": 1323,      # –Ω–∞—á–∏–Ω–∞–µ–º —Å 0
    "weekly": 36,          # –Ω–∞—á–∏–Ω–∞–µ–º —Å 0
    "final": 3,            # –Ω–∞—á–∏–Ω–∞–µ–º —Å 0
    "avatars": 9,          # –Ω–∞—á–∏–Ω–∞–µ–º —Å 0
    "cards": 600,          # –Ω–∞—á–∏–Ω–∞–µ–º —Å 0
}

def load_exercises():
    exercises = []
    with open(EXERCISES_FILE, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            exercises.append(row['slug'])
    return exercises

def collect_remaining_videos():
    """–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≤–∏–¥–µ–æ"""
    print("üìÇ –°–æ–±–∏—Ä–∞—é –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≤–∏–¥–µ–æ —Å –¥–∏—Å–∫–∞...")
    
    videos = []
    for path in Path(SOURCE_DIR).rglob('*'):
        if path.is_file() and path.suffix.lower() in {'.mp4', '.mov', '.avi', '.mkv', '.webm'}:
            videos.append(path)
    
    random.shuffle(videos)
    print(f"üìπ –ù–∞–π–¥–µ–Ω–æ {len(videos)} –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    return videos

def collect_images():
    """–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    print("üìÇ –°–æ–±–∏—Ä–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –¥–∏—Å–∫–∞...")
    
    images = []
    for path in Path(SOURCE_DIR).rglob('*'):
        if path.is_file() and path.suffix.lower() in {'.jpg', '.jpeg', '.png', '.webp', '.gif'}:
            images.append(path)
    
    random.shuffle(images)
    print(f"üì∑ –ù–∞–π–¥–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    return images

def get_current_counts():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    counts = {}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º videos/instructions
    counts['instruction'] = len(list(Path(TARGET_DIR, "videos/instructions").glob("*")))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º videos/reminders
    counts['reminder'] = len(list(Path(TARGET_DIR, "videos/reminders").glob("*"))) if Path(TARGET_DIR, "videos/reminders").exists() else 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º videos/motivation
    motivation_path = Path(TARGET_DIR, "videos/motivation")
    if motivation_path.exists():
        counts['weekly'] = len(list(motivation_path.glob("*weekly*")))
        counts['final'] = len(list(motivation_path.glob("*final*")))
    else:
        counts['weekly'] = 0
        counts['final'] = 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º images
    avatars_path = Path(TARGET_DIR, "images/avatars")
    cards_path = Path(TARGET_DIR, "images/cards")
    counts['avatars'] = len(list(avatars_path.glob("*"))) if avatars_path.exists() else 0
    counts['cards'] = len(list(cards_path.glob("*"))) if cards_path.exists() else 0
    
    return counts

def generate_filename(category, counter, exercises):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞"""
    
    if category == "instruction":
        exercise = exercises[counter % len(exercises)]
        archetype = ARCHETYPES[counter % len(ARCHETYPES)]
        return f"videos/instructions/{exercise}_instruction_{archetype}_m01"
    
    elif category == "reminder":
        # 147 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π √ó 3 –∞—Ä—Ö–µ—Ç–∏–ø–∞ √ó 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ = 1323
        exercise_idx = counter % len(exercises)
        archetype_idx = (counter // len(exercises)) % len(ARCHETYPES)
        reminder_num = ((counter // (len(exercises) * len(ARCHETYPES))) % 3) + 1
        
        exercise = exercises[exercise_idx]
        archetype = ARCHETYPES[archetype_idx]
        
        return f"videos/reminders/{exercise}_reminder_{archetype}_{reminder_num:02d}"
    
    elif category == "weekly":
        week_num = (counter % 12) + 1
        archetype = ARCHETYPES[counter % len(ARCHETYPES)]
        return f"videos/motivation/weekly_{archetype}_week{week_num:02d}"
    
    elif category == "final":
        archetype = ARCHETYPES[counter % len(ARCHETYPES)]
        return f"videos/motivation/final_{archetype}"
    
    elif category == "avatars":
        archetype = ARCHETYPES[counter // 3]
        variant = (counter % 3) + 1
        return f"images/avatars/{archetype}_avatar_{variant:02d}"
    
    elif category == "cards":
        card_category = random.choice(['motivation', 'progress', 'success', 'challenge'])
        return f"images/cards/card_{card_category}_{counter+1:05d}"
    
    return "misc/unknown"

def continue_copying():
    """–ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    
    exercises = load_exercises()
    current_counts = get_current_counts()
    
    print("\nüîÑ –ü–†–û–î–û–õ–ñ–ê–Æ –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –° –¢–ï–ö–£–©–ï–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø:")
    for category, current in current_counts.items():
        target = TARGETS[category]
        remaining = target - current
        print(f"  {category}: {current}/{target} (–æ—Å—Ç–∞–ª–æ—Å—å {remaining})")
    
    # –°–æ–±–∏—Ä–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
    all_videos = collect_remaining_videos()
    all_images = collect_images()
    
    video_idx = 0
    image_idx = 0
    
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
    video_categories = ["instruction", "reminder", "weekly", "final"]
    
    for category in video_categories:
        current_count = current_counts[category]
        target_count = TARGETS[category]
        remaining = target_count - current_count
        
        if remaining <= 0:
            print(f"‚úÖ {category}: —É–∂–µ –≥–æ—Ç–æ–≤–æ ({current_count}/{target_count})")
            continue
            
        print(f"\nüìπ {category}: –∫–æ–ø–∏—Ä—É—é {remaining} –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤–∏–¥–µ–æ...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if category == "instruction":
            folder = "videos/instructions"
        elif category == "reminder":
            folder = "videos/reminders" 
        else:  # weekly, final
            folder = "videos/motivation"
            
        os.makedirs(os.path.join(TARGET_DIR, folder), exist_ok=True)
        
        for i in range(remaining):
            if video_idx >= len(all_videos):
                print(f"‚ùå –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤–∏–¥–µ–æ! –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {i}")
                break
                
            counter = current_count + i
            source_file = all_videos[video_idx]
            filename_base = generate_filename(category, counter, exercises)
            target_file = filename_base + source_file.suffix
            target_path = os.path.join(TARGET_DIR, target_file)
            
            try:
                shutil.copy2(source_file, target_path)
                video_idx += 1
                
                if (i + 1) % 100 == 0:
                    print(f"    {i + 1}/{remaining} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ")
                    
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞: {e}")
                video_idx += 1
        
        final_count = len(list(Path(TARGET_DIR, folder).glob("*")))
        print(f"‚úÖ {category}: –∑–∞–≤–µ—Ä—à–µ–Ω–æ ({final_count}/{target_count})")
    
    # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_categories = ["avatars", "cards"]
    
    for category in image_categories:
        current_count = current_counts[category]
        target_count = TARGETS[category]
        remaining = target_count - current_count
        
        if remaining <= 0:
            print(f"‚úÖ {category}: —É–∂–µ –≥–æ—Ç–æ–≤–æ")
            continue
            
        print(f"\nüì∑ {category}: –∫–æ–ø–∏—Ä—É—é {remaining} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        
        folder = f"images/{category}"
        os.makedirs(os.path.join(TARGET_DIR, folder), exist_ok=True)
        
        for i in range(remaining):
            if image_idx >= len(all_images):
                print(f"‚ùå –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è! –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {i}")
                break
                
            counter = current_count + i
            source_file = all_images[image_idx]
            filename_base = generate_filename(category, counter, exercises)
            target_file = filename_base + source_file.suffix
            target_path = os.path.join(TARGET_DIR, target_file)
            
            try:
                shutil.copy2(source_file, target_path)
                image_idx += 1
                
                if (i + 1) % 100 == 0:
                    print(f"    {i + 1}/{remaining} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ")
                    
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞: {e}")
                image_idx += 1
        
        final_count = len(list(Path(TARGET_DIR, folder).glob("*")))
        print(f"‚úÖ {category}: –∑–∞–≤–µ—Ä—à–µ–Ω–æ ({final_count}/{target_count})")

def verify_final_results():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    print("\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:")
    print("=" * 50)
    
    all_targets = {
        "technique": 147,
        "instruction": 441, 
        "mistake": 147,
        "reminder": 1323,
        "weekly": 36,
        "final": 3,
        "avatars": 9,
        "cards": 600
    }
    
    total_actual = 0
    total_target = sum(all_targets.values())
    
    for category, target in all_targets.items():
        if category == "technique":
            actual = len(list(Path(TARGET_DIR, "videos/exercises").glob("*technique*")))
        elif category == "mistake":
            actual = len(list(Path(TARGET_DIR, "videos/exercises").glob("*mistake*")))
        elif category == "instruction":
            actual = len(list(Path(TARGET_DIR, "videos/instructions").glob("*")))
        elif category == "reminder":
            actual = len(list(Path(TARGET_DIR, "videos/reminders").glob("*")))
        elif category in ["weekly", "final"]:
            actual = len(list(Path(TARGET_DIR, "videos/motivation").glob(f"*{category}*")))
        else:  # avatars, cards
            actual = len(list(Path(TARGET_DIR, f"images/{category}").glob("*")))
        
        total_actual += actual
        status = "‚úÖ" if actual == target else "‚ùå"
        print(f"{status} {category:12} {actual:4}/{target:4}")
    
    print("=" * 50)
    print(f"   {'–ò–¢–û–ì–û':12} {total_actual:4}/{total_target:4}")
    
    # –†–∞–∑–º–µ—Ä
    size_gb = sum(f.stat().st_size for f in Path(TARGET_DIR).rglob('*') if f.is_file()) / (1024**3)
    print(f"   {'–†–ê–ó–ú–ï–†':12} {size_gb:.1f} GB")

def main():
    print("üîÑ –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø –ú–ï–î–ò–ê–§–ê–ô–õ–û–í")
    print("=" * 50)
    
    continue_copying()
    verify_final_results()
    
    print(f"\nüéâ –ì–û–¢–û–í–û! –í—Å–µ —Ñ–∞–π–ª—ã –≤ {TARGET_DIR}")

if __name__ == '__main__':
    main()