#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–´–ô –ü–†–ê–í–ò–õ–¨–ù–´–ô —Å–∫—Ä–∏–ø—Ç –æ—Ç–±–æ—Ä–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
–û—Ç–±–∏—Ä–∞–µ—Ç –¢–û–ß–ù–û –Ω—É–∂–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ—Ö–∑–∞–¥–∞–Ω–∏—é
"""

import csv
import os
import random
import shutil
from pathlib import Path

# –¢–û–ß–ù–´–ï –¶–ï–õ–ò –∏–∑ —Ç–µ—Ö–∑–∞–¥–∞–Ω–∏—è
VIDEO_TARGETS = {
    "technique": 147,      # 1√ó –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ = 147
    "instruction": 441,    # 3√ó –∞—Ä—Ö–µ—Ç–∏–ø √ó 147 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π = 441  
    "mistake": 147,        # 1√ó –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ = 147
    "reminder": 1323,      # 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ √ó 3 –∞—Ä—Ö–µ—Ç–∏–ø–∞ √ó 147 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π = 1323
    "weekly": 36,          # 12 –Ω–µ–¥–µ–ª—å √ó 3 –∞—Ä—Ö–µ—Ç–∏–ø–∞ = 36
    "final": 3             # 1√ó –Ω–∞ –∞—Ä—Ö–µ—Ç–∏–ø = 3
}

IMAGE_TARGETS = {
    "avatars": 9,          # 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ √ó 3 –∞—Ä—Ö–µ—Ç–∏–ø–∞ = 9
    "cards": 600,          # 600 –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
}

# –ò–¢–û–ì–û –ù–£–ñ–ù–û:
# –í–∏–¥–µ–æ: 147+441+147+1323+36+3 = 2097 –≤–∏–¥–µ–æ
# –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: 9+600 = 609 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

SOURCE_DIR = "/Volumes/fitnes ai/"
TARGET_DIR = "/Users/alexbel/Desktop/–ü—Ä–æ–µ–∫—Ç—ã/AI Fitness Coach/selected_media"
EXERCISES_FILE = "/Users/alexbel/Desktop/–ü—Ä–æ–µ–∫—Ç—ã/AI Fitness Coach/media_organizer/exercises.csv"
ARCHETYPES = ["wise_mentor", "best_mate", "pro_coach"]

def load_exercises():
    exercises = []
    with open(EXERCISES_FILE, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            exercises.append(row['slug'])
    print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(exercises)} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
    return exercises

def collect_all_media():
    """–°–æ–±–∏—Ä–∞–µ—Ç –í–°–ï –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã —Å –¥–∏—Å–∫–∞"""
    print(f"üìÇ –°–∫–∞–Ω–∏—Ä—É—é –≤–µ—Å—å –¥–∏—Å–∫ {SOURCE_DIR}...")
    
    videos = []
    images = []
    
    for path in Path(SOURCE_DIR).rglob('*'):
        if path.is_file():
            ext = path.suffix.lower()
            if ext in {'.mp4', '.mov', '.avi', '.mkv', '.webm'}:
                videos.append(path)
            elif ext in {'.jpg', '.jpeg', '.png', '.webp', '.gif'}:
                images.append(path)
    
    print(f"üìπ –ù–∞–π–¥–µ–Ω–æ {len(videos)} –≤–∏–¥–µ–æ")
    print(f"üì∑ –ù–∞–π–¥–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    return videos, images

def create_folder_structure():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫"""
    print("üìÅ –°–æ–∑–¥–∞—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫...")
    
    if os.path.exists(TARGET_DIR):
        shutil.rmtree(TARGET_DIR)
    
    folders = [
        "videos/exercises",
        "videos/instructions", 
        "videos/reminders",
        "videos/motivation",
        "images/avatars",
        "images/cards",
        "images/stories"
    ]
    
    for folder in folders:
        os.makedirs(os.path.join(TARGET_DIR, folder), exist_ok=True)

def generate_filename(category, counter, exercises):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞"""
    
    if category == "technique":
        exercise = exercises[counter % len(exercises)]
        return f"videos/exercises/{exercise}_technique_m01"
    
    elif category == "instruction":
        exercise = exercises[counter % len(exercises)]
        archetype = ARCHETYPES[counter % len(ARCHETYPES)]
        return f"videos/instructions/{exercise}_instruction_{archetype}_m01"
    
    elif category == "mistake":
        exercise = exercises[counter % len(exercises)]
        return f"videos/exercises/{exercise}_mistake_m01"
    
    elif category == "reminder":
        # 147 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π √ó 3 –∞—Ä—Ö–µ—Ç–∏–ø–∞ √ó 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ = 1323
        exercise_idx = counter % len(exercises)
        archetype_idx = (counter // len(exercises)) % len(ARCHETYPES)
        reminder_num = ((counter // (len(exercises) * len(ARCHETYPES))) % 3) + 1
        
        exercise = exercises[exercise_idx]
        archetype = ARCHETYPES[archetype_idx]
        
        return f"videos/reminders/{exercise}_reminder_{archetype}_{reminder_num:02d}"
    
    elif category == "weekly":
        # 12 –Ω–µ–¥–µ–ª—å √ó 3 –∞—Ä—Ö–µ—Ç–∏–ø–∞ = 36
        week_num = (counter % 12) + 1
        archetype = ARCHETYPES[counter % len(ARCHETYPES)]
        return f"videos/motivation/weekly_{archetype}_week{week_num:02d}"
    
    elif category == "final":
        archetype = ARCHETYPES[counter % len(ARCHETYPES)]
        return f"videos/motivation/final_{archetype}"
    
    elif category == "avatars":
        # 3 –∞—Ä—Ö–µ—Ç–∏–ø–∞ √ó 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ = 9
        archetype = ARCHETYPES[counter // 3]
        variant = (counter % 3) + 1
        return f"images/avatars/{archetype}_avatar_{variant:02d}"
    
    elif category == "cards":
        card_category = random.choice(['motivation', 'progress', 'success', 'challenge'])
        return f"images/cards/card_{card_category}_{counter+1:05d}"
    
    return "misc/unknown"

def copy_files_correctly(all_videos, all_images, exercises):
    """–ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –≤ –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞—Ö"""
    
    print("\nüéØ –û–¢–ë–ò–†–ê–Æ –ò –ö–û–ü–ò–†–£–Æ –¢–û–ß–ù–´–ï –ö–û–õ–ò–ß–ï–°–¢–í–ê:")
    print(f"–í–∏–¥–µ–æ –Ω—É–∂–Ω–æ: {sum(VIDEO_TARGETS.values())} —à—Ç—É–∫")
    print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω—É–∂–Ω–æ: {sum(IMAGE_TARGETS.values())} —à—Ç—É–∫")
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã
    random.shuffle(all_videos)
    random.shuffle(all_images)
    
    video_idx = 0
    image_idx = 0
    total_copied = 0
    
    # –ö–æ–ø–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for category, target_count in VIDEO_TARGETS.items():
        print(f"\nüìπ {category}: –∫–æ–ø–∏—Ä—É—é {target_count} –≤–∏–¥–µ–æ...")
        
        for counter in range(target_count):
            if video_idx >= len(all_videos):
                print(f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤–∏–¥–µ–æ! –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(all_videos)}")
                break
                
            source_file = all_videos[video_idx]
            filename_base = generate_filename(category, counter, exercises)
            target_file = filename_base + source_file.suffix
            target_path = os.path.join(TARGET_DIR, target_file)
            
            try:
                shutil.copy2(source_file, target_path)
                total_copied += 1
                video_idx += 1
                
                if (counter + 1) % 100 == 0:
                    print(f"    –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {counter + 1}/{target_count}")
                    
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print(f"‚úÖ {category}: {target_count} –≤–∏–¥–µ–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ")
    
    # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for category, target_count in IMAGE_TARGETS.items():
        print(f"\nüì∑ {category}: –∫–æ–ø–∏—Ä—É—é {target_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        
        for counter in range(target_count):
            if image_idx >= len(all_images):
                print(f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π! –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(all_images)}")
                break
                
            source_file = all_images[image_idx]
            filename_base = generate_filename(category, counter, exercises)
            target_file = filename_base + source_file.suffix
            target_path = os.path.join(TARGET_DIR, target_file)
            
            try:
                shutil.copy2(source_file, target_path)
                total_copied += 1
                image_idx += 1
                
                if (counter + 1) % 100 == 0:
                    print(f"    –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {counter + 1}/{target_count}")
                    
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print(f"‚úÖ {category}: {target_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ")
    
    return total_copied

def verify_results():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    print("\nüìä –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–µ–æ
    total_videos = 0
    for category, target in VIDEO_TARGETS.items():
        if category in ['technique', 'mistake']:
            pattern = f"*_{category}_*"
            folder = "videos/exercises"
        elif category == 'instruction':
            pattern = "*_instruction_*"
            folder = "videos/instructions"
        elif category == 'reminder':
            pattern = "*_reminder_*"
            folder = "videos/reminders"
        else:  # weekly, final
            pattern = f"*_{category}_*"
            folder = "videos/motivation"
        
        actual = len(list(Path(TARGET_DIR, folder).glob(pattern)))
        total_videos += actual
        status = "‚úÖ" if actual == target else "‚ùå"
        print(f"{status} {category:12} {actual:4}/{target:4}")
    
    print(f"   {'–í–°–ï–ì–û –í–ò–î–ï–û':12} {total_videos:4}/{sum(VIDEO_TARGETS.values()):4}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    total_images = 0
    for category, target in IMAGE_TARGETS.items():
        folder = f"images/{category}"
        actual = len(list(Path(TARGET_DIR, folder).glob("*")))
        total_images += actual
        status = "‚úÖ" if actual == target else "‚ùå"
        print(f"{status} {category:12} {actual:4}/{target:4}")
    
    print(f"   {'–í–°–ï–ì–û –§–û–¢–û':12} {total_images:4}/{sum(IMAGE_TARGETS.values()):4}")
    print("=" * 50)
    print(f"   {'–ò–¢–û–ì–û':12} {total_videos + total_images:4} —Ñ–∞–π–ª–æ–≤")
    
    # –†–∞–∑–º–µ—Ä
    size_gb = sum(f.stat().st_size for f in Path(TARGET_DIR).rglob('*') if f.is_file()) / (1024**3)
    print(f"   {'–†–ê–ó–ú–ï–†':12} {size_gb:.1f} GB")

def main():
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –ü–†–ê–í–ò–õ–¨–ù–´–ô –û–¢–ë–û–† –ú–ï–î–ò–ê–§–ê–ô–õ–û–í")
    print("=" * 60)
    print(f"–¶–ï–õ–¨: {sum(VIDEO_TARGETS.values())} –≤–∏–¥–µ–æ + {sum(IMAGE_TARGETS.values())} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    exercises = load_exercises()
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å –¥–∏—Å–∫–∞
    all_videos, all_images = collect_all_media()
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    create_folder_structure()
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    total_copied = copy_files_correctly(all_videos, all_images, exercises)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    verify_results()
    
    print(f"\nüéâ –ì–û–¢–û–í–û! –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {total_copied} —Ñ–∞–π–ª–æ–≤")
    print(f"üìÅ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {TARGET_DIR}")

if __name__ == '__main__':
    main()