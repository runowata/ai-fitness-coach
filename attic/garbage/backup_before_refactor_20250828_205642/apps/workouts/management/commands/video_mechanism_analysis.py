
from django.core.management.base import BaseCommand

from apps.workouts.constants import ARCHETYPE_FALLBACK_ORDER, PLAYLIST_MISTAKE_PROB, VideoKind


class Command(BaseCommand):
    help = "Detailed analysis of video playlist generation mechanism"

    def add_arguments(self, parser):
        parser.add_argument('--verbose', action='store_true', help='Verbose output')

    def handle(self, *args, **options):
        verbose = options['verbose']
        
        self.stdout.write("üé¨ –ú–ï–•–ê–ù–ò–ó–ú –†–ê–ë–û–¢–´ –í–ò–î–ï–û –ü–õ–ï–ô–õ–ò–°–¢–û–í")
        self.stdout.write("=" * 50)
        
        # 1. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞
        self.analyze_playlist_structure(verbose)
        
        # 2. –¢–∏–ø—ã –≤–∏–¥–µ–æ –∏ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏–µ
        self.analyze_video_types(verbose)
        
        # 3. –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        self.analyze_deduplication_system(verbose)
        
        # 4. –ê—Ä—Ö–µ—Ç–∏–ø—ã –∏ fallback
        self.analyze_archetype_system(verbose)
        
        # 5. Cloudflare R2 —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        self.analyze_r2_structure(verbose)

    def analyze_playlist_structure(self, verbose):
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
        self.stdout.write("\nüìã –°–¢–†–£–ö–¢–£–†–ê –ü–õ–ï–ô–õ–ò–°–¢–ê")
        self.stdout.write("-" * 25)
        
        playlist_flow = [
            "1. üé¨ INTRO –≤–∏–¥–µ–æ (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞)",
            "2. üí™ –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø:",
            "   ‚Ä¢ TECHNIQUE –≤–∏–¥–µ–æ (—Ç–µ—Ö–Ω–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)",
            "   ‚Ä¢ INSTRUCTION –≤–∏–¥–µ–æ (–º–æ—Ç–∏–≤–∞—Ü–∏—è –æ—Ç –∞—Ä—Ö–µ—Ç–∏–ø–∞)", 
            "   ‚Ä¢ MISTAKE –≤–∏–¥–µ–æ (30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)",
            "3. üèÜ WEEKLY –≤–∏–¥–µ–æ (—Ç–æ–ª—å–∫–æ –≤ –¥–µ–Ω—å 7 –Ω–µ–¥–µ–ª–∏)",
            "4. üéØ REST DAY –≤–∏–¥–µ–æ (—Ç–æ–ª—å–∫–æ –≤ –¥–Ω–∏ –æ—Ç–¥—ã—Ö–∞)"
        ]
        
        for step in playlist_flow:
            self.stdout.write(f"   {step}")
            
        if verbose:
            self.stdout.write("\nüéØ –î–µ—Ç–∞–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
            self.stdout.write(f"   ‚Ä¢ Mistake –≤–∏–¥–µ–æ: {PLAYLIST_MISTAKE_PROB * 100}% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å")
            self.stdout.write("   ‚Ä¢ Deterministic selection: –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ workout_id + week + day + archetype")
            self.stdout.write("   ‚Ä¢ Storage validation: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ R2")

    def analyze_video_types(self, verbose):
        """–ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –≤–∏–¥–µ–æ"""
        self.stdout.write("\nüé• –¢–ò–ü–´ –í–ò–î–ï–û –ò –ò–• –†–û–õ–¨")
        self.stdout.write("-" * 25)
        
        video_types = {
            VideoKind.INTRO: {
                "name": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞",
                "when": "–í –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
                "content": "–û–±—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
                "archetype_specific": True,
                "required": False
            },
            VideoKind.TECHNIQUE: {
                "name": "–¢–µ—Ö–Ω–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                "when": "–î–ª—è –∫–∞–∂–¥–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
                "content": "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏",
                "archetype_specific": False,
                "required": True
            },
            VideoKind.INSTRUCTION: {
                "name": "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è",
                "when": "–î–ª—è –∫–∞–∂–¥–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
                "content": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç –∞—Ä—Ö–µ—Ç–∏–ø–∞",
                "archetype_specific": True,
                "required": True
            },
            VideoKind.MISTAKE: {
                "name": "–ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏", 
                "when": "30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
                "content": "–†–∞–∑–±–æ—Ä —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫",
                "archetype_specific": True,
                "required": False
            },
            VideoKind.WEEKLY: {
                "name": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è",
                "when": "7-–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ –¥–µ–Ω—å –æ—Ç–¥—ã—Ö–∞",
                "content": "–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –Ω–µ–¥–µ–ª–∏",
                "archetype_specific": True,
                "required": False
            },
            VideoKind.CLOSING: {
                "name": "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏",
                "when": "–í –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏",
                "content": "–ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –Ω–µ–¥–µ–ª–∏",
                "archetype_specific": True,
                "required": False
            }
        }
        
        for kind, info in video_types.items():
            status = "‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û" if info["required"] else "üîç –û–ü–¶–ò–û–ù–ê–õ–¨–ù–û"
            archetype_note = "üé≠ –ü–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞–º" if info["archetype_specific"] else "üîÑ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ"
            
            self.stdout.write(f"\nüìπ {kind.upper()} ({info['name']})")
            self.stdout.write(f"   {status} | {archetype_note}")
            self.stdout.write(f"   üìÖ –ö–æ–≥–¥–∞: {info['when']}")
            self.stdout.write(f"   üìù –ö–æ–Ω—Ç–µ–Ω—Ç: {info['content']}")

    def analyze_deduplication_system(self, verbose):
        """–ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"""
        self.stdout.write("\nüîÑ –°–ò–°–¢–ï–ú–ê –ö–û–ù–¢–†–û–õ–Ø –ü–û–í–¢–û–†–ï–ù–ò–ô")
        self.stdout.write("-" * 35)
        
        self.stdout.write("üéØ Deterministic Selection:")
        self.stdout.write("   ‚Ä¢ Seed: MD5(workout_id + week_number + day_number + archetype)")
        self.stdout.write("   ‚Ä¢ –û–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ workout –≤—Å–µ–≥–¥–∞ –¥–∞—Å—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç")
        self.stdout.write("   ‚Ä¢ –†–∞–∑–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ = —Ä–∞–∑–Ω—ã–µ –≤–∏–¥–µ–æ")
        
        self.stdout.write("\nüîç Multi-Level Fallback:")
        self.stdout.write("   Level 1: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (exercise + kind + archetype)")
        self.stdout.write("   Level 2: Fallback –ø–æ –∞—Ä—Ö–µ—Ç–∏–ø—É")
        self.stdout.write("   Level 3: –ü—Ä–æ–ø—É—Å–∫ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ")
        
        self.stdout.write("\n‚ö° Storage Retry Mechanism:")
        self.stdout.write("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ R2")
        self.stdout.write("   ‚Ä¢ –î–æ 2 –ø–æ–ø—ã—Ç–æ–∫ –≤—ã–±–æ—Ä–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–ø–∞")
        self.stdout.write("   ‚Ä¢ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ candidates")
        
        self.stdout.write("\nüé≤ Randomization Control:")
        self.stdout.write("   ‚Ä¢ RNG.choice() —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º seed")
        self.stdout.write("   ‚Ä¢ –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        self.stdout.write("   ‚Ä¢ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ exclude_id –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–æ–≤")

    def analyze_archetype_system(self, verbose):
        """–ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤"""
        self.stdout.write("\nüë§ –°–ò–°–¢–ï–ú–ê –ê–†–•–ï–¢–ò–ü–û–í –ò FALLBACK")
        self.stdout.write("-" * 35)
        
        self.stdout.write("üé≠ –ê—Ä—Ö–µ—Ç–∏–ø—ã —Ç—Ä–µ–Ω–µ—Ä–æ–≤:")
        archetype_descriptions = {
            "mentor": "–ú—É–¥—Ä—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –º—É–¥—Ä–æ—Å—Ç—å",
            "professional": "–£—Å–ø–µ—à–Ω—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç", 
            "peer": "–ë–ª–∏–∑–∫–∏–π –ø–æ –¥—É—Ö—É —Ä–æ–≤–µ—Å–Ω–∏–∫ - –¥—Ä—É–∂–±–∞ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ"
        }
        
        for archetype, description in archetype_descriptions.items():
            self.stdout.write(f"   ‚Ä¢ {archetype}: {description}")
        
        self.stdout.write("\nüîÑ Fallback Order:")
        for primary, fallbacks in ARCHETYPE_FALLBACK_ORDER.items():
            fallback_chain = " ‚Üí ".join(fallbacks)
            self.stdout.write(f"   ‚Ä¢ {primary}: {fallback_chain}")
        
        self.stdout.write("\nüìä –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:")
        self.stdout.write("   1. –ò—â–µ–º –≤–∏–¥–µ–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞")
        self.stdout.write("   2. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Üí –ø—Ä–æ–±—É–µ–º fallback –∞—Ä—Ö–µ—Ç–∏–ø—ã")
        self.stdout.write("   3. –ï—Å–ª–∏ REQUIRED –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Üí –ª–æ–≥–∏—Ä—É–µ–º ERROR")
        self.stdout.write("   4. –ï—Å–ª–∏ OPTIONAL –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Üí –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")

    def analyze_r2_structure(self, verbose):
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Cloudflare R2"""
        self.stdout.write("\n‚òÅÔ∏è  –°–¢–†–£–ö–¢–£–†–ê CLOUDFLARE R2")
        self.stdout.write("-" * 30)
        
        r2_structure = {
            "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è": {
                "technique": "/videos/exercises/{slug}_technique_{model}.mp4",
                "mistake": "/videos/exercises/{slug}_mistake_{model}.mp4"
            },
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏": {
                "instruction": "/videos/instructions/{slug}_instruction_{archetype}_{model}.mp4"
            },
            "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è": {
                "reminder": "/videos/reminders/{slug}_reminder_{archetype}_{number}.mp4"
            },
            "–ì–ª–æ–±–∞–ª—å–Ω—ã–µ": {
                "intro": "/videos/intro/{archetype}_intro_{model}.mp4",
                "weekly": "/videos/motivation/weekly_{archetype}_week{number}.mp4",
                "closing": "/videos/closing/{archetype}_closing_{model}.mp4"
            },
            "–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏": {
                "images": "/images/cards/card_{category}_{number}.jpg"
            },
            "–ê–≤–∞—Ç–∞—Ä—ã": {
                "avatars": "/images/avatars/{archetype}_avatar_{number}.jpg"
            }
        }
        
        for category, paths in r2_structure.items():
            self.stdout.write(f"\nüìÅ {category}:")
            for kind, path in paths.items():
                self.stdout.write(f"   {kind}: {path}")
        
        self.stdout.write("\nüîß –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã:")
        placeholders = [
            "{slug} - ID —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: push_ups)",
            "{archetype} - mentor/professional/peer", 
            "{model} - –≤–µ—Ä—Å–∏—è –≤–∏–¥–µ–æ (v1, v2, etc)",
            "{category} - –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏",
            "{number} - –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä"
        ]
        
        for placeholder in placeholders:
            self.stdout.write(f"   ‚Ä¢ {placeholder}")
        
        self.stdout.write("\nüåê URL Generation:")
        self.stdout.write("   ‚Ä¢ Base URL: R2_PUBLIC_URL –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        self.stdout.write("   ‚Ä¢ Dynamic path: –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ VideoClip.r2_file")
        self.stdout.write("   ‚Ä¢ CDN caching: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ Cloudflare")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
        self.stdout.write("\nüìã –ò–¢–û–ì–û:")
        self.stdout.write("   üé¨ –°–∏—Å—Ç–µ–º–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∏")
        self.stdout.write("   üë§ 3 –∞—Ä—Ö–µ—Ç–∏–ø–∞ —Å fallback —Ü–µ–ø–æ—á–∫–∞–º–∏")
        self.stdout.write("   üîÑ –ö–æ–Ω—Ç—Ä–æ–ª—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —á–µ—Ä–µ–∑ seeded RNG")
        self.stdout.write("   ‚òÅÔ∏è  –í—Å–µ –≤–∏–¥–µ–æ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ Cloudflare R2")
        self.stdout.write("   ‚ö° Storage validation –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –±–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏")