#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ü–û–õ–ù–û–ì–û –ü–†–û–ú–ü–¢–ê –¥–ª—è GPT-5
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–º–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ API
"""

import os
import sys
import django

# Setup Django
sys.path.append('/Users/alexbel/Desktop/–ü—Ä–æ–µ–∫—Ç—ã/AI Fitness Coach')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from apps.ai_integration.workout_generator_gpt5 import create_gpt5_generator
from apps.core.services.exercise_validation import ExerciseValidationService
import json

def show_full_prompt():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT-5"""
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    generator = create_gpt5_generator()
    
    # –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    user_data = {
        'age': 32,
        'height': 175,
        'weight': 78,
        'archetype': 'mentor',  # Science-Based Coach
        'primary_goal': '–°–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–∞ –∏ —É–ª—É—á—à–µ–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—ã –ø–æ—Å–ª–µ –¥–æ–ª–≥–æ–π —Ä–∞–±–æ—Ç—ã –∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º',
        'injuries': '–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –±–æ–ª–∏ –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —Å–ø–∏–Ω—ã, –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –≤ –ø–ª–µ—á–∞—Ö –∏ —à–µ–µ',
        'equipment_list': '–î–æ–º–∞—à–Ω–∏–π —Å–ø–æ—Ä—Ç–∑–∞–ª: –≥–∞–Ω—Ç–µ–ª–∏ 5-30–∫–≥, —Ñ–∏—Ç–±–æ–ª, —ç–ª–∞—Å—Ç–∏—á–Ω—ã–µ –ª–µ–Ω—Ç—ã, –∫–æ–≤—Ä–∏–∫ –¥–ª—è –π–æ–≥–∏, —Ç—É—Ä–Ω–∏–∫',
        'duration_weeks': 4,
        'onboarding_payload_json': json.dumps({
            'fitness_level': 'beginner',
            'work_stress_level': 'very_high', 
            'sleep_quality': 'poor',
            'training_frequency': 4,
            'preferred_workout_time': 'evening',
            'specific_concerns': ['lower_back_pain', 'stress_management', 'energy_levels', 'posture_correction'],
            'motivation_level': 'medium',
            'experience_years': 0.5,
            'current_activity': 'sedentary',
            'work_hours_per_day': 10,
            'screen_time_hours': 12,
            'lifestyle_factors': ['long_work_hours', 'irregular_schedule', 'high_stress_job', 'poor_posture']
        }, ensure_ascii=False, indent=2)
    }
    
    print("üî• –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
    print("="*50)
    print(f"–í–æ–∑—Ä–∞—Å—Ç: {user_data['age']} –ª–µ—Ç")
    print(f"–†–æ—Å—Ç/–í–µ—Å: {user_data['height']}—Å–º, {user_data['weight']}–∫–≥")
    print(f"–ê—Ä—Ö–µ—Ç–∏–ø —Ç—Ä–µ–Ω–µ—Ä–∞: {user_data['archetype']} (Science-Based Coach)")
    print(f"–û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å: {user_data['primary_goal']}")
    print(f"–¢—Ä–∞–≤–º—ã/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {user_data['injuries']}")
    print(f"–î–æ—Å—Ç—É–ø–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {user_data['equipment_list']}")
    print(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã: {user_data['duration_weeks']} –Ω–µ–¥–µ–ª—å")
    
    print("\nüìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –ê–ù–ö–ï–¢–ê –û–ù–ë–û–†–î–ò–ù–ì–ê:")
    print(user_data['onboarding_payload_json'])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –∞—Ä—Ö–µ—Ç–∏–ø–∞
    allowed_exercises = ExerciseValidationService.get_allowed_exercise_slugs(archetype='mentor')
    
    # –°—Ç—Ä–æ–∏–º –ø–æ–ª–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
    system_prompt = generator._build_system_prompt('mentor')
    user_prompt = generator._build_user_prompt('mentor', user_data, allowed_exercises)
    
    print("\n" + "="*80)
    print("üì§ –ü–û–õ–ù–´–ô SYSTEM PROMPT –î–õ–Ø GPT-5:")
    print("="*80)
    print(system_prompt)
    
    print("\n" + "="*80)
    print("üì§ –ü–û–õ–ù–´–ô USER PROMPT –î–õ–Ø GPT-5:")
    print("="*80)
    print(user_prompt)
    
    print("\n" + "="*80)
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ú–ü–¢–ê:")
    print("="*80)
    print(f"System prompt –¥–ª–∏–Ω–∞: {len(system_prompt):,} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"User prompt –¥–ª–∏–Ω–∞: {len(user_prompt):,} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"–û–ë–©–ê–Ø –î–õ–ò–ù–ê: {len(system_prompt) + len(user_prompt):,} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ whitelist: {len(allowed_exercises)} –∫–æ–¥–æ–≤")
    
    print(f"\nüéØ –°–ü–ò–°–û–ö –£–ü–†–ê–ñ–ù–ï–ù–ò–ô (–ø–µ—Ä–≤—ã–µ 20 –∏–∑ {len(allowed_exercises)}):")
    sorted_exercises = sorted(allowed_exercises)
    for i, exercise in enumerate(sorted_exercises[:20]):
        print(f"  {exercise}")
    if len(sorted_exercises) > 20:
        print(f"  ... –∏ –µ—â–µ {len(sorted_exercises) - 20} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
        
    print("\n" + "="*80)
    print("üöÄ –≠–¢–û –†–ï–ê–õ–¨–ù–´–ô –ü–†–û–ú–ü–¢, –ö–û–¢–û–†–´–ô –û–¢–ü–†–ê–í–õ–Ø–ï–¢–°–Ø –í GPT-5!")
    print("="*80)

if __name__ == "__main__":
    show_full_prompt()