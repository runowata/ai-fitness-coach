#!/usr/bin/env python3
"""
upload_to_r2.py
---------------
–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ–¥–∏–∞—Ç–µ–∫—É selected_media –≤ Cloudflare R2.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç boto3 –¥–ª—è S3-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ API.
"""

import os
import sys
import time
import hashlib
import json
from pathlib import Path
from datetime import datetime
import boto3
from botocore.config import Config
from botocore.exceptions import NoCredentialsError, ClientError
from concurrent.futures import ThreadPoolExecutor, as_completed
from tqdm import tqdm

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è R2
R2_ACCESS_KEY_ID = "3a9fd5a6b38ec994e057e33c1096874e"
R2_SECRET_ACCESS_KEY = "0817f9a3154b63b1968620a966e05e36f80fca0308ba91d9c8bf65e8622baa13"
R2_ENDPOINT = "https://92568f8b8a15c68a9ece5fe08c66485b.r2.cloudflarestorage.com"
R2_BUCKET = "ai-fitness-media"

# –ü—É—Ç–∏
PROJECT_ROOT = Path.cwd()
SELECTED_MEDIA = PROJECT_ROOT / "selected_media"
UPLOAD_LOG = PROJECT_ROOT / "r2_upload_log.json"
UPLOAD_STATE = PROJECT_ROOT / "r2_upload_state.json"

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏
MAX_WORKERS = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è)
CHUNK_SIZE = 8 * 1024 * 1024  # 8MB chunks –¥–ª—è multipart upload
MULTIPART_THRESHOLD = 50 * 1024 * 1024  # –§–∞–π–ª—ã > 50MB –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ —á–∞—Å—Ç—è–º

def get_s3_client():
    """–°–æ–∑–¥–∞–µ—Ç S3 –∫–ª–∏–µ–Ω—Ç –¥–ª—è R2."""
    return boto3.client(
        's3',
        endpoint_url=R2_ENDPOINT,
        aws_access_key_id=R2_ACCESS_KEY_ID,
        aws_secret_access_key=R2_SECRET_ACCESS_KEY,
        config=Config(
            signature_version='s3v4',
            retries={'max_attempts': 3}
        ),
        region_name='auto'
    )

def load_upload_state():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏."""
    if UPLOAD_STATE.exists():
        with open(UPLOAD_STATE, 'r') as f:
            return set(json.load(f))
    return set()

def save_upload_state(uploaded_files):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏."""
    with open(UPLOAD_STATE, 'w') as f:
        json.dump(list(uploaded_files), f, indent=2)

def calculate_file_hash(file_path):
    """–í—ã—á–∏—Å–ª—è–µ—Ç MD5 —Ö–µ—à —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏."""
    md5 = hashlib.md5()
    with open(file_path, 'rb') as f:
        for chunk in iter(lambda: f.read(8192), b''):
            md5.update(chunk)
    return md5.hexdigest()

def get_all_files():
    """–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏."""
    files = []
    for file_path in SELECTED_MEDIA.rglob('*'):
        if file_path.is_file():
            # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç selected_media
            relative_path = file_path.relative_to(SELECTED_MEDIA)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ S3 key (–∏—Å–ø–æ–ª—å–∑—É–µ–º / –¥–∞–∂–µ –Ω–∞ Windows)
            s3_key = str(relative_path).replace('\\', '/')
            files.append((file_path, s3_key))
    return files

def upload_file(s3_client, file_path, s3_key, pbar=None):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª –≤ R2."""
    try:
        file_size = file_path.stat().st_size
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ ASCII —Å–∏–º–≤–æ–ª—ã –¥–ª—è S3)
        import unicodedata
        safe_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('ascii')
        metadata = {
            'original-name': safe_name or 'unknown',
            'upload-date': datetime.now().isoformat(),
            'file-hash': calculate_file_hash(file_path)
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º content-type
        if file_path.suffix.lower() in ['.mp4', '.mov', '.avi', '.mkv', '.webm']:
            content_type = 'video/mp4'
        elif file_path.suffix.lower() in ['.jpg', '.jpeg']:
            content_type = 'image/jpeg'
        elif file_path.suffix.lower() == '.png':
            content_type = 'image/png'
        elif file_path.suffix.lower() == '.gif':
            content_type = 'image/gif'
        else:
            content_type = 'application/octet-stream'
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        with open(file_path, 'rb') as f:
            s3_client.put_object(
                Bucket=R2_BUCKET,
                Key=s3_key,
                Body=f,
                ContentType=content_type,
                Metadata=metadata
            )
        
        if pbar:
            pbar.update(1)
            pbar.set_postfix({'current': file_path.name[:30]})
        
        return {
            'status': 'success',
            'file': str(file_path),
            's3_key': s3_key,
            'size': file_size,
            'timestamp': datetime.now().isoformat()
        }
        
    except Exception as e:
        return {
            'status': 'error',
            'file': str(file_path),
            's3_key': s3_key,
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }

def verify_bucket_access(s3_client):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–∞–∫–µ—Ç—É."""
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
        s3_client.list_objects_v2(Bucket=R2_BUCKET, MaxKeys=1)
        return True
    except ClientError as e:
        error_code = e.response['Error']['Code']
        if error_code == '404':
            print(f"‚ùå Bucket '{R2_BUCKET}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        elif error_code == '403':
            print(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ bucket '{R2_BUCKET}'")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ bucket: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def main():
    print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞—Ç–µ–∫–∏ –≤ Cloudflare R2")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    if not SELECTED_MEDIA.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ {SELECTED_MEDIA} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return 1
    
    # –°–æ–∑–¥–∞–µ–º S3 –∫–ª–∏–µ–Ω—Ç
    print("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ R2...")
    s3_client = get_s3_client()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not verify_bucket_access(s3_client):
        return 1
    
    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ bucket: {R2_BUCKET}")
    print(f"   Endpoint: {R2_ENDPOINT}")
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã
    print("\nüìÇ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...")
    all_files = get_all_files()
    print(f"   –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(all_files)}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    uploaded_files = load_upload_state()
    files_to_upload = [(f, k) for f, k in all_files if k not in uploaded_files]
    
    if not files_to_upload:
        print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        return 0
    
    print(f"   –ö –∑–∞–≥—Ä—É–∑–∫–µ: {len(files_to_upload)} —Ñ–∞–π–ª–æ–≤")
    
    # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    total_size = sum(f.stat().st_size for f, _ in files_to_upload)
    print(f"   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size / (1024**3):.2f} GB")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–ª–∞–≥ --auto)
    import sys
    if '--auto' in sys.argv:
        print("\n" + "=" * 60)
        print("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º - –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...")
    else:
        print("\n" + "=" * 60)
        try:
            response = input("–ù–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É? (y/n): ")
            if response.lower() != 'y':
                print("–û—Ç–º–µ–Ω–µ–Ω–æ")
                return 0
        except EOFError:
            print("üöÄ –ù–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º - –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã
    print("\nüì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤...")
    results = []
    errors = []
    
    with tqdm(total=len(files_to_upload), unit='—Ñ–∞–π–ª–æ–≤') as pbar:
        with ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
            futures = {
                executor.submit(upload_file, s3_client, file_path, s3_key, pbar): (file_path, s3_key)
                for file_path, s3_key in files_to_upload
            }
            
            for future in as_completed(futures):
                file_path, s3_key = futures[future]
                try:
                    result = future.result()
                    results.append(result)
                    
                    if result['status'] == 'success':
                        uploaded_files.add(s3_key)
                        save_upload_state(uploaded_files)
                    else:
                        errors.append(result)
                        
                except Exception as e:
                    errors.append({
                        'status': 'error',
                        'file': str(file_path),
                        's3_key': s3_key,
                        'error': str(e)
                    })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
    log_data = {
        'upload_date': datetime.now().isoformat(),
        'total_files': len(all_files),
        'uploaded': len(uploaded_files),
        'errors': len(errors),
        'results': results
    }
    
    with open(UPLOAD_LOG, 'w') as f:
        json.dump(log_data, f, indent=2)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ó–ê–ì–†–£–ó–ö–ò")
    print("-" * 60)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(uploaded_files)}/{len(all_files)}")
    
    if errors:
        print(f"‚ùå –û—à–∏–±–æ–∫: {len(errors)}")
        print("\n–ü–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫:")
        for err in errors[:5]:
            print(f"  ‚Ä¢ {err['file']}: {err.get('error', 'Unknown error')}")
    
    print(f"\nüìù –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {UPLOAD_LOG}")
    print(f"üìå –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {UPLOAD_STATE}")
    
    if len(uploaded_files) == len(all_files):
        print("\nüéâ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ R2!")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã URL
        print("\nüîó –ü—Ä–∏–º–µ—Ä—ã URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:")
        example_keys = list(uploaded_files)[:3]
        for key in example_keys:
            # –ü—É–±–ª–∏—á–Ω—ã–π URL (–µ—Å–ª–∏ bucket –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–∫ –ø—É–±–ª–∏—á–Ω—ã–π)
            public_url = f"https://pub-92568f8b8a15c68a9ece5fe08c66485b.r2.dev/{key}"
            print(f"  ‚Ä¢ {public_url}")
        
        return 0
    else:
        print(f"\n‚ö†Ô∏è  –ù–µ –≤—Å–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–ª—è –¥–æ–∫–∞—á–∫–∏.")
        return 1

if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
        sys.exit(1)