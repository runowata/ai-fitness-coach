#!/usr/bin/env python3
"""
üóÑÔ∏è SIMPLE CLEAN DATABASE CREATION
Creates fresh migrations and applies them for a clean database start
"""
import os
import sys
import django
from pathlib import Path

# Setup Django
sys.path.append(str(Path(__file__).parent))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

def print_header(title):
    print(f"\n{'='*60}")
    print(f"üöÄ {title}")
    print('='*60)

def main():
    print_header("CREATING CLEAN AI FITNESS COACH DATABASE")
    
    print("üéØ Creating fresh migrations and clean database...")
    
    # Step 1: Remove existing database file (SQLite)
    db_file = Path('db.sqlite3')
    if db_file.exists():
        db_file.unlink()
        print("‚úÖ Removed existing database file")
    
    # Step 2: Remove migration files
    apps_dir = Path('apps')
    for app_dir in apps_dir.iterdir():
        if app_dir.is_dir():
            migrations_dir = app_dir / 'migrations'
            if migrations_dir.exists():
                for migration_file in migrations_dir.glob('*.py'):
                    if migration_file.name != '__init__.py':
                        migration_file.unlink()
                        print(f"üóëÔ∏è  Removed {migration_file}")
    
    # Step 3: Create fresh migrations
    print("\nüìã Creating fresh migrations...")
    os.system("python manage.py makemigrations users")
    os.system("python manage.py makemigrations onboarding")
    os.system("python manage.py makemigrations workouts")
    os.system("python manage.py makemigrations achievements")
    os.system("python manage.py makemigrations content")
    
    # Step 4: Apply migrations
    print("\nüîß Applying migrations...")
    os.system("python manage.py migrate")
    
    # Step 5: Seed essential data
    print("\nüå± Seeding essential data...")
    seed_data()
    
    print_header("‚úÖ CLEAN DATABASE CREATED SUCCESSFULLY")
    
    print("""
üéâ READY TO TEST:
1. Register new user: Visit /users/register/
2. Complete onboarding: Answer 5 questions + choose archetype
3. Get AI workout plan: Generated by OpenAI with your preferences
4. Start training: Daily workouts with video instructions

üóÑÔ∏è DATABASE CONTAINS:
   ‚Ä¢ 5 onboarding questions with answer options
   ‚Ä¢ 6 basic exercises (push-ups, squats, etc.)
   ‚Ä¢ 4 starter achievements
   ‚Ä¢ Clean user/profile structure with XP system
""")

def seed_data():
    """Seed the database with essential data"""
    from apps.onboarding.models import OnboardingQuestion, AnswerOption
    from apps.workouts.models import Exercise
    from apps.achievements.models import Achievement
    
    # Onboarding questions
    questions_data = [
        {
            "order": 1,
            "question_text": "–ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞ –≤ —Ñ–∏—Ç–Ω–µ—Å–µ?",
            "question_type": "single_choice", 
            "ai_field_name": "experience_level",
            "options": [
                ("–ù–æ–≤–∏—á–æ–∫", "beginner"),
                ("–ï—Å—Ç—å –æ–ø—ã—Ç", "intermediate"), 
                ("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "advanced")
            ]
        },
        {
            "order": 2,
            "question_text": "–ö–∞–∫–∞—è –≤–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å?",
            "question_type": "single_choice",
            "ai_field_name": "primary_goal", 
            "options": [
                ("–ù–∞–±—Ä–∞—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É", "bulk"),
                ("–ü–æ—Ö—É–¥–µ—Ç—å", "cut"),
                ("–û–±—â–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞", "general_fitness")
            ]
        },
        {
            "order": 3, 
            "question_text": "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é –≥–æ—Ç–æ–≤—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è?",
            "question_type": "single_choice",
            "ai_field_name": "days_per_week",
            "options": [("3 –¥–Ω—è", "3"), ("4 –¥–Ω—è", "4"), ("5+ –¥–Ω–µ–π", "5")]
        },
        {
            "order": 4,
            "question_text": "–ö–∞–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É –≤–∞—Å –µ—Å—Ç—å?",
            "question_type": "single_choice",
            "ai_field_name": "available_equipment",
            "options": [
                ("–¢–æ–ª—å–∫–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ—Å", "bodyweight_only"),
                ("–ì–∞–Ω—Ç–µ–ª–∏", "dumbbells"),
                ("–ü–æ–ª–Ω—ã–π –∑–∞–ª", "full_gym")
            ]
        },
        {
            "order": 5,
            "question_text": "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤—ã —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?",
            "question_type": "single_choice", 
            "ai_field_name": "workout_duration",
            "options": [("30 –º–∏–Ω—É—Ç", "30"), ("45 –º–∏–Ω—É—Ç", "45"), ("60+ –º–∏–Ω—É—Ç", "60")]
        }
    ]
    
    for q_data in questions_data:
        question = OnboardingQuestion.objects.create(
            order=q_data["order"],
            question_text=q_data["question_text"],
            question_type=q_data["question_type"],
            ai_field_name=q_data["ai_field_name"],
            is_required=True,
            is_active=True
        )
        print(f"‚úÖ Created question: {question.question_text}")
        
        for i, (text, value) in enumerate(q_data["options"]):
            AnswerOption.objects.create(
                question=question,
                option_text=text,
                option_value=value,
                order=i
            )
    
    # Basic exercises
    exercises = [
        {"id": "push-ups", "name": "–û—Ç–∂–∏–º–∞–Ω–∏—è", "difficulty": "beginner"},
        {"id": "squats", "name": "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è", "difficulty": "beginner"}, 
        {"id": "plank", "name": "–ü–ª–∞–Ω–∫–∞", "difficulty": "beginner"},
        {"id": "pull-ups", "name": "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è", "difficulty": "intermediate"},
        {"id": "deadlift", "name": "–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞", "difficulty": "intermediate"},
        {"id": "bench-press", "name": "–ñ–∏–º –ª–µ–∂–∞", "difficulty": "intermediate"},
    ]
    
    for ex in exercises:
        Exercise.objects.create(
            id=ex["id"],
            slug=ex["id"],
            name=ex["name"],
            difficulty=ex["difficulty"],
            description=f"–ë–∞–∑–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {ex['name']}",
            muscle_groups=["core"],
            equipment_needed=["bodyweight"],
            is_active=True
        )
        print(f"‚úÖ Created exercise: {ex['name']}")
    
    # Basic achievements
    achievements = [
        {"slug": "first-workout", "name": "–ü–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "trigger_type": "workout_count", "trigger_value": 1, "xp_reward": 100},
        {"slug": "week-streak", "name": "–ù–µ–¥–µ–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", "trigger_type": "streak_days", "trigger_value": 7, "xp_reward": 200},
        {"slug": "ten-workouts", "name": "10 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", "trigger_type": "workout_count", "trigger_value": 10, "xp_reward": 500},
        {"slug": "level-up", "name": "–í—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å", "trigger_type": "level_reached", "trigger_value": 2, "xp_reward": 0},
    ]
    
    for ach in achievements:
        Achievement.objects.create(
            slug=ach["slug"],
            name=ach["name"],
            description=f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {ach['name']}",
            trigger_type=ach["trigger_type"],
            trigger_value=ach["trigger_value"],
            xp_reward=ach["xp_reward"],
            is_active=True
        )
        print(f"‚úÖ Created achievement: {ach['name']}")

if __name__ == "__main__":
    main()