#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ 616 –≤–∏–¥–µ–æ –∏ —Å—Ö–µ–º–µ: 3 –Ω–µ–¥–µ–ª–∏ –≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è ‚Üí –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ‚Üí 3 –Ω–µ–¥–µ–ª–∏ —Ç–æ–ª—å–∫–æ 4-5 –∑–≤–µ–∑–¥
"""

import os
import sys
import django

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
django.setup()

from apps.workouts.models import VideoClip, Exercise, WorkoutPlan, DailyWorkout

def analyze_current_ai_logic():
    """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–∏ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    print("üîç –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ô AI –õ–û–ì–ò–ö–ò –ì–ï–ù–ï–†–ê–¶–ò–ò –ü–õ–ï–ô–õ–ò–°–¢–û–í")
    print("=" * 70)
    
    # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å AI –ø—Ä–æ–º–ø—Ç–∞–º–∏
    prompt_files = [
        '/Users/alexbel/Desktop/AI Fitness Coach/prompts/workout_plan_bro.txt',
        '/Users/alexbel/Desktop/AI Fitness Coach/prompts/workout_plan_sergeant.txt', 
        '/Users/alexbel/Desktop/AI Fitness Coach/prompts/workout_plan_intellectual.txt'
    ]
    
    print("\nüìÑ AI –ø—Ä–æ–º–ø—Ç —Ñ–∞–π–ª—ã:")
    for file_path in prompt_files:
        if os.path.exists(file_path):
            print(f"  ‚úÖ {os.path.basename(file_path)}")
            # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            with open(file_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()[:10]
                print(f"     –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏: {len(lines)} —Å—Ç—Ä–æ–∫")
        else:
            print(f"  ‚ùå {os.path.basename(file_path)} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –ø–ª–∞–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    print(f"\nüìä –¢–µ–∫—É—â–∏–µ –ø–ª–∞–Ω—ã –≤ –ë–î:")
    plans_count = WorkoutPlan.objects.count()
    active_plans = WorkoutPlan.objects.filter(is_active=True).count()
    
    print(f"  –í—Å–µ–≥–æ –ø–ª–∞–Ω–æ–≤: {plans_count}")
    print(f"  –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤: {active_plans}")
    
    if active_plans > 0:
        sample_plan = WorkoutPlan.objects.filter(is_active=True).first()
        print(f"\nüîç –ü—Ä–∏–º–µ—Ä –ø–ª–∞–Ω–∞ (ID: {sample_plan.id}):")
        print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {sample_plan.name}")
        print(f"  –ù–µ–¥–µ–ª—å: {sample_plan.duration_weeks}")
        print(f"  –¶–µ–ª—å: {sample_plan.goal}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É plan_data
        if sample_plan.plan_data:
            print(f"  –ö–ª—é—á–∏ –≤ plan_data: {list(sample_plan.plan_data.keys())}")

def design_new_playlist_structure():
    """–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤"""
    print("\n\nüéØ –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ü–õ–ï–ô–õ–ò–°–¢–û–í –ù–ê –û–°–ù–û–í–ï 616 –í–ò–î–ï–û")
    print("=" * 70)
    
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞—à–∏—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ
    video_structure = {
        'exercises': {
            'warmup': {'count': 42, 'description': '–†–∞–∑–º–∏–Ω–æ—á–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è'},
            'main': {'count': 145, 'description': '–û—Å–Ω–æ–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (105 –±–∞–∑–æ–≤—ã—Ö + 40 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö)'},
            'endurance': {'count': 42, 'description': '–°–µ–∫—Å—É–∞–ª—å–Ω–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å'}, 
            'cooldown': {'count': 42, 'description': '–†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ –∏ —Ä–∞—Å—Ç—è–∂–∫–∞'}
        },
        'motivational': {
            'intro': {'count': 63, 'description': '–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (21 –¥–µ–Ω—å √ó 3 —Ç—Ä–µ–Ω–µ—Ä–∞)'},
            'after_warmup': {'count': 63, 'description': '–ú–æ—Ç–∏–≤–∞—Ü–∏—è –ø–æ—Å–ª–µ —Ä–∞–∑–º–∏–Ω–∫–∏'},
            'after_main': {'count': 63, 'description': '–ú–æ—Ç–∏–≤–∞—Ü–∏—è –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö'},
            'motivating_speech': {'count': 63, 'description': '–ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π —Ä–æ–ª–∏–∫ —Ç—Ä–µ–Ω–µ—Ä–∞'},
            'farewell': {'count': 63, 'description': '–ù–∞–ø—É—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ'},
            'weekly': {'count': 18, 'description': '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ (6 –Ω–µ–¥–µ–ª—å √ó 3 —Ç—Ä–µ–Ω–µ—Ä–∞)'},
            'biweekly': {'count': 9, 'description': '–î–≤—É—Ö–Ω–µ–¥–µ–ª—å–Ω—ã–µ (3 —Ä–∞–∑–∞ √ó 3 —Ç—Ä–µ–Ω–µ—Ä–∞)'},
            'final': {'count': 3, 'description': '–§–∏–Ω–∞–ª—å–Ω—ã–µ (3 —Ç—Ä–µ–Ω–µ—Ä–∞)'}
        }
    }
    
    print("\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∏–¥–µ–æ –¥–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤:")
    
    for category, subcats in video_structure.items():
        print(f"\nüé¨ {category.upper()}:")
        total = 0
        for subcat, info in subcats.items():
            print(f"  - {subcat:15}: {info['count']:3d} –≤–∏–¥–µ–æ | {info['description']}")
            total += info['count']
        print(f"  üìà –ò—Ç–æ–≥–æ {category}: {total} –≤–∏–¥–µ–æ")
    
    # –õ–æ–≥–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –Ω–µ–¥–µ–ª—è–º
    print(f"\nüìÖ –õ–û–ì–ò–ö–ê –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ü–û 6 –ù–ï–î–ï–õ–Ø–ú:")
    
    weeks_structure = {
        'week_1-3': {
            'name': '–ü–µ—Ä–≤—ã–µ 3 –Ω–µ–¥–µ–ª–∏',
            'strategy': '–í—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤',
            'daily_exercises': {
                'warmup': 2,      # 2 —Ä–∞–∑–º–∏–Ω–æ—á–Ω—ã—Ö
                'main': 5,        # 5 –æ—Å–Ω–æ–≤–Ω—ã—Ö
                'endurance': 2,   # 2 –Ω–∞ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å
                'cooldown': 2     # 2 —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏—Ö
            },
            'total_per_day': 11,
            'total_per_3_weeks': 11 * 21  # 231 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∑–∞ 3 –Ω–µ–¥–µ–ª–∏
        },
        'feedback_collection': {
            'name': '–°–±–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏',
            'strategy': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞–∂–¥–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 5',
            'purpose': '–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª—é–±–∏–º—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        },
        'week_4-6': {
            'name': '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –Ω–µ–¥–µ–ª–∏', 
            'strategy': '–¢–æ–ª—å–∫–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –æ—Ü–µ–Ω–∫–∞–º–∏ 4-5',
            'daily_exercises': {
                'warmup': 2,      # –¢–æ–ª—å–∫–æ –ª—é–±–∏–º—ã–µ —Ä–∞–∑–º–∏–Ω–æ—á–Ω—ã–µ
                'main': 5,        # –¢–æ–ª—å–∫–æ –ª—é–±–∏–º—ã–µ –æ—Å–Ω–æ–≤–Ω—ã–µ
                'endurance': 2,   # –¢–æ–ª—å–∫–æ –ª—é–±–∏–º—ã–µ –Ω–∞ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å
                'cooldown': 2     # –¢–æ–ª—å–∫–æ –ª—é–±–∏–º—ã–µ —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–µ
            },
            'total_per_day': 11,
            'selection_criteria': '–†–µ–π—Ç–∏–Ω–≥ ‚â• 4 –∑–≤–µ–∑–¥—ã'
        }
    }
    
    for period, info in weeks_structure.items():
        print(f"\nüìã {info['name']}:")
        print(f"  üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {info['strategy']}")
        if 'daily_exercises' in info:
            print(f"  üìä –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –¥–µ–Ω—å:")
            total_daily = 0
            for ex_type, count in info['daily_exercises'].items():
                print(f"    - {ex_type:10}: {count} –≤–∏–¥–µ–æ")
                total_daily += count
            print(f"    üìà –ò—Ç–æ–≥–æ: {total_daily} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –¥–µ–Ω—å")
        if 'purpose' in info:
            print(f"  üéØ –¶–µ–ª—å: {info['purpose']}")
        if 'selection_criteria' in info:
            print(f"  ‚≠ê –ö—Ä–∏—Ç–µ—Ä–∏–π –æ—Ç–±–æ—Ä–∞: {info['selection_criteria']}")

def design_ai_prompt_structure():
    """–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã AI –ø—Ä–æ–º–ø—Ç–æ–≤"""
    print(f"\n\nü§ñ –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê AI –ü–†–û–ú–ü–¢–û–í")
    print("=" * 70)
    
    prompt_structure = {
        'input_data': [
            '–ê—Ä—Ö–µ—Ç–∏–ø —Ç—Ä–µ–Ω–µ—Ä–∞ (bro/sergeant/intellectual)',
            '–ù–µ–¥–µ–ª—è –∫—É—Ä—Å–∞ (1-6)',
            '–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (1-7)',
            '–î–æ—Å—Ç—É–ø–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (–ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π)',
            '–ò—Å—Ç–æ—Ä–∏—è –æ—Ü–µ–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –Ω–µ–¥–µ–ª—å 4-6)'
        ],
        'output_format': {
            'daily_structure': [
                {'type': 'motivational', 'category': 'intro', 'trainer_dependent': True},
                {'type': 'exercise', 'category': 'warmup', 'count': 2},
                {'type': 'motivational', 'category': 'after_warmup', 'trainer_dependent': True},
                {'type': 'exercise', 'category': 'main', 'count': 5},
                {'type': 'motivational', 'category': 'after_main', 'trainer_dependent': True},
                {'type': 'exercise', 'category': 'endurance', 'count': 2},
                {'type': 'motivational', 'category': 'motivating_speech', 'trainer_dependent': True},
                {'type': 'exercise', 'category': 'cooldown', 'count': 2},
                {'type': 'motivational', 'category': 'farewell', 'trainer_dependent': True}
            ],
            'special_days': {
                'sunday': 'weekly motivational video (10 min)',
                'every_2_weeks': 'biweekly progress video (15 min)',
                'final_day': 'final congratulation video'
            }
        },
        'constraints': [
            '–ù–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –ø–µ—Ä–≤—ã–µ 3 –Ω–µ–¥–µ–ª–∏',
            '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ 4-5 –∑–≤–µ–∑–¥–æ—á–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –Ω–µ–¥–µ–ª–∏',
            '–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–Ω—é –∫—É—Ä—Å–∞ –∏ –∞—Ä—Ö–µ—Ç–∏–ø—É',
            '–°–æ–±–ª—é–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å –≥—Ä—É–ø–ø –º—ã—à—Ü –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è—Ö'
        ]
    }
    
    print(f"\nüì• –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è AI:")
    for i, item in enumerate(prompt_structure['input_data'], 1):
        print(f"  {i}. {item}")
    
    print(f"\nüì§ –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    print(f"  üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–Ω—è ({len(prompt_structure['output_format']['daily_structure'])} —ç–ª–µ–º–µ–Ω—Ç–æ–≤):")
    
    for i, item in enumerate(prompt_structure['output_format']['daily_structure'], 1):
        trainer_mark = " (üë®‚Äçüè´ –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞)" if item.get('trainer_dependent') else ""
        count_mark = f" √ó {item['count']}" if 'count' in item else ""
        print(f"    {i:2d}. {item['type']:12} | {item['category']:15}{count_mark}{trainer_mark}")
    
    print(f"\nüéØ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –ø—Ä–∞–≤–∏–ª–∞:")
    for i, constraint in enumerate(prompt_structure['constraints'], 1):
        print(f"  {i}. {constraint}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    print("üöÄ –ê–ù–ê–õ–ò–ó –ù–û–í–û–ô –°–ò–°–¢–ï–ú–´ –ì–ï–ù–ï–†–ê–¶–ò–ò –ü–õ–ï–ô–õ–ò–°–¢–û–í")
    print("=" * 80)
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–≥–∏–∫—É
        analyze_current_ai_logic()
        
        # –ü—Ä–æ–µ–∫—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        design_new_playlist_structure()
        
        # –ü—Ä–æ–µ–∫—Ç–∏—Ä—É–µ–º AI –ø—Ä–æ–º–ø—Ç—ã
        design_ai_prompt_structure()
        
        print(f"\n\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        print("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ 616 –≤–∏–¥–µ–æ.")
        print("–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –ø–µ—Ä–≤—ã—Ö 3 –Ω–µ–¥–µ–ª—å –∏ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()