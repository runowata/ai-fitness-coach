name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_ai_fitness_coach
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_ai_fitness_coach
      REDIS_URL: redis://localhost:6379
      SECRET_KEY: test-secret-key-for-ci
      DEBUG: False
      OPENAI_API_KEY: test-key
      METRICS_BACKEND: logging
      SHOW_AI_ANALYSIS: True
      AI_REPROMPT_MAX_ATTEMPTS: 1
      FALLBACK_TO_LEGACY_FLOW: False

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Check code style
      run: |
        # Check import sorting
        isort . --check-only --profile=black
        
        # Check code formatting
        black --check . --line-length 100
        
        # Run linter
        flake8 --max-line-length=100
    
    - name: Check migrations are up to date
      env:
        SECRET_KEY: test-key
      run: |
        # This will fail if models and migrations are out of sync
        python manage.py makemigrations --check --dry-run

    - name: Block unsafe migration edits (compare to origin/main)
      run: |
        bash scripts/ci/block_migration_edits_ci.sh
    
    - name: Run migrations
      run: |
        python manage.py migrate --settings=config.settings
    
    - name: Test fresh database migrations
      run: |
        # Test constraint functionality on fresh PostgreSQL database
        python scripts/test_weekly_lesson_constraints.py
    
    - name: Run tests with coverage
      run: |
        pytest \
          --cov=apps \
          --cov-report=term-missing \
          --cov-report=xml \
          --cov-fail-under=85 \
          --maxfail=1 \
          --durations=10 \
          -v \
          -m "not slow"
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-slow:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_ai_fitness_coach
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_ai_fitness_coach
      REDIS_URL: redis://localhost:6379
      SECRET_KEY: test-secret-key-for-ci
      DEBUG: False
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      METRICS_BACKEND: logging

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run migrations
      run: |
        python manage.py migrate --settings=config.settings
    
    - name: Run slow/integration tests
      run: |
        pytest \
          --maxfail=3 \
          --durations=20 \
          -v \
          -m "slow or e2e"

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit
    
    - name: Run safety check
      run: |
        safety check --json || true
    
    - name: Run bandit security check
      run: |
        bandit -r apps/ -ll -f json || true

  lint-additional:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install ruff mypy
        pip install -r requirements.txt
    
    - name: Run ruff
      run: |
        ruff check apps/ --output-format=github
    
    - name: Run mypy (optional)
      run: |
        mypy apps/ --ignore-missing-imports || true