import json

from django.contrib.auth import get_user_model
from django.core.management.base import BaseCommand
from django.template import Context, Template
from django.template.loader import get_template

User = get_user_model()


class Command(BaseCommand):
    help = "Test comprehensive template rendering with mock data"
    
    def add_arguments(self, parser):
        parser.add_argument('--template', type=str, choices=['ai_analysis', 'plan_preview'], 
                          default='ai_analysis', help='Which template to test')
        parser.add_argument('--archetype', type=str, choices=['mentor', 'professional', 'peer'], 
                          default='mentor', help='Trainer archetype to test')
        parser.add_argument('--verbose', action='store_true', help='Verbose output')

    def handle(self, *args, **options):
        template_name = options['template']
        archetype = options['archetype']
        verbose = options['verbose']
        
        self.stdout.write("üß™ Testing comprehensive template rendering...")
        
        # Create mock comprehensive data
        mock_comprehensive_data = {
            'user_analysis': {
                'fitness_level_assessment': "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å —Ö–æ—Ä–æ—à–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è.",
                'psychological_profile': "–ú–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–≤–∏—á–æ–∫, –≥–æ—Ç–æ–≤—ã–π –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ –Ω–∞–¥ —Å–æ–±–æ–π.",
                'limitations_analysis': "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è.",
                'interaction_strategy': "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏–π.",
                'archetype_adaptation': "–ú—É–¥—Ä—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ–¥—Ö–æ–¥ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
            },
            'motivation_system': {
                'psychological_support': "–°–∏—Å—Ç–µ–º–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
                'reward_system': "–ò–≥—Ä–æ—Ñ–∏–∫–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.",
                'confidence_building': "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–µ–±–æ–ª—å—à–∏–µ –≤—ã–∑–æ–≤—ã –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Å–µ–±–µ.",
                'community_integration': "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–µ–ª–∏—Ç—å—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–æ–æ–±—â–µ—Å—Ç–≤–∞."
            },
            'long_term_strategy': {
                'progression_plan': "3-–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞–Ω —Å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ —Ü–µ–ª–µ–π.",
                'adaptation_triggers': "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ü–µ–ª–µ–π.",
                'lifestyle_integration': "–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—É—é –∂–∏–∑–Ω—å.",
                'success_metrics': "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è."
            }
        }
        
        # Create mock training program data
        mock_plan_data = {
            'plan_name': '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏',
            'goal': '–û–±—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—ã –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏',
            'duration_weeks': 8,
            'weeks': [
                {
                    'week_number': 1,
                    'days': [
                        {
                            'workout_name': '–ë–∞–∑–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
                            'is_rest_day': False,
                            'exercises': [
                                {
                                    'exercise_name': '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è',
                                    'exercise_slug': 'squats',
                                    'sets': 3,
                                    'reps': 15,
                                    'rest_seconds': 60
                                },
                                {
                                    'exercise_name': '–û—Ç–∂–∏–º–∞–Ω–∏—è',
                                    'exercise_slug': 'pushups',
                                    'sets': 3,
                                    'reps': 10,
                                    'rest_seconds': 60
                                }
                            ],
                            'confidence_task': '–°–µ–≥–æ–¥–Ω—è —Å–¥–µ–ª–∞–π—Ç–µ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –Ω–µ–∑–Ω–∞–∫–æ–º–æ–º—É —á–µ–ª–æ–≤–µ–∫—É'
                        }
                    ]
                }
            ] * 4  # Create 4 weeks of similar data
        }
        
        # Mock context data
        context_data = {
            'comprehensive_data': mock_comprehensive_data,
            'plan_data': mock_plan_data,
            'training_program': mock_plan_data,
            'archetype': archetype,
            'user_level': 'Comprehensive',
            'plan': type('MockPlan', (), {
                'ai_analysis': mock_comprehensive_data,
                'plan_data': mock_plan_data
            })()
        }
        
        # Test template rendering
        template_file = f'onboarding/{template_name}_comprehensive.html'
        
        try:
            if verbose:
                self.stdout.write(f"üìã Loading template: {template_file}")
                self.stdout.write(f"üë§ Using archetype: {archetype}")
                self.stdout.write(f"üìä Mock data keys: {list(context_data.keys())}")
            
            # Load and render template
            template = get_template(template_file)
            rendered_html = template.render(context_data)
            
            if verbose:
                # Check for common Django template errors
                if 'VariableDoesNotExist' in rendered_html:
                    self.stdout.write(self.style.WARNING("‚ö†Ô∏è  Found VariableDoesNotExist in output"))
                
                # Check length
                self.stdout.write(f"üìè Rendered HTML length: {len(rendered_html)} characters")
                
                # Check for empty blocks
                if len(rendered_html.strip()) < 1000:
                    self.stdout.write(self.style.WARNING("‚ö†Ô∏è  Rendered output seems too short"))
            
            self.stdout.write(self.style.SUCCESS(f"‚úÖ Template '{template_file}' rendered successfully"))
            
            # Test with empty data to check error handling
            if verbose:
                self.stdout.write("\nüß™ Testing with empty data...")
                empty_context = {
                    'comprehensive_data': {},
                    'plan_data': {},
                    'training_program': {},
                    'archetype': archetype,
                    'user_level': 'Test',
                    'plan': type('MockPlan', (), {
                        'ai_analysis': {},
                        'plan_data': {}
                    })()
                }
                
                empty_rendered = template.render(empty_context)
                if len(empty_rendered.strip()) > 0:
                    self.stdout.write(self.style.SUCCESS("‚úÖ Template handles empty data gracefully"))
                else:
                    self.stdout.write(self.style.ERROR("‚ùå Template fails with empty data"))
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå Template rendering failed: {str(e)}"))
            if verbose:
                import traceback
                self.stdout.write(traceback.format_exc())
            return
        
        self.stdout.write(self.style.SUCCESS("\nüéâ Template rendering test completed successfully!"))
        if not verbose:
            self.stdout.write("Use --verbose for detailed output")