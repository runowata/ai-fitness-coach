# Generated by Django 5.0.6 on 2025-07-23 17:55

from django.db import migrations


def rebuild_users_table(apps, schema_editor):
    """Completely rebuild the users table to match our model"""
    with schema_editor.connection.cursor() as cursor:
        # Get all existing data first
        cursor.execute("SELECT id, username, email, password, first_name, last_name, is_staff, is_active, date_joined, last_login, is_superuser FROM users ORDER BY id;")
        existing_users = cursor.fetchall()
        
        # Drop and recreate the users table
        cursor.execute("DROP TABLE IF EXISTS users CASCADE;")
        
        # Create fresh users table matching our exact model
        cursor.execute("""
            CREATE TABLE users (
                id BIGSERIAL PRIMARY KEY,
                password VARCHAR(128) NOT NULL,
                last_login TIMESTAMPTZ,
                is_superuser BOOLEAN NOT NULL DEFAULT FALSE,
                username VARCHAR(150) NOT NULL UNIQUE,
                first_name VARCHAR(150) NOT NULL DEFAULT '',
                last_name VARCHAR(150) NOT NULL DEFAULT '',
                email VARCHAR(254) NOT NULL UNIQUE,
                is_staff BOOLEAN NOT NULL DEFAULT FALSE,
                is_active BOOLEAN NOT NULL DEFAULT TRUE,
                date_joined TIMESTAMPTZ NOT NULL DEFAULT NOW(),
                timezone VARCHAR(50) NOT NULL DEFAULT 'Europe/Zurich',
                measurement_system VARCHAR(10) NOT NULL DEFAULT 'metric',
                is_adult_confirmed BOOLEAN NOT NULL DEFAULT FALSE,
                created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
                updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
                is_2fa_enabled BOOLEAN NOT NULL DEFAULT FALSE,
                totp_secret VARCHAR(32) NOT NULL DEFAULT ''
            );
        """)
        
        # Create indexes
        cursor.execute("CREATE INDEX users_email_4b85f2_idx ON users (email);")
        cursor.execute("CREATE INDEX users_created_6541e9_idx ON users (created_at);")
        
        # Restore existing users
        for user_data in existing_users:
            cursor.execute("""
                INSERT INTO users (id, username, email, password, first_name, last_name, is_staff, is_active, date_joined, last_login, is_superuser)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """, user_data)
        
        # Update sequence
        cursor.execute("SELECT setval('users_id_seq', COALESCE((SELECT MAX(id) FROM users), 1));")


def reverse_rebuild_users_table(apps, schema_editor):
    """This migration is not reversible"""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0004_auto_20250723_1744'),
    ]

    operations = [
        migrations.RunPython(rebuild_users_table, reverse_rebuild_users_table),
    ]
