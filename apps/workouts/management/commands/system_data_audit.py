from django.core.management.base import BaseCommand
from django.db import connection
from apps.workouts.models import CSVExercise, VideoClip, DailyWorkout, WorkoutPlan
from apps.workouts.constants import VideoKind, Archetype
from apps.users.models import User
import json


class Command(BaseCommand):
    help = "Audit system data: exercises, videos, users, plans"

    def add_arguments(self, parser):
        parser.add_argument('--verbose', action='store_true', help='Verbose output')
        parser.add_argument('--check-r2', action='store_true', help='Check R2 storage connectivity')

    def handle(self, *args, **options):
        verbose = options['verbose']
        check_r2 = options['check_r2']
        
        self.stdout.write("üîç –°–ò–°–¢–ï–ú–ê –î–ê–ù–ù–´–• - –ü–û–õ–ù–´–ô –ê–£–î–ò–¢")
        self.stdout.write("=" * 50)
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        self.audit_exercises(verbose)
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–µ–æ –∫–ª–∏–ø–æ–≤
        self.audit_video_clips(verbose)
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–ª–∞–Ω–æ–≤
        self.audit_users_and_plans(verbose)
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ —Å R2
        if check_r2:
            self.audit_r2_storage(verbose)
        
        # 5. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.generate_summary()

    def audit_exercises(self, verbose):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        self.stdout.write("\nüìö –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø")
        self.stdout.write("-" * 20)
        
        total_exercises = CSVExercise.objects.count()
        active_exercises = CSVExercise.objects.filter(is_active=True).count()
        
        self.stdout.write(f"üìä –í—Å–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {total_exercises}")
        self.stdout.write(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {active_exercises}")
        
        if total_exercises == 0:
            self.stdout.write(self.style.ERROR("‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ù–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!"))
            self.stdout.write("   üí° –ù—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å: python manage.py import_exercises_v2")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        if verbose:
            self.stdout.write("\nüìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:")
            categories = CSVExercise.objects.values('category').distinct()
            for cat in categories:
                count = CSVExercise.objects.filter(category=cat['category']).count()
                self.stdout.write(f"   ‚Ä¢ {cat['category']}: {count} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
        
        # –ü—Ä–∏–º–µ—Ä—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        sample_exercises = CSVExercise.objects.all()[:5]
        if sample_exercises:
            self.stdout.write("\nüìù –ü—Ä–∏–º–µ—Ä—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:")
            for ex in sample_exercises:
                self.stdout.write(f"   ‚Ä¢ {ex.id}: {ex.name}")

    def audit_video_clips(self, verbose):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–µ–æ –∫–ª–∏–ø–æ–≤"""
        self.stdout.write("\nüé¨ –í–ò–î–ï–û –ö–õ–ò–ü–´")
        self.stdout.write("-" * 20)
        
        total_clips = VideoClip.objects.count()
        active_clips = VideoClip.objects.filter(is_active=True).count()
        placeholder_clips = VideoClip.objects.filter(is_placeholder=True).count()
        
        self.stdout.write(f"üìä –í—Å–µ–≥–æ –≤–∏–¥–µ–æ –∫–ª–∏–ø–æ–≤: {total_clips}")
        self.stdout.write(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–ø–æ–≤: {active_clips}")
        self.stdout.write(f"üìä Placeholder –∫–ª–∏–ø–æ–≤: {placeholder_clips}")
        
        if total_clips == 0:
            self.stdout.write(self.style.ERROR("‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ù–µ—Ç –≤–∏–¥–µ–æ –∫–ª–∏–ø–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!"))
            self.stdout.write("   üí° –ù—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å bootstrap –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ")
            return
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –≤–∏–¥–µ–æ
        self.stdout.write("\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –≤–∏–¥–µ–æ:")
        video_kinds = [VideoKind.TECHNIQUE, VideoKind.INSTRUCTION, VideoKind.MISTAKE, 
                      VideoKind.INTRO, VideoKind.CLOSING, VideoKind.WEEKLY]
        
        for kind in video_kinds:
            count = VideoClip.objects.filter(r2_kind=kind).count()
            self.stdout.write(f"   ‚Ä¢ {kind}: {count} –∫–ª–∏–ø–æ–≤")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞–º
        self.stdout.write("\nüë§ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞–º:")
        archetypes = ['mentor', 'professional', 'peer', 'bro', 'sergeant', 'intellectual']
        
        for archetype in archetypes:
            count = VideoClip.objects.filter(r2_archetype=archetype).count()
            if count > 0:
                self.stdout.write(f"   ‚Ä¢ {archetype}: {count} –∫–ª–∏–ø–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤–∏–¥–µ–æ
        exercises_with_video = VideoClip.objects.filter(
            exercise__isnull=False
        ).values('exercise').distinct().count()
        
        total_exercises = CSVExercise.objects.count()
        if total_exercises > 0:
            coverage_percent = (exercises_with_video / total_exercises) * 100
            self.stdout.write(f"\nüéØ –ü–æ–∫—Ä—ã—Ç–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤–∏–¥–µ–æ: {exercises_with_video}/{total_exercises} ({coverage_percent:.1f}%)")
        
        if verbose and VideoClip.objects.exists():
            # –ü—Ä–∏–º–µ—Ä—ã –≤–∏–¥–µ–æ
            self.stdout.write("\nüìù –ü—Ä–∏–º–µ—Ä—ã –≤–∏–¥–µ–æ –∫–ª–∏–ø–æ–≤:")
            sample_clips = VideoClip.objects.all()[:5]
            for clip in sample_clips:
                exercise_name = clip.exercise.name if clip.exercise else "–ì–ª–æ–±–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ"
                self.stdout.write(f"   ‚Ä¢ {clip.id}: {exercise_name} - {clip.r2_kind} ({clip.r2_archetype})")

    def audit_users_and_plans(self, verbose):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–ª–∞–Ω–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
        self.stdout.write("\nüë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –ò –ü–õ–ê–ù–´")
        self.stdout.write("-" * 25)
        
        total_users = User.objects.count()
        users_with_plans = User.objects.filter(workout_plans__isnull=False).distinct().count()
        total_plans = WorkoutPlan.objects.count()
        active_plans = WorkoutPlan.objects.filter(is_active=True).count()
        total_workouts = DailyWorkout.objects.count()
        completed_workouts = DailyWorkout.objects.filter(completed_at__isnull=False).count()
        
        self.stdout.write(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
        self.stdout.write(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–ª–∞–Ω–∞–º–∏: {users_with_plans}")
        self.stdout.write(f"üìä –í—Å–µ–≥–æ –ø–ª–∞–Ω–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {total_plans}")
        self.stdout.write(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤: {active_plans}")
        self.stdout.write(f"üìä –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {total_workouts}")
        self.stdout.write(f"üìä –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {completed_workouts}")
        
        if verbose and total_plans > 0:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞–º –ø–ª–∞–Ω–æ–≤
            self.stdout.write("\nüë§ –ü–ª–∞–Ω—ã –ø–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞–º:")
            with connection.cursor() as cursor:
                cursor.execute("""
                    SELECT up.archetype, COUNT(*) 
                    FROM workouts_workoutplan wp
                    JOIN users_userprofile up ON wp.user_id = up.user_id
                    WHERE up.archetype IS NOT NULL
                    GROUP BY up.archetype
                """)
                for row in cursor.fetchall():
                    self.stdout.write(f"   ‚Ä¢ {row[0]}: {row[1]} –ø–ª–∞–Ω–æ–≤")

    def audit_r2_storage(self, verbose):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ R2 —Ö—Ä–∞–Ω–∏–ª–∏—â—É"""
        self.stdout.write("\n‚òÅÔ∏è  CLOUDFLARE R2 –•–†–ê–ù–ò–õ–ò–©–ï")
        self.stdout.write("-" * 30)
        
        try:
            from apps.workouts.video_storage import R2Adapter
            from django.conf import settings
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ R2
            r2_settings = [
                'R2_ACCOUNT_ID', 'R2_ACCESS_KEY_ID', 'R2_SECRET_ACCESS_KEY', 
                'R2_BUCKET_NAME', 'R2_ENDPOINT_URL', 'R2_PUBLIC_URL'
            ]
            
            missing_settings = []
            for setting in r2_settings:
                if not hasattr(settings, setting) or not getattr(settings, setting):
                    missing_settings.append(setting)
            
            if missing_settings:
                self.stdout.write(self.style.ERROR(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ R2: {', '.join(missing_settings)}"))
            else:
                self.stdout.write("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ R2 –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                
                if verbose:
                    self.stdout.write(f"   üì¶ Bucket: {settings.R2_BUCKET_NAME}")
                    self.stdout.write(f"   üåê Public URL: {settings.R2_PUBLIC_URL}")
            
            # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞—Ç—å R2 –∞–¥–∞–ø—Ç–µ—Ä
            try:
                r2_adapter = R2Adapter()
                self.stdout.write("‚úÖ R2 –∞–¥–∞–ø—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∫–µ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–ø)
                test_clip = VideoClip.objects.filter(r2_file__isnull=False).first()
                if test_clip:
                    try:
                        exists = r2_adapter.exists(test_clip)
                        if exists:
                            self.stdout.write("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω –≤ R2")
                        else:
                            self.stdout.write("‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ R2")
                    except Exception as e:
                        self.stdout.write(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ –≤ R2: {str(e)}")
                
            except Exception as e:
                self.stdout.write(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è R2 –∞–¥–∞–ø—Ç–µ—Ä–∞: {str(e)}")
                
        except ImportError as e:
            self.stdout.write(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ R2 –º–æ–¥—É–ª–µ–π: {str(e)}")

    def generate_summary(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.stdout.write("\nüéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        self.stdout.write("=" * 20)
        
        # –°–±–æ—Ä –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
        exercises_count = CSVExercise.objects.count()
        videos_count = VideoClip.objects.count()
        users_count = User.objects.count()
        plans_count = WorkoutPlan.objects.count()
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
        system_status = "üü¢ –ì–û–¢–û–í–ê"  # –ó–µ–ª–µ–Ω—ã–π
        issues = []
        
        if exercises_count == 0:
            system_status = "üî¥ –ù–ï –ì–û–¢–û–í–ê"  # –ö—Ä–∞—Å–Ω—ã–π
            issues.append("–ù–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ")
            
        if videos_count == 0:
            system_status = "üî¥ –ù–ï –ì–û–¢–û–í–ê"
            issues.append("–ù–µ—Ç –≤–∏–¥–µ–æ –∫–ª–∏–ø–æ–≤ –≤ –±–∞–∑–µ")
            
        if exercises_count > 0 and videos_count == 0:
            system_status = "üü° –ß–ê–°–¢–ò–ß–ù–û"  # –ñ–µ–ª—Ç—ã–π
            issues.append("–í–∏–¥–µ–æ –ø–ª–µ–π–ª–∏—Å—Ç—ã –±—É–¥—É—Ç –ø—É—Å—Ç—ã–º–∏")
        
        self.stdout.write(f"\nüèóÔ∏è  –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: {system_status}")
        
        if issues:
            self.stdout.write("\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
            for issue in issues:
                self.stdout.write(f"   ‚Ä¢ {issue}")
                
        self.stdout.write(f"\nüìä –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
        self.stdout.write(f"   ‚Ä¢ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {exercises_count}")
        self.stdout.write(f"   ‚Ä¢ –í–∏–¥–µ–æ –∫–ª–∏–ø—ã: {videos_count}")
        self.stdout.write(f"   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_count}")
        self.stdout.write(f"   ‚Ä¢ –ü–ª–∞–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {plans_count}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if system_status != "üü¢ –ì–û–¢–û–í–ê":
            self.stdout.write(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞:")
            if exercises_count == 0:
                self.stdout.write("   1. python manage.py import_exercises_v2 --data-dir ./data/raw")
            if videos_count == 0:
                self.stdout.write("   2. python manage.py bootstrap_v2_min")
                self.stdout.write("   3. python manage.py setup_v2_production")
        else:
            self.stdout.write("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤!")