"""
Management command to explore real R2 storage structure
–ò—Å—Å–ª–µ–¥—É–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É Cloudflare R2 —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
"""
import boto3
import os
from collections import defaultdict
from django.core.management.base import BaseCommand
from django.conf import settings


class Command(BaseCommand):
    help = 'Explore complete R2 storage structure and catalog all files'

    def add_arguments(self, parser):
        parser.add_argument(
            '--detailed',
            action='store_true',
            help='Show detailed file listings for each folder',
        )

    def handle(self, *args, **options):
        self.stdout.write("üîç –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–û–ô –°–¢–†–£–ö–¢–£–†–´ R2...")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ R2 –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ Django settings
        aws_access_key_id = os.environ.get('AWS_ACCESS_KEY_ID')
        aws_secret_access_key = os.environ.get('AWS_SECRET_ACCESS_KEY')
        endpoint_url = os.environ.get('AWS_S3_ENDPOINT_URL')
        bucket_name = os.environ.get('AWS_STORAGE_BUCKET_NAME')
        
        if not all([aws_access_key_id, aws_secret_access_key, endpoint_url, bucket_name]):
            self.stdout.write(self.style.ERROR("‚ùå R2 credentials not found in environment"))
            self.stdout.write("Set these environment variables:")
            self.stdout.write("- AWS_ACCESS_KEY_ID")
            self.stdout.write("- AWS_SECRET_ACCESS_KEY") 
            self.stdout.write("- AWS_S3_ENDPOINT_URL")
            self.stdout.write("- AWS_STORAGE_BUCKET_NAME")
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç R2
        try:
            session = boto3.Session(
                aws_access_key_id=aws_access_key_id,
                aws_secret_access_key=aws_secret_access_key
            )
            
            s3 = session.client(
                's3',
                endpoint_url=endpoint_url,
                region_name='auto'
            )
            
            self.stdout.write(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ R2: {bucket_name}")
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ R2: {e}"))
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –æ–±—ä–µ–∫—Ç—ã –≤ bucket
            all_objects = []
            paginator = s3.get_paginator('list_objects_v2')
            
            for page in paginator.paginate(Bucket=bucket_name):
                if 'Contents' in page:
                    all_objects.extend(page['Contents'])
            
            self.stdout.write(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(all_objects)} —Ñ–∞–π–ª–æ–≤ –≤ R2")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
            folder_structure = defaultdict(list)
            file_types = defaultdict(int)
            
            for obj in all_objects:
                key = obj['Key']
                size = obj['Size']
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É
                if '/' in key:
                    folder = '/'.join(key.split('/')[:-1])
                    filename = key.split('/')[-1]
                else:
                    folder = 'root'
                    filename = key
                
                folder_structure[folder].append({
                    'name': filename,
                    'size': size,
                    'full_path': key
                })
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
                if '.' in filename:
                    ext = filename.split('.')[-1].lower()
                    file_types[ext] += 1
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            self.stdout.write("\n" + "="*70)
            self.stdout.write("üìÅ –°–¢–†–£–ö–¢–£–†–ê –ü–ê–ü–û–ö R2:")
            self.stdout.write("="*70)
            
            for folder, files in sorted(folder_structure.items()):
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ —Ç–∏–ø–∞–º –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ
                folder_types = defaultdict(list)
                total_size = 0
                
                for file_info in files:
                    filename = file_info['name']
                    size = file_info['size']
                    total_size += size
                    
                    if '.' in filename:
                        ext = filename.split('.')[-1].lower()
                        folder_types[ext].append(filename)
                    else:
                        folder_types['no_ext'].append(filename)
                
                # –†–∞–∑–º–µ—Ä –ø–∞–ø–∫–∏ –≤ MB
                size_mb = total_size / (1024 * 1024)
                
                self.stdout.write(f"\nüìÇ {folder} ({len(files)} —Ñ–∞–π–ª–æ–≤, {size_mb:.1f} MB)")
                
                for ext, file_list in sorted(folder_types.items()):
                    self.stdout.write(f"  .{ext}: {len(file_list)} —Ñ–∞–π–ª–æ–≤")
                    
                    if options.get('detailed') and len(file_list) <= 20:
                        for filename in sorted(file_list):
                            self.stdout.write(f"    - {filename}")
                    elif options.get('detailed') and len(file_list) > 20:
                        self.stdout.write(f"    - {file_list[0]} ... {file_list[-1]} (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π)")
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
            self.stdout.write("\n" + "="*70)
            self.stdout.write("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –§–ê–ô–õ–û–í:")
            self.stdout.write("="*70)
            
            for ext, count in sorted(file_types.items(), key=lambda x: x[1], reverse=True):
                self.stdout.write(f"  .{ext}: {count} —Ñ–∞–π–ª–æ–≤")
            
            # –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            self.stdout.write("\n" + "="*70)
            self.stdout.write("üé¨ –ê–ù–ê–õ–ò–ó –í–ò–î–ï–û –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
            self.stdout.write("="*70)
            
            video_analysis = defaultdict(int)
            for folder, files in folder_structure.items():
                if 'videos' in folder.lower():
                    mp4_files = [f for f in files if f['name'].endswith('.mp4')]
                    if mp4_files:
                        category = folder.split('/')[-1] if '/' in folder else folder
                        video_analysis[f"{folder} ({category})"] = len(mp4_files)
            
            for category, count in sorted(video_analysis.items()):
                self.stdout.write(f"  {category}: {count} –≤–∏–¥–µ–æ")
            
            # –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
            self.stdout.write("\n" + "="*70)
            self.stdout.write("üñºÔ∏è –ê–ù–ê–õ–ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:")
            self.stdout.write("="*70)
            
            image_folders = {}
            image_exts = ['jpg', 'jpeg', 'png', 'gif', 'webp']
            
            for folder, files in folder_structure.items():
                image_files = [f for f in files if any(f['name'].lower().endswith(f'.{ext}') for ext in image_exts)]
                if image_files:
                    image_folders[folder] = len(image_files)
                    if 'card' in folder.lower() or 'motivation' in folder.lower():
                        self.stdout.write(f"  üìã {folder}: {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                        if options.get('detailed'):
                            for img in image_files[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                                self.stdout.write(f"    - {img['name']} ({img['size']} bytes)")
            
            # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            self.stdout.write("\n" + "="*70)
            self.stdout.write("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
            self.stdout.write("="*70)
            
            total_videos = sum(video_analysis.values())
            total_images = sum(image_folders.values())
            
            self.stdout.write(f"1. –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è {total_videos} –≤–∏–¥–µ–æ")
            self.stdout.write(f"2. –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è {total_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π") 
            self.stdout.write("3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∏–¥–µ–æ –¥–æ–ª–∂–Ω–∞ –æ—Ç—Ä–∞–∂–∞—Ç—å –ø–∞–ø–∫–∏ R2")
            self.stdout.write("4. –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫")
            self.stdout.write("5. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è R2: {e}"))
            import traceback
            self.stdout.write(traceback.format_exc())