"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –±–∞–∑–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ R2 —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
"""
from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from apps.workouts.models import R2Video, R2Image
from collections import defaultdict
import uuid

User = get_user_model()


class Command(BaseCommand):
    help = 'Test the R2-based system: videos, images, playlists, motivational cards'

    def add_arguments(self, parser):
        parser.add_argument(
            '--test-videos',
            action='store_true',
            help='Test video system',
        )
        parser.add_argument(
            '--test-images',
            action='store_true',
            help='Test image system',
        )
        parser.add_argument(
            '--test-playlists',
            action='store_true',
            help='Test playlist generation',
        )
        parser.add_argument(
            '--test-cards',
            action='store_true',
            help='Test motivational cards',
        )
        parser.add_argument(
            '--full-test',
            action='store_true',
            help='Run all tests',
        )

    def handle(self, *args, **options):
        self.stdout.write("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï R2 –°–ò–°–¢–ï–ú–´...")
        
        if options.get('full_test'):
            options.update({
                'test_videos': True,
                'test_images': True,
                'test_playlists': True,
                'test_cards': True
            })
        
        if options.get('test_videos'):
            self._test_videos()
        
        if options.get('test_images'):
            self._test_images()
            
        if options.get('test_playlists'):
            self._test_playlists()
            
        if options.get('test_cards'):
            self._test_cards()
    
    def _test_videos(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ —Å–∏—Å—Ç–µ–º—É"""
        self.stdout.write("\nüé¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ò–î–ï–û –°–ò–°–¢–ï–ú–´:")
        self.stdout.write("="*50)
        
        total_videos = R2Video.objects.count()
        self.stdout.write(f"üìä Total videos in DB: {total_videos}")
        
        if total_videos == 0:
            self.stdout.write(self.style.ERROR("‚ùå No videos found! Run 'load_r2_data' first"))
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = ['exercises', 'motivation', 'final', 'progress', 'weekly']
        for category in categories:
            count = R2Video.objects.filter(category=category).count()
            self.stdout.write(f"  {category}: {count} videos")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        self.stdout.write("\nüìã Exercise types:")
        exercise_videos = R2Video.objects.filter(category='exercises')
        
        type_counts = defaultdict(int)
        for video in exercise_videos:
            video_type = video.exercise_type
            type_counts[video_type] += 1
        
        for video_type, count in type_counts.items():
            self.stdout.write(f"  {video_type}: {count} videos")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º URL –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        self.stdout.write("\nüåê Testing URL generation:")
        sample_video = R2Video.objects.first()
        if sample_video:
            self.stdout.write(f"Sample URL: {sample_video.r2_url}")
    
    def _test_images(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        self.stdout.write("\nüñºÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:")
        self.stdout.write("="*50)
        
        total_images = R2Image.objects.count()
        self.stdout.write(f"üìä Total images in DB: {total_images}")
        
        if total_images == 0:
            self.stdout.write(self.style.ERROR("‚ùå No images found! Run 'load_r2_data' first"))
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = ['avatars', 'quotes', 'progress', 'workout']
        for category in categories:
            count = R2Image.objects.filter(category=category).count()
            self.stdout.write(f"  {category}: {count} images")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º URL –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        self.stdout.write("\nüåê Testing image URLs:")
        for category in categories[:2]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 2 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            image = R2Image.objects.filter(category=category).first()
            if image:
                self.stdout.write(f"  {category}: {image.r2_url}")
    
    def _test_playlists(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–∏–¥–µ–æ –¥–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤"""
        self.stdout.write("\nüéµ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –î–õ–Ø –ü–õ–ï–ô–õ–ò–°–¢–û–í:")
        self.stdout.write("="*50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        exercise_count = R2Video.objects.filter(category='exercises').count()
        if exercise_count == 0:
            self.stdout.write(self.style.ERROR("‚ùå No exercise videos found!"))
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        exercise_types = ['warmup', 'main', 'endurance', 'relaxation']
        type_counts = {}
        
        for ex_type in exercise_types:
            if ex_type == 'warmup':
                count = R2Video.objects.filter(category='exercises', code__startswith='warmup_').count()
            elif ex_type == 'main':
                count = R2Video.objects.filter(category='exercises', code__startswith='main_').count()
            elif ex_type == 'endurance':
                count = R2Video.objects.filter(category='exercises', code__startswith='endurance_').count()
            elif ex_type == 'relaxation':
                count = R2Video.objects.filter(category='exercises', code__startswith='relaxation_').count()
            
            type_counts[ex_type] = count
            self.stdout.write(f"  {ex_type}: {count} videos")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è 21-–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞
        self.stdout.write(f"\nüéØ –ê–ù–ê–õ–ò–ó –î–õ–Ø 21-–î–ù–ï–í–ù–û–ô –ü–†–û–ì–†–ê–ú–ú–´:")
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–Ω—è: 2 warmup + 8 main + 3 endurance + 3 relaxation = 16 –≤–∏–¥–µ–æ/–¥–µ–Ω—å
        videos_per_day = {'warmup': 2, 'main': 8, 'endurance': 3, 'relaxation': 3}
        total_needed = sum(videos_per_day.values()) * 21  # 21 –¥–µ–Ω—å
        
        self.stdout.write(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–Ω—è: {videos_per_day}")
        self.stdout.write(f"üìä –í—Å–µ–≥–æ –≤–∏–¥–µ–æ –Ω–∞ 21 –¥–µ–Ω—å: {total_needed}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
        sufficient = True
        for ex_type, needed_per_day in videos_per_day.items():
            needed_total = needed_per_day * 21
            available = type_counts.get(ex_type, 0)
            
            if available < needed_total:
                self.stdout.write(f"‚ö†Ô∏è  {ex_type}: –Ω—É–∂–Ω–æ {needed_total}, –¥–æ—Å—Ç—É–ø–Ω–æ {available} (–ø–æ–≤—Ç–æ—Ä—ã –±—É–¥—É—Ç)")
                sufficient = False
            else:
                self.stdout.write(f"‚úÖ {ex_type}: –Ω—É–∂–Ω–æ {needed_total}, –¥–æ—Å—Ç—É–ø–Ω–æ {available}")
        
        if sufficient:
            self.stdout.write(f"\nüéâ –î–û–°–¢–ê–¢–û–ß–ù–û –í–ò–î–ï–û –î–õ–Ø 21-–î–ù–ï–í–ù–û–ô –ü–†–û–ì–†–ê–ú–ú–´ –ë–ï–ó –ü–û–í–¢–û–†–û–í!")
        else:
            self.stdout.write(f"\n‚ö†Ô∏è  –ë—É–¥—É—Ç –ø–æ–≤—Ç–æ—Ä—ã –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º URL –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        self.stdout.write(f"\nüåê –¢–ï–°–¢–û–í–´–ï URL:")
        for ex_type in exercise_types:
            if ex_type == 'warmup':
                video = R2Video.objects.filter(category='exercises', code__startswith='warmup_').first()
            elif ex_type == 'main':
                video = R2Video.objects.filter(category='exercises', code__startswith='main_').first()
            elif ex_type == 'endurance':
                video = R2Video.objects.filter(category='exercises', code__startswith='endurance_').first()
            elif ex_type == 'relaxation':
                video = R2Video.objects.filter(category='exercises', code__startswith='relaxation_').first()
            
            if video:
                self.stdout.write(f"  {ex_type}: {video.r2_url}")
        
        self.stdout.write(f"\n‚úÖ Playlist structure test completed!")
    
    def _test_cards(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫"""
        self.stdout.write("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–¢–ò–í–ê–¶–ò–û–ù–ù–´–• –ö–ê–†–¢–û–ß–ï–ö:")
        self.stdout.write("="*50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
        quotes_count = R2Image.objects.filter(category='quotes').count()
        if quotes_count == 0:
            self.stdout.write(self.style.ERROR("‚ùå No quote images found!"))
            return
        
        self.stdout.write(f"üìã Available quote images: {quotes_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        categories = ['avatars', 'progress', 'workout']
        for category in categories:
            count = R2Image.objects.filter(category=category).count()
            self.stdout.write(f"  {category}: {count} images")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤—ã–±–æ—Ä–∫—É –∫–∞—Ä—Ç–æ—á–µ–∫
        self.stdout.write("\nüé≤ Testing random card selection:")
        
        # –ü–æ–ª—É—á–∞–µ–º 10 —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        random_quotes = R2Image.objects.filter(category='quotes').order_by('?')[:10]
        
        for i, image in enumerate(random_quotes, 1):
            self.stdout.write(f"  Card {i}: {image.code} - {image.name}")
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º URL
            url = image.r2_url
            if url:
                self.stdout.write(f"    URL: {url}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è —Å–µ—Å—Å–∏–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
        needed_for_session = 20  # –ü—Ä–∏–º–µ—Ä–Ω–æ —Å—Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∑–∞ —Å–µ—Å—Å–∏—é
        if quotes_count >= needed_for_session:
            self.stdout.write(f"\n‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ ({quotes_count} >= {needed_for_session})")
        else:
            self.stdout.write(f"\n‚ö†Ô∏è  –ú–æ–∂–µ—Ç –Ω–µ —Ö–≤–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ ({quotes_count} < {needed_for_session})")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤–∞—Ç–∞—Ä—ã
        self.stdout.write(f"\nüë§ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–í–ê–¢–ê–†–û–í:")
        avatars = R2Image.objects.filter(category='avatars')[:3]
        
        for avatar in avatars:
            self.stdout.write(f"  Avatar: {avatar.code} - {avatar.r2_url}")
        
        self.stdout.write("\nüéØ Motivational cards test completed!")