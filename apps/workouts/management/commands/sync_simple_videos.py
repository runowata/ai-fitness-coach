"""
Management command –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –≤–∏–¥–µ–æ —Å R2 —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
"""
import requests
from django.core.management.base import BaseCommand
from apps.workouts.models_simple import Video, ArchetypeType


class Command(BaseCommand):
    help = '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –≤–∏–¥–µ–æ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ R2 —Ö—Ä–∞–Ω–∏–ª–∏—â–∞'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ, –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏',
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ (–æ—á–∏—Å—Ç–∏—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–Ω–æ–≤–æ)',
        )

    def handle(self, *args, **options):
        self.stdout.write("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –≤–∏–¥–µ–æ...")
        
        if options['force']:
            Video.objects.all().delete()
            self.stdout.write("üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ Video")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–∏–¥–µ–æ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–¥–µ–∞–ª—å–Ω–æ–º—É –ø–ª–µ–π–ª–∏—Å—Ç—É
        video_data = self.get_video_structure()
        
        created_count = 0
        for video_info in video_data:
            if not options['dry_run']:
                video, created = Video.objects.get_or_create(
                    code=video_info['code'],
                    defaults=video_info
                )
                if created:
                    created_count += 1
                    self.stdout.write(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ: {video}")
                else:
                    self.stdout.write(f"‚è≠Ô∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {video}")
            else:
                self.stdout.write(f"üîç –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ: {video_info['code']} - {video_info['name']}")
        
        if not options['dry_run']:
            self.stdout.write(
                self.style.SUCCESS(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {created_count} –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ –∑–∞–ø–∏—Å–µ–π")
            )
        else:
            self.stdout.write(
                self.style.WARNING(f"üîç DRY RUN: –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ {len(video_data)} –∑–∞–ø–∏—Å–µ–π")
            )

    def get_video_structure(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—Å–µ—Ö –≤–∏–¥–µ–æ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–¥–µ–∞–ª—å–Ω–æ–º—É –ø–ª–µ–π–ª–∏—Å—Ç—É"""
        videos = []
        
        # 1. –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø (–ú–æ–¥–µ–ª—å) - –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∞—Ä—Ö–µ—Ç–∏–ø—É
        exercise_types = [
            ('warmup', '–†–∞–∑–º–∏–Ω–∫–∞', 20),  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è 3 –Ω–µ–¥–µ–ª—å
            ('main', '–û—Å–Ω–æ–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è', 100),  # –ú–Ω–æ–≥–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π 
            ('endurance', '–°–µ–∫—Å—É–∞–ª—å–Ω–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å', 30),
            ('relaxation', '–†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ', 30),
        ]
        
        for video_type, type_name, count in exercise_types:
            for i in range(1, count + 1):
                videos.append({
                    'code': f'{video_type}_{i:03d}',
                    'name': f'{type_name} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {i}',
                    'description': f'–í–∏–¥–µ–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è {type_name.lower()} #{i}',
                    'video_type': video_type,
                    'archetype': '',  # –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∞—Ä—Ö–µ—Ç–∏–ø—É
                    'sequence_number': i,
                    'is_active': True
                })
        
        # 2. –ú–û–¢–ò–í–ê–¶–ò–û–ù–ù–´–ï –í–ò–î–ï–û (–¢—Ä–µ–Ω–µ—Ä) - –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞ –∏ –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
        motivational_types = [
            'intro',
            'warmup_motivation', 
            'main_motivation',
            'trainer_speech',
            'closing'
        ]
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞ —Å–æ–∑–¥–∞–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å (1-21)
        for archetype_code, archetype_display in ArchetypeType.choices:
            for day in range(1, 22):  # –î–Ω–∏ 1-21
                for video_type in motivational_types:
                    videos.append({
                        'code': f'{video_type}_{archetype_code}_day{day:02d}',
                        'name': f'{video_type.replace("_", " ").title()} - –î–µ–Ω—å {day}',
                        'description': f'–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ {archetype_display} –¥–ª—è –¥–Ω—è {day}',
                        'video_type': video_type,
                        'archetype': archetype_code,
                        'sequence_number': day,
                        'is_active': True
                    })
        
        return videos

    def test_r2_access(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ R2 —Ö—Ä–∞–Ω–∏–ª–∏—â—É"""
        self.stdout.write("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ R2...")
        
        base_url = "https://pub-92568f8b8a15c68a9ece5fe08c66485b.r2.dev"
        test_urls = [
            f"{base_url}/videos/exercises/warmup_001.mp4",
            f"{base_url}/videos/motivation/intro_bro_day01.mp4"
        ]
        
        for url in test_urls:
            try:
                response = requests.head(url, timeout=10)
                if response.status_code == 200:
                    self.stdout.write(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ: {url}")
                else:
                    self.stdout.write(f"‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ ({response.status_code}): {url}")
            except Exception as e:
                self.stdout.write(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ {url}: {e}")