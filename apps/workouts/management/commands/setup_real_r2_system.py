"""
–ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥ —Ä–µ–∞–ª—å–Ω–æ–µ Cloudflare R2 —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
"""
from django.core.management.base import BaseCommand
from django.core.management import call_command


class Command(BaseCommand):
    help = 'Setup complete system based on real Cloudflare R2 storage'

    def add_arguments(self, parser):
        parser.add_argument(
            '--skip-load',
            action='store_true',
            help='Skip data loading from R2',
        )

    def handle(self, *args, **options):
        self.stdout.write("="*70)
        self.stdout.write("üöÄ –ù–ê–°–¢–†–û–ô–ö–ê –°–ò–°–¢–ï–ú–´ –ü–û–î –†–ï–ê–õ–¨–ù–û–ï R2 –•–†–ê–ù–ò–õ–ò–©–ï")
        self.stdout.write("="*70)
        
        self.stdout.write("\nüìã –ü–õ–ê–ù –†–ê–ë–û–¢–´:")
        self.stdout.write("1. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã R2")
        self.stdout.write("2. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ R2") 
        self.stdout.write("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å–∏—Å—Ç–µ–º—ã")
        self.stdout.write("4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        self.stdout.write("5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤")
        self.stdout.write("6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫")
        self.stdout.write("7. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç")
        
        try:
            # –®–∞–≥ 1: –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ R2
            self.stdout.write("\nüîç STEP 1: –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã R2...")
            call_command('explore_r2_structure')
            self.stdout.write("‚úÖ R2 structure analyzed")
            
            # –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            if not options.get('skip_load'):
                self.stdout.write("\nüì• STEP 2: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ R2...")
                call_command('load_r2_data', '--clear')
                self.stdout.write("‚úÖ Data loaded from R2")
            else:
                self.stdout.write("\n‚è≠Ô∏è STEP 2: Skipped data loading")
            
            # –®–∞–≥ 3-6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            self.stdout.write("\nüß™ STEP 3-6: –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            call_command('test_r2_system', '--full-test')
            self.stdout.write("‚úÖ All systems tested")
            
            # –®–∞–≥ 7: –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            self.stdout.write("\nüìä STEP 7: –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç...")
            self._generate_final_report()
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå Setup failed: {e}"))
            import traceback
            self.stdout.write(traceback.format_exc())
            return
        
        self.stdout.write("\n" + "="*70)
        self.stdout.write("üéâ –°–ò–°–¢–ï–ú–ê –£–°–ü–ï–®–ù–û –ù–ê–°–¢–†–û–ï–ù–ê –ü–û–î –†–ï–ê–õ–¨–ù–û–ï R2!")
        self.stdout.write("="*70)
        
        self.stdout.write("\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        self.stdout.write("1. –°–æ–∑–¥–∞—Ç—å migration –¥–ª—è –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π")
        self.stdout.write("2. –û–±–Ω–æ–≤–∏—Ç—å views –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è R2Video –∏ R2Image")  
        self.stdout.write("3. –û–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω—ã –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫")
        self.stdout.write("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥")
        self.stdout.write("5. –ó–∞–ø—É—Å—Ç–∏—Ç—å E2E —Ç–µ—Å—Ç—ã")
        self.stdout.write("6. –î–µ–ø–ª–æ–π –≤ –ø—Ä–æ–¥–∞–∫—à–Ω")
    
    def _generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ —Å–∏—Å—Ç–µ–º–µ"""
        from apps.workouts.models import R2Video, R2Image
        
        self.stdout.write("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        self.stdout.write("-" * 40)
        
        # –í–∏–¥–µ–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_videos = R2Video.objects.count()
        self.stdout.write(f"üé¨ –í—Å–µ–≥–æ –≤–∏–¥–µ–æ: {total_videos}")
        
        video_categories = R2Video.objects.values_list('category', flat=True).distinct()
        for category in video_categories:
            count = R2Video.objects.filter(category=category).count()
            self.stdout.write(f"  - {category}: {count}")
        
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_images = R2Image.objects.count()
        self.stdout.write(f"\nüñºÔ∏è –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images}")
        
        image_categories = R2Image.objects.values_list('category', flat=True).distinct()
        for category in image_categories:
            count = R2Image.objects.filter(category=category).count()
            self.stdout.write(f"  - {category}: {count}")
        
        # –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
        self.stdout.write(f"\n‚úÖ –ì–û–¢–û–í–ù–û–°–¢–¨ –°–ò–°–¢–ï–ú–´:")
        
        exercises_ready = R2Video.objects.filter(category='exercises').count() >= 250
        self.stdout.write(f"  - –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {'‚úÖ' if exercises_ready else '‚ùå'}")
        
        motivation_ready = R2Video.objects.filter(category='motivation').count() >= 300
        self.stdout.write(f"  - –ú–æ—Ç–∏–≤–∞—Ü–∏—è: {'‚úÖ' if motivation_ready else '‚ùå'}")
        
        cards_ready = R2Image.objects.filter(category='quotes').count() >= 500
        self.stdout.write(f"  - –ö–∞—Ä—Ç–æ—á–∫–∏: {'‚úÖ' if cards_ready else '‚ùå'}")
        
        avatars_ready = R2Image.objects.filter(category='avatars').count() >= 5
        self.stdout.write(f"  - –ê–≤–∞—Ç–∞—Ä—ã: {'‚úÖ' if avatars_ready else '‚ùå'}")
        
        if exercises_ready and motivation_ready and cards_ready and avatars_ready:
            self.stdout.write(f"\nüéâ –í–°–Å –ì–û–¢–û–í–û –î–õ–Ø –ü–†–û–î–ê–ö–®–ù–ê!")
        else:
            self.stdout.write(f"\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
            
        self.stdout.write(f"\nüîó –¢–ï–°–¢–û–í–´–ï URL:")
        
        # –ü—Ä–∏–º–µ—Ä—ã URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        exercise_video = R2Video.objects.filter(category='exercises').first()
        if exercise_video:
            self.stdout.write(f"  –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {exercise_video.r2_url}")
        
        quote_image = R2Image.objects.filter(category='quotes').first()
        if quote_image:
            self.stdout.write(f"  –ö–∞—Ä—Ç–æ—á–∫–∞: {quote_image.r2_url}")
        
        avatar_image = R2Image.objects.filter(category='avatars').first()
        if avatar_image:
            self.stdout.write(f"  –ê–≤–∞—Ç–∞—Ä: {avatar_image.r2_url}")