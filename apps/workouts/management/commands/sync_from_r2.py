"""
Management command –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ R2 —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
–ó–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ Excel-based –∫–æ–º–∞–Ω–¥—ã –∏–º–ø–æ—Ä—Ç–∞
"""
from django.core.management.base import BaseCommand, CommandError
from django.db import transaction
from apps.core.services.r2_scanner import R2StorageScanner
from apps.workouts.models import CSVExercise, R2Video, R2Image


class Command(BaseCommand):
    help = '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç CSVExercise –∏ R2Video/R2Image –∑–∞–ø–∏—Å–∏ –∏–∑ R2 —Ö—Ä–∞–Ω–∏–ª–∏—â–∞'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ, –Ω–æ –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏',
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏',
        )
        parser.add_argument(
            '--exercises-only',
            action='store_true',
            help='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ CSVExercise',
        )
        parser.add_argument(
            '--videos-only',
            action='store_true',
            help='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ R2Video/R2Image',
        )
    
    def handle(self, *args, **options):
        self.dry_run = options['dry_run']
        self.force = options['force']
        self.exercises_only = options['exercises_only'] 
        self.videos_only = options['videos_only']
        
        self.stdout.write("=" * 70)
        self.stdout.write("üîÑ R2 STORAGE SYNC")
        self.stdout.write("=" * 70)
        
        if self.dry_run:
            self.stdout.write("‚ö†Ô∏è  DRY RUN MODE - –Ω–∏–∫–∞–∫–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–µ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã")
        
        try:
            scanner = R2StorageScanner()
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º R2 —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            self.stdout.write("\nüîç –°–∫–∞–Ω–∏—Ä—É–µ–º R2 —Ö—Ä–∞–Ω–∏–ª–∏—â–µ...")
            files = scanner.scan_r2_storage()
            
            if not files:
                self.stdout.write(self.style.WARNING("‚ö†Ô∏è  –§–∞–π–ª—ã –≤ R2 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"))
                return
            
            self.stdout.write(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(files)} –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            categories = {}
            for file_info in files:
                category = file_info.category
                categories[category] = categories.get(category, 0) + 1
            
            self.stdout.write("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
            for category, count in categories.items():
                self.stdout.write(f"   {category}: {count} —Ñ–∞–π–ª–æ–≤")
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
            if not self.videos_only:
                self.sync_exercises(scanner, files)
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è  
            if not self.exercises_only:
                self.sync_media(scanner, files)
            
            self.stdout.write(self.style.SUCCESS("\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"))
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}"))
            raise CommandError(f"Sync failed: {e}")
    
    def sync_exercises(self, scanner, files):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç CSVExercise –∑–∞–ø–∏—Å–∏"""
        self.stdout.write("\nüìã –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–æ–≤
        exercises_data = scanner.extract_exercises_from_files(files)
        
        if not exercises_data:
            self.stdout.write("‚ö†Ô∏è  –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ R2 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        created_count = 0
        updated_count = 0
        skipped_count = 0
        
        for exercise_id, data in exercises_data.items():
            try:
                if self.dry_run:
                    self.stdout.write(f"   [DRY RUN] –°–æ–∑–¥–∞–ª –±—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {exercise_id} - {data['name_ru']}")
                    created_count += 1
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
                exercise_exists = CSVExercise.objects.filter(id=exercise_id).exists()
                
                if exercise_exists and not self.force:
                    self.stdout.write(f"   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç): {exercise_id}")
                    skipped_count += 1
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º
                exercise, created = CSVExercise.objects.update_or_create(
                    id=exercise_id,
                    defaults={
                        'name_ru': data['name_ru'],
                        'description': data['description']
                    }
                )
                
                if created:
                    self.stdout.write(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ: {exercise_id} - {data['name_ru']}")
                    created_count += 1
                else:
                    self.stdout.write(f"   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {exercise_id} - {data['name_ru']}")
                    updated_count += 1
                    
            except Exception as e:
                self.stdout.write(f"   ‚ùå –û—à–∏–±–∫–∞ —Å {exercise_id}: {e}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stdout.write(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:")
        self.stdout.write(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ: {created_count}")
        self.stdout.write(f"   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")  
        self.stdout.write(f"   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
    
    def sync_media(self, scanner, files):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç R2Video –∏ R2Image –∑–∞–ø–∏—Å–∏"""
        self.stdout.write("\nüé• –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤...")
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –≤–∏–¥–µ–æ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        video_files = [f for f in files if f.key.startswith('videos/')]
        # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ images/ –∏ photos/
        image_files = [f for f in files if f.key.startswith('images/') or f.key.startswith('photos/')]
        
        self.stdout.write(f"   –í–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤: {len(video_files)}")
        self.stdout.write(f"   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_files)}")
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–µ–æ
        if video_files:
            self.sync_r2_videos(scanner, video_files)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è  
        if image_files:
            self.sync_r2_images(scanner, image_files)
    
    def sync_r2_videos(self, scanner, video_files):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç R2Video –∑–∞–ø–∏—Å–∏"""
        self.stdout.write("\nüé¨ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è R2Video...")
        
        videos_data = scanner.create_r2_video_data(video_files)
        
        created_count = 0
        updated_count = 0
        skipped_count = 0
        
        for video_data in videos_data:
            try:
                code = video_data['code']
                
                if self.dry_run:
                    self.stdout.write(f"   [DRY RUN] –°–æ–∑–¥–∞–ª –±—ã –≤–∏–¥–µ–æ: {code}")
                    created_count += 1
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
                video_exists = R2Video.objects.filter(code=code).exists()
                
                if video_exists and not self.force:
                    skipped_count += 1
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º
                video, created = R2Video.objects.update_or_create(
                    code=code,
                    defaults=video_data
                )
                
                if created:
                    created_count += 1
                    if created_count % 50 == 0:  # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 –∑–∞–ø–∏—Å–µ–π
                        self.stdout.write(f"   üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {created_count} –≤–∏–¥–µ–æ...")
                else:
                    updated_count += 1
                    
            except Exception as e:
                self.stdout.write(f"   ‚ùå –û—à–∏–±–∫–∞ —Å {code}: {e}")
        
        self.stdout.write(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ R2Video:")
        self.stdout.write(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ: {created_count}")
        self.stdout.write(f"   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
        self.stdout.write(f"   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
    
    def sync_r2_images(self, scanner, image_files):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç R2Image –∑–∞–ø–∏—Å–∏"""
        self.stdout.write("\nüñºÔ∏è  –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è R2Image...")
        
        created_count = 0
        updated_count = 0
        skipped_count = 0
        
        for file_info in image_files:
            try:
                # –ö–æ–¥ = –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                code = file_info.filename.rsplit('.', 1)[0]
                
                if self.dry_run:
                    self.stdout.write(f"   [DRY RUN] –°–æ–∑–¥–∞–ª –±—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {code}")
                    created_count += 1
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ  
                image_exists = R2Image.objects.filter(code=code).exists()
                
                if image_exists and not self.force:
                    skipped_count += 1
                    continue
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                name = code.replace('_', ' ').title()
                
                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º
                image, created = R2Image.objects.update_or_create(
                    code=code,
                    defaults={
                        'name': name,
                        'description': f'–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {name} (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –∏–∑ R2)',
                        'category': self._map_image_category(file_info.category),
                        'archetype': scanner._map_archetype_to_model(file_info.archetype) if file_info.archetype else ''
                    }
                )
                
                if created:
                    created_count += 1
                else:
                    updated_count += 1
                    
            except Exception as e:
                self.stdout.write(f"   ‚ùå –û—à–∏–±–∫–∞ —Å {file_info.filename}: {e}")
        
        self.stdout.write(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ R2Image:")
        self.stdout.write(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ: {created_count}")
        self.stdout.write(f"   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
        self.stdout.write(f"   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
    
    def _map_image_category(self, r2_category: str) -> str:
        """–ú–∞–ø–ø–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ R2 –≤ –º–æ–¥–µ–ª—å R2Image"""
        mapping = {
            'avatars': 'avatars',
            'quotes': 'quotes', 
            'progress': 'progress',
            'workout': 'workout'
        }
        return mapping.get(r2_category, 'avatars')