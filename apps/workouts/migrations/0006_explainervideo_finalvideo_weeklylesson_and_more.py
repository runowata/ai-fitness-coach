# Generated by Django 5.0.8 on 2025-08-25 20:59

import apps.workouts.constants
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        (
            "workouts",
            "0003_update_csvexercise_r2_structure_squashed_0005_remove_unnecessary_category_field",
        ),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ExplainerVideo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "archetype",
                    models.CharField(
                        choices=[
                            ("111", "Наставник"),
                            ("222", "Профессионал"),
                            ("333", "Ровесник"),
                        ],
                        max_length=3,
                    ),
                ),
                ("script", models.TextField()),
                ("locale", models.CharField(default="ru", max_length=5)),
            ],
            options={
                "verbose_name": "Видео-объяснение",
                "verbose_name_plural": "Видео-объяснения",
                "db_table": "explainer_videos",
            },
        ),
        migrations.CreateModel(
            name="FinalVideo",
            fields=[
                (
                    "arch",
                    models.CharField(
                        choices=[("111", "Н"), ("222", "П"), ("333", "Р")],
                        max_length=3,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("locale", models.CharField(default="ru", max_length=5)),
                ("script", models.TextField()),
            ],
            options={
                "db_table": "final_videos",
            },
        ),
        migrations.CreateModel(
            name="WeeklyLesson",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("week", models.PositiveSmallIntegerField()),
                (
                    "archetype",
                    models.CharField(
                        choices=[("111", "Н"), ("222", "П"), ("333", "Р")], max_length=3
                    ),
                ),
                ("locale", models.CharField(default="ru", max_length=5)),
                ("title", models.CharField(max_length=120)),
                ("script", models.TextField()),
                (
                    "duration_sec",
                    models.PositiveIntegerField(
                        default=180, help_text="Estimated reading time in seconds"
                    ),
                ),
            ],
            options={
                "db_table": "weekly_lessons",
                "ordering": ["week"],
            },
        ),
        migrations.CreateModel(
            name="WeeklyNotification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("week", models.PositiveSmallIntegerField()),
                (
                    "archetype",
                    models.CharField(
                        choices=[("111", "Н"), ("222", "П"), ("333", "Р")], max_length=3
                    ),
                ),
                ("lesson_title", models.CharField(max_length=120)),
                ("lesson_script", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("read_at", models.DateTimeField(blank=True, null=True)),
                ("is_read", models.BooleanField(default=False)),
            ],
            options={
                "db_table": "weekly_notifications",
                "ordering": ["-week", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="WeeklyTheme",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "week_number",
                    models.PositiveIntegerField(
                        help_text="Week number in the course (1-8)",
                        unique=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(8),
                        ],
                    ),
                ),
                (
                    "theme_title",
                    models.CharField(
                        help_text="Title of the weekly theme", max_length=100
                    ),
                ),
                (
                    "focus_area",
                    models.CharField(
                        help_text="Main focus area for the week", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of weekly objectives",
                    ),
                ),
                (
                    "mentor_content",
                    models.TextField(
                        blank=True, help_text="Content adapted for mentor archetype"
                    ),
                ),
                (
                    "professional_content",
                    models.TextField(
                        blank=True,
                        help_text="Content adapted for professional archetype",
                    ),
                ),
                (
                    "peer_content",
                    models.TextField(
                        blank=True, help_text="Content adapted for peer archetype"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "weekly_themes",
                "ordering": ["week_number"],
            },
        ),
        migrations.AlterModelOptions(
            name="csvexercise",
            options={
                "verbose_name": "Упражнение CSV",
                "verbose_name_plural": "Упражнения CSV",
            },
        ),
        migrations.RemoveIndex(
            model_name="videoclip",
            name="video_clips_exercis_cde9f7_idx",
        ),
        migrations.RemoveField(
            model_name="csvexercise",
            name="difficulty",
        ),
        migrations.RemoveField(
            model_name="csvexercise",
            name="equipment_needed",
        ),
        migrations.RemoveField(
            model_name="csvexercise",
            name="muscle_groups",
        ),
        migrations.RemoveField(
            model_name="csvexercise",
            name="name",
        ),
        migrations.RemoveField(
            model_name="exercise",
            name="equipment_needed",
        ),
        migrations.RemoveField(
            model_name="exercise",
            name="mistake_video_url",
        ),
        migrations.RemoveField(
            model_name="exercise",
            name="technique_video_url",
        ),
        migrations.RemoveField(
            model_name="workoutplan",
            name="goal",
        ),
        migrations.AddField(
            model_name="csvexercise",
            name="is_active",
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name="exercise",
            name="poster_image",
            field=models.ImageField(
                blank=True,
                help_text="Poster image for video player",
                null=True,
                upload_to="photos/workout/",
            ),
        ),
        migrations.AddField(
            model_name="videoclip",
            name="content_theme",
            field=models.CharField(
                blank=True,
                choices=[
                    ("week_start", "Начало недели"),
                    ("overcoming", "Преодоление"),
                    ("gratitude", "Благодарность"),
                    ("motivation", "Мотивация"),
                    ("recovery", "Восстановление"),
                    ("achievement", "Достижение"),
                    ("consistency", "Постоянство"),
                    ("challenge", "Вызов"),
                ],
                help_text="Тематика контента",
                max_length=30,
            ),
        ),
        migrations.AddField(
            model_name="videoclip",
            name="is_placeholder",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="videoclip",
            name="mood_type",
            field=models.CharField(
                blank=True,
                choices=[
                    ("energetic", "Энергичное"),
                    ("philosophical", "Философское"),
                    ("business", "Деловое"),
                    ("encouraging", "Ободряющее"),
                    ("calm", "Спокойное"),
                ],
                help_text="Настроение/тон видео",
                max_length=20,
            ),
        ),
        migrations.AddField(
            model_name="videoclip",
            name="playback_id",
            field=models.CharField(
                blank=True, help_text="Stream playback ID", max_length=64, null=True
            ),
        ),
        migrations.AddField(
            model_name="videoclip",
            name="position_in_workout",
            field=models.CharField(
                blank=True,
                choices=[
                    ("intro", "Вступление"),
                    ("mid", "Середина"),
                    ("outro", "Завершение"),
                ],
                help_text="Позиция в тренировке",
                max_length=15,
            ),
        ),
        migrations.AddField(
            model_name="videoclip",
            name="provider",
            field=models.CharField(
                choices=[
                    ("r2", "Cloudflare R2"),
                    ("stream", "Cloudflare Stream"),
                    ("external", "External URL"),
                ],
                default="r2",
                help_text="Video storage provider",
                max_length=16,
            ),
        ),
        migrations.AddField(
            model_name="videoclip",
            name="r2_archetype",
            field=models.CharField(
                blank=True,
                choices=[
                    ("peer", "Ровесник"),
                    ("professional", "Успешный профессионал"),
                    ("mentor", "Мудрый наставник"),
                ],
                help_text="Archetype for R2 videos",
                max_length=20,
            ),
        ),
        migrations.AddField(
            model_name="videoclip",
            name="r2_file",
            field=models.FileField(
                blank=True,
                help_text="Video file in R2 storage",
                null=True,
                upload_to="videos/",
            ),
        ),
        migrations.AddField(
            model_name="videoclip",
            name="r2_kind",
            field=models.CharField(
                choices=[
                    ("technique", "Technique"),
                    ("mistake", "Mistake"),
                    ("instruction", "Instruction"),
                    ("intro", "Intro"),
                    ("weekly", "Weekly"),
                    ("closing", "Closing"),
                    ("reminder", "Reminder"),
                    ("explain", "Explain"),
                    ("contextual_intro", "Contextual_Intro"),
                    ("contextual_outro", "Contextual_Outro"),
                    ("mid_workout", "Mid_Workout"),
                    ("theme_based", "Theme_Based"),
                    ("motivational_break", "Motivational_Break"),
                ],
                default=apps.workouts.constants.VideoKind["INSTRUCTION"],
                help_text="Video type for R2 organization",
                max_length=20,
            ),
        ),
        migrations.AddField(
            model_name="videoclip",
            name="script_text",
            field=models.TextField(blank=True, help_text="Video script or content"),
        ),
        migrations.AddField(
            model_name="videoclip",
            name="stream_uid",
            field=models.CharField(
                blank=True, help_text="Cloudflare Stream UID", max_length=64, null=True
            ),
        ),
        migrations.AddField(
            model_name="videoclip",
            name="variation_number",
            field=models.PositiveIntegerField(
                default=1,
                help_text="Номер вариации (для множественных intro/outro)",
                validators=[
                    django.core.validators.MinValueValidator(1),
                    django.core.validators.MaxValueValidator(99),
                ],
            ),
        ),
        migrations.AddField(
            model_name="videoclip",
            name="week_context",
            field=models.PositiveIntegerField(
                blank=True,
                help_text="Номер недели курса (1-8)",
                null=True,
                validators=[
                    django.core.validators.MinValueValidator(1),
                    django.core.validators.MaxValueValidator(8),
                ],
            ),
        ),
        migrations.AddField(
            model_name="workoutplan",
            name="ai_analysis",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="csvexercise",
            name="id",
            field=models.CharField(max_length=20, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name="exercise",
            name="created_at",
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AlterField(
            model_name="exercise",
            name="updated_at",
            field=models.DateTimeField(auto_now=True, null=True),
        ),
        migrations.AlterField(
            model_name="videoclip",
            name="archetype",
            field=models.CharField(
                choices=[
                    ("peer", "Ровесник"),
                    ("professional", "Успешный профессионал"),
                    ("mentor", "Мудрый наставник"),
                ],
                max_length=20,
            ),
        ),
        migrations.AlterField(
            model_name="videoclip",
            name="exercise",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="video_clips",
                to="workouts.csvexercise",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="videoclip",
            unique_together={
                ("exercise", "r2_kind", "archetype", "model_name", "reminder_text")
            },
        ),
        migrations.AddIndex(
            model_name="videoclip",
            index=models.Index(
                fields=["exercise", "r2_kind", "archetype"],
                name="video_clips_exercis_1e5613_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="videoclip",
            index=models.Index(
                fields=["r2_kind", "archetype"], name="video_clips_r2_kind_d2e4dd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="videoclip",
            index=models.Index(
                fields=["is_active", "r2_kind"], name="video_clips_is_acti_9705f9_idx"
            ),
        ),
        migrations.AlterModelTable(
            name="csvexercise",
            table="csv_exercises",
        ),
        migrations.AddField(
            model_name="explainervideo",
            name="exercise",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="videos",
                to="workouts.csvexercise",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="weeklylesson",
            unique_together={("week", "archetype", "locale")},
        ),
        migrations.AddField(
            model_name="weeklynotification",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="weekly_notifications",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.RemoveField(
            model_name="videoclip",
            name="type",
        ),
        migrations.RemoveField(
            model_name="videoclip",
            name="url",
        ),
        migrations.AlterUniqueTogether(
            name="explainervideo",
            unique_together={("exercise", "archetype", "locale")},
        ),
        migrations.AddIndex(
            model_name="weeklynotification",
            index=models.Index(
                fields=["user", "is_read"], name="weekly_noti_user_id_ddf0af_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="weeklynotification",
            index=models.Index(fields=["week"], name="weekly_noti_week_45b255_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="weeklynotification",
            unique_together={("user", "week")},
        ),
    ]
