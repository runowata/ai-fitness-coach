# Generated by Django 5.0.8 on 2025-08-19 20:30

from django.db import migrations, connection

def drop_equipment_needed_columns(apps, schema_editor):
    """
    Drop equipment_needed columns from any tables where they might exist.
    This is safe to run - it only drops columns if they exist.
    """
    db_alias = schema_editor.connection.alias
    
    # Tables that might have equipment_needed column
    tables_to_check = [
        'exercises',
        'workouts_exercise', 
        'user_profiles',
        'users_userprofile'
    ]
    
    with schema_editor.connection.cursor() as cursor:
        for table_name in tables_to_check:
            try:
                # Check if table exists
                if schema_editor.connection.vendor == 'postgresql':
                    cursor.execute("""
                        SELECT EXISTS (
                            SELECT FROM information_schema.tables 
                            WHERE table_name = %s
                        );
                    """, [table_name])
                    table_exists = cursor.fetchone()[0]
                    
                    if table_exists:
                        # Check if equipment_needed column exists
                        cursor.execute("""
                            SELECT EXISTS (
                                SELECT FROM information_schema.columns
                                WHERE table_name = %s AND column_name = 'equipment_needed'
                            );
                        """, [table_name])
                        column_exists = cursor.fetchone()[0]
                        
                        if column_exists:
                            cursor.execute(f'ALTER TABLE {table_name} DROP COLUMN equipment_needed;')
                            print(f"Dropped equipment_needed column from {table_name}")
                else:
                    # SQLite - try to drop, ignore if it fails
                    try:
                        cursor.execute(f'ALTER TABLE {table_name} DROP COLUMN equipment_needed;')
                        print(f"Dropped equipment_needed column from {table_name}")
                    except:
                        pass  # Column doesn't exist or table doesn't exist
            except Exception as e:
                # Table doesn't exist or other error - that's fine
                pass

def reverse_drop_columns(apps, schema_editor):
    # No reverse operation - we don't want to recreate these columns
    pass

class Migration(migrations.Migration):

    dependencies = [
        ("workouts", "0001_initial_squashed_0003_dailyworkout_exercises_dailyworkout_started_at_and_more"),
    ]

    operations = [
        migrations.RunPython(drop_equipment_needed_columns, reverse_drop_columns),
    ]