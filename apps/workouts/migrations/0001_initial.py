# Generated by Django 5.0.8 on 2025-08-29 20:03

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="CSVExercise",
            fields=[
                (
                    "id",
                    models.CharField(max_length=20, primary_key=True, serialize=False),
                ),
                ("name_ru", models.CharField(max_length=120)),
                ("description", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ",
                "verbose_name_plural": "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
                "db_table": "csv_exercises",
            },
        ),
        migrations.CreateModel(
            name="DailyWorkout",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("day_number", models.PositiveIntegerField()),
                ("week_number", models.PositiveIntegerField()),
                ("name", models.CharField(max_length=200)),
                ("exercises", models.JSONField()),
                ("is_rest_day", models.BooleanField(default=False)),
                ("confidence_task", models.TextField(blank=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "feedback_rating",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("fire", "üî• Great"),
                            ("smile", "üôÇ Good"),
                            ("neutral", "üòê OK"),
                            ("tired", "ü§ï Hard"),
                        ],
                        max_length=10,
                    ),
                ),
                ("feedback_note", models.TextField(blank=True)),
                ("substitutions", models.JSONField(default=dict)),
            ],
            options={
                "db_table": "daily_workouts",
                "ordering": ["day_number"],
            },
        ),
        migrations.CreateModel(
            name="R2Image",
            fields=[
                (
                    "code",
                    models.CharField(
                        max_length=150, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("avatars", "–ê–≤–∞—Ç–∞—Ä—ã"),
                            ("quotes", "–¶–∏—Ç–∞—Ç—ã"),
                            ("progress", "–ü—Ä–æ–≥—Ä–µ—Å—Å"),
                            ("workout", "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "alt_text",
                    models.CharField(
                        blank=True,
                        help_text="–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                        max_length=200,
                    ),
                ),
                (
                    "is_hero_image",
                    models.BooleanField(
                        default=False, help_text="–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ landing page"
                    ),
                ),
                (
                    "is_featured",
                    models.BooleanField(
                        default=False, help_text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ featured –≥–∞–ª–µ—Ä–µ–µ"
                    ),
                ),
                (
                    "sort_order",
                    models.PositiveIntegerField(
                        default=0, help_text="–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                    ),
                ),
                (
                    "archetype",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("mentor", "–ú—É–¥—Ä—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫"),
                            ("professional", "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä"),
                            ("peer", "–õ—É—á—à–∏–π –¥—Ä—É–≥"),
                        ],
                        help_text="–ê—Ä—Ö–µ—Ç–∏–ø –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤",
                        max_length=20,
                    ),
                ),
            ],
            options={
                "verbose_name": "R2 –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                "verbose_name_plural": "R2 –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                "db_table": "r2_images",
            },
        ),
        migrations.CreateModel(
            name="R2Video",
            fields=[
                (
                    "code",
                    models.CharField(
                        max_length=150, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("exercises", "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"),
                            ("motivation", "–ú–æ—Ç–∏–≤–∞—Ü–∏—è"),
                            ("final", "–§–∏–Ω–∞–ª—å–Ω—ã–µ"),
                            ("progress", "–ü—Ä–æ–≥—Ä–µ—Å—Å"),
                            ("weekly", "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "display_title",
                    models.CharField(
                        blank=True,
                        help_text="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ landing page",
                        max_length=200,
                    ),
                ),
                (
                    "display_description",
                    models.TextField(
                        blank=True, help_text="–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ landing page"
                    ),
                ),
                (
                    "is_featured",
                    models.BooleanField(
                        default=False, help_text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
                    ),
                ),
                (
                    "sort_order",
                    models.PositiveIntegerField(
                        default=0, help_text="–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                    ),
                ),
                (
                    "archetype",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("mentor", "–ú—É–¥—Ä—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫"),
                            ("professional", "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä"),
                            ("peer", "–õ—É—á—à–∏–π –¥—Ä—É–≥"),
                        ],
                        help_text="–ê—Ä—Ö–µ—Ç–∏–ø —Ç—Ä–µ–Ω–µ—Ä–∞ –¥–ª—è –≤–∏–¥–µ–æ",
                        max_length=20,
                    ),
                ),
            ],
            options={
                "verbose_name": "R2 –í–∏–¥–µ–æ",
                "verbose_name_plural": "R2 –í–∏–¥–µ–æ",
                "db_table": "r2_videos",
            },
        ),
        migrations.CreateModel(
            name="WorkoutExecution",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("exercise_data", models.JSONField()),
                ("calories_burned", models.PositiveIntegerField(blank=True, null=True)),
                ("xp_earned", models.PositiveIntegerField(default=0)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="workout_executions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "workout",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="executions",
                        to="workouts.dailyworkout",
                    ),
                ),
            ],
            options={
                "db_table": "workout_executions",
                "ordering": ["-started_at"],
            },
        ),
        migrations.CreateModel(
            name="WorkoutPlan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "duration_weeks",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(12),
                        ]
                    ),
                ),
                ("plan_data", models.JSONField()),
                ("ai_analysis", models.JSONField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft - awaiting confirmation"),
                            ("CONFIRMED", "Confirmed - ready to start"),
                            ("ACTIVE", "Active - in progress"),
                            ("COMPLETED", "Completed"),
                        ],
                        default="DRAFT",
                        max_length=10,
                    ),
                ),
                ("last_adaptation_date", models.DateTimeField(blank=True, null=True)),
                ("adaptation_count", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_confirmed", models.BooleanField(default=False)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="workout_plans",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "workout_plans",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="dailyworkout",
            name="plan",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="daily_workouts",
                to="workouts.workoutplan",
            ),
        ),
        migrations.CreateModel(
            name="DailyPlaylistItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order", models.PositiveIntegerField()),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("intro", "Intro"),
                            ("warmup", "Warm-up"),
                            ("main", "Main Exercise Clip"),
                            ("transition", "Transition"),
                            ("cooldown", "Cooldown / Stretch"),
                            ("timer", "Timer"),
                            ("motivation", "Motivation"),
                            ("breathing", "Breathing"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "duration_seconds",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("overlay", models.JSONField(blank=True, default=dict)),
                (
                    "day",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="playlist_items",
                        to="workouts.dailyworkout",
                    ),
                ),
                (
                    "video",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="used_in_playlist",
                        to="workouts.r2video",
                    ),
                ),
            ],
            options={
                "db_table": "daily_playlist_items",
                "ordering": ["day_id", "order"],
                "indexes": [
                    models.Index(
                        fields=["day", "order"], name="daily_playl_day_id_912e4a_idx"
                    ),
                    models.Index(fields=["role"], name="daily_playl_role_279359_idx"),
                ],
                "unique_together": {("day", "order")},
            },
        ),
        migrations.CreateModel(
            name="WeeklyNotification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("week", models.PositiveSmallIntegerField()),
                (
                    "archetype",
                    models.CharField(
                        choices=[("111", "–ù"), ("222", "–ü"), ("333", "–†")], max_length=3
                    ),
                ),
                ("lesson_title", models.CharField(max_length=120)),
                ("lesson_script", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("read_at", models.DateTimeField(blank=True, null=True)),
                ("is_read", models.BooleanField(default=False)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="weekly_notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "weekly_notifications",
                "ordering": ["-week", "-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "is_read"],
                        name="weekly_noti_user_id_ddf0af_idx",
                    ),
                    models.Index(fields=["week"], name="weekly_noti_week_45b255_idx"),
                ],
                "unique_together": {("user", "week")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="dailyworkout",
            unique_together={("plan", "day_number")},
        ),
    ]
