#!/usr/bin/env python3
"""
estimate_upload.py
-----------------
–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∏ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞—Ç–µ–∫–∏ –≤ R2.
"""

from pathlib import Path
from collections import defaultdict
import time

PROJECT_ROOT = Path.cwd()
SELECTED_MEDIA = PROJECT_ROOT / "selected_media"

def estimate():
    print("üìä –ê–Ω–∞–ª–∏–∑ –º–µ–¥–∏–∞—Ç–µ–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ R2")
    print("=" * 60)
    
    if not SELECTED_MEDIA.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ {SELECTED_MEDIA} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = defaultdict(lambda: {'count': 0, 'size': 0})
    total_size = 0
    total_count = 0
    
    print("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...")
    for file_path in SELECTED_MEDIA.rglob('*'):
        if file_path.is_file():
            size = file_path.stat().st_size
            category = str(file_path.relative_to(SELECTED_MEDIA).parts[0])
            
            stats[category]['count'] += 1
            stats[category]['size'] += size
            total_size += size
            total_count += 1
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\nüìÅ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    print("-" * 60)
    print(f"{'–ö–∞—Ç–µ–≥–æ—Ä–∏—è':<20} {'–§–∞–π–ª–æ–≤':>10} {'–†–∞–∑–º–µ—Ä':>15}")
    print("-" * 60)
    
    for category in sorted(stats.keys()):
        count = stats[category]['count']
        size_gb = stats[category]['size'] / (1024**3)
        print(f"{category:<20} {count:>10} {size_gb:>14.2f} GB")
    
    print("-" * 60)
    total_gb = total_size / (1024**3)
    print(f"{'–ò–¢–û–ì–û':<20} {total_count:>10} {total_gb:>14.2f} GB")
    
    # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    print("\n‚è±Ô∏è  –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏:")
    print("-" * 60)
    
    speeds = {
        "–ú–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (5 Mbps)": 5 * 1024 * 1024 / 8,  # –±–∞–π—Ç/—Å–µ–∫
        "–°—Ä–µ–¥–Ω–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (25 Mbps)": 25 * 1024 * 1024 / 8,
        "–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (100 Mbps)": 100 * 1024 * 1024 / 8,
        "–ì–∏–≥–∞–±–∏—Ç (500 Mbps —Ä–µ–∞–ª—å–Ω–∞—è)": 500 * 1024 * 1024 / 8,
    }
    
    for speed_name, speed_bytes in speeds.items():
        time_seconds = total_size / speed_bytes
        hours = int(time_seconds // 3600)
        minutes = int((time_seconds % 3600) // 60)
        
        if hours > 0:
            time_str = f"{hours}—á {minutes}–º–∏–Ω"
        else:
            time_str = f"{minutes}–º–∏–Ω"
        
        print(f"{speed_name:<30} ~{time_str}")
    
    # –°—Ç–æ–∏–º–æ—Å—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ R2
    print("\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Cloudflare R2:")
    print("-" * 60)
    
    # R2 pricing: $0.015 per GB per month
    monthly_cost = total_gb * 0.015
    yearly_cost = monthly_cost * 12
    
    print(f"–ú–µ—Å—è—Ü:  ${monthly_cost:.2f}")
    print(f"–ì–æ–¥:    ${yearly_cost:.2f}")
    print("\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ò—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫ –≤ R2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("-" * 60)
    
    if total_gb > 100:
        print("‚Ä¢ –†–∞–∑–º–µ—Ä > 100GB - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∂–∞—Ç—å –Ω–æ—á—å—é")
        print("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç upload_to_r2.py —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–∫–∞—á–∫–∏")
    
    if total_count > 5000:
        print(f"‚Ä¢ –ú–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤ ({total_count}) - –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è")
        print("‚Ä¢ –°–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 5 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è")
    
    print("‚Ä¢ –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ r2_upload_state.json")
    print("‚Ä¢ –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –¥–æ–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏")
    
    print("\n" + "=" * 60)
    print("–ì–æ—Ç–æ–≤–æ –∫ –∑–∞–≥—Ä—É–∑–∫–µ! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python upload_to_r2.py")

if __name__ == "__main__":
    estimate()