#!/usr/bin/env python3
"""
–û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–ò–ó–í–û–î–°–¢–í–ï–ù–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–π –∫–æ–¥, –∏—Å–∫–ª—é—á–∞—è –≤—Å–µ validator —Å–∫—Ä–∏–ø—Ç—ã –∏ backup
"""
import os
import re
import ast
import sys
from pathlib import Path
from typing import List

class ProductionValidator:
    def __init__(self, project_root: str):
        self.project_root = Path(project_root)
        
    def get_production_files(self) -> List[Path]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        python_files = []
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        exclude_dirs = {
            '.venv', 'venv', '.git', '__pycache__', 'node_modules', 'env'
        }
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª—ã validator'–æ–≤ –∏ backup
        exclude_files = {
            'comprehensive_legacy_validator.py',
            'mass_exercise_refactor.py', 
            'final_validation_accurate.py',
            'production_final_validator.py',
            'create_exercises.py',
            'debug_video_system.py',
            'test_full_system.py'
        }
        
        for root, dirs, files in os.walk(self.project_root):
            # –ò—Å–∫–ª—é—á–∞–µ–º backup –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            dirs[:] = [d for d in dirs if d not in exclude_dirs and 'backup' not in d.lower()]
            
            for file in files:
                if file.endswith('.py') and file not in exclude_files:
                    file_path = Path(root) / file
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏
                    if not any('backup' in part.lower() for part in file_path.parts):
                        python_files.append(file_path)
        
        return python_files
    
    def check_critical_issues(self, content: str) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"""
        issues = []
        
        # 1. Exercise.objects (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å CSVExercise.objects)
        if re.search(r'\bExercise\.objects\b', content):
            issues.append("Exercise.objects ‚Üí CSVExercise.objects")
        
        # 2. Exercise.DoesNotExist (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å CSVExercise.DoesNotExist)
        if re.search(r'\bExercise\.DoesNotExist\b', content):
            issues.append("Exercise.DoesNotExist ‚Üí CSVExercise.DoesNotExist")
        
        # 3. –ò–º–ø–æ—Ä—Ç —Å—Ç–∞—Ä–æ–π Exercise –º–æ–¥–µ–ª–∏
        if re.search(r'from\s+apps\.workouts\.models\s+import\s+.*\bExercise\b(?!Validation)', content):
            issues.append("Import Exercise ‚Üí Import CSVExercise")
        
        # 4. Exercise( –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        if re.search(r'\bExercise\(', content):
            issues.append("Exercise() ‚Üí CSVExercise()")
        
        return issues
    
    def run_production_validation(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é"""
        print("üè≠ –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–ò–ó–í–û–î–°–¢–í–ï–ù–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø")
        print("=" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        production_files = self.get_production_files()
        print(f"üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è {len(production_files)} –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
        critical_issues = 0
        problematic_files = []
        
        for file_path in production_files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
                try:
                    ast.parse(content)
                except SyntaxError:
                    critical_issues += 1
                    problematic_files.append((file_path, "–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞"))
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
                issues = self.check_critical_issues(content)
                if issues:
                    critical_issues += len(issues)
                    problematic_files.append((file_path, issues))
                    
            except Exception as e:
                critical_issues += 1
                problematic_files.append((file_path, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}"))
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–ò–ó–í–û–î–°–¢–í–ï–ù–ù–û–ô –í–ê–õ–ò–î–ê–¶–ò–ò:")
        
        if critical_issues == 0:
            print("‚úÖ –û–¢–õ–ò–ß–ù–û: Exercise –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            print("‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç CSVExercise")
            print("‚úÖ –í—Å–µ .objects –≤—ã–∑–æ–≤—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç CSVExercise")
            print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.check_database()
            
            print("\nüéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò –£–°–ü–ï–®–ù–´!")
            print("Phase 5.6 Exercise cleanup: –ó–ê–í–ï–†–®–Å–ù ‚úÖ")
            return True
        else:
            print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {critical_issues} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º")
            print(f"üìù –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã ({len(problematic_files)}):")
            for file_path, issues in problematic_files[:5]:
                print(f"   {file_path}:")
                if isinstance(issues, list):
                    for issue in issues:
                        print(f"     - {issue}")
                else:
                    print(f"     - {issues}")
            return False
    
    def check_database(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            import django
            os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
            django.setup()
            
            from apps.workouts.models import CSVExercise
            from apps.ai_integration.fallback_service import FallbackService
            from apps.core.services.exercise_validation import ExerciseValidationService
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            count = CSVExercise.objects.count()
            print(f"‚úÖ CSVExercise —Ä–∞–±–æ—Ç–∞–µ—Ç, –∑–∞–ø–∏—Å–µ–π: {count}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
            fallback = FallbackService()
            print("‚úÖ FallbackService —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            validator = ExerciseValidationService() 
            print("‚úÖ ExerciseValidationService —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    validator = ProductionValidator(os.getcwd())
    success = validator.run_production_validation()
    return 0 if success else 1

if __name__ == '__main__':
    sys.exit(main())