#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞–π–ø–ª–∞–π–Ω–∞ —Ä–∞–±–æ—Ç—ã —Å –≤–∏–¥–µ–æ –≤ AI Fitness Coach
"""

import os
import sys
import django
import csv
from typing import Dict, List, Set

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
django.setup()

from apps.workouts.models import VideoClip, Exercise, WorkoutPlan, DailyWorkout
from apps.content.models import MediaAsset
from django.db.models import Count
import requests

class VideoAnalyzer:
    def __init__(self):
        self.r2_base = 'https://pub-d620683e68bf49abb422f1bc95810ff7.r2.dev'
        self.analysis_results = {}
        
    def analyze_models_structure(self):
        """–≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥–µ–ª–µ–π"""
        print("=" * 60)
        print("üîç –≠–¢–ê–ü 1: –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ú–û–î–ï–õ–ï–ô")
        print("=" * 60)
        
        # VideoClip –∞–Ω–∞–ª–∏–∑
        print("\nüìπ VideoClip –º–æ–¥–µ–ª—å:")
        video_types = VideoClip.objects.values('type').annotate(count=Count('type')).order_by('type')
        
        for vtype in video_types:
            print(f"  {vtype['type']}: {vtype['count']} –∑–∞–ø–∏—Å–µ–π")
        
        # –ü–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞–º
        print("\nüë• –ü–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞–º:")
        archetypes = VideoClip.objects.values('archetype').annotate(count=Count('archetype')).order_by('archetype')
        
        for arch in archetypes:
            print(f"  {arch['archetype']}: {arch['count']} –≤–∏–¥–µ–æ")
        
        # MediaAsset –∞–Ω–∞–ª–∏–∑
        print("\nüìÅ MediaAsset –º–æ–¥–µ–ª—å:")
        categories = MediaAsset.objects.values('category').annotate(count=Count('category')).order_by('category')
        
        for cat in categories:
            print(f"  {cat['category']}: {cat['count']} —Ñ–∞–π–ª–æ–≤")
        
        # –°–≤—è–∑–∏ —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏
        print("\nüîó –°–≤—è–∑–∏ —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏:")
        exercise_videos = VideoClip.objects.filter(exercise__isnull=False).count()
        motivation_videos = VideoClip.objects.filter(exercise__isnull=True).count()
        
        print(f"  –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º: {exercise_videos}")
        print(f"  –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ (–±–µ–∑ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π): {motivation_videos}")
        
        # URL –∞–Ω–∞–ª–∏–∑
        print("\nüåê URL —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:")
        r2_videos = VideoClip.objects.filter(url__contains=self.r2_base).count()
        other_videos = VideoClip.objects.exclude(url__contains=self.r2_base).count()
        
        print(f"  R2 storage URLs: {r2_videos}")
        print(f"  –î—Ä—É–≥–∏–µ URLs: {other_videos}")
        
        self.analysis_results['models'] = {
            'video_types': dict(video_types.values_list('type', 'count')),
            'archetypes': dict(archetypes.values_list('archetype', 'count')),
            'categories': dict(categories.values_list('category', 'count')),
            'exercise_videos': exercise_videos,
            'motivation_videos': motivation_videos,
            'r2_videos': r2_videos,
            'other_videos': other_videos
        }

    def analyze_video_playlist_builder(self):
        """–≠—Ç–∞–ø 2: –ê–Ω–∞–ª–∏–∑ VideoPlaylistBuilder"""
        print("\n=" * 60)
        print("üîç –≠–¢–ê–ü 2: –ê–ù–ê–õ–ò–ó VideoPlaylistBuilder")
        print("=" * 60)
        
        from apps.workouts.services import VideoPlaylistBuilder
        
        print("\nüìã –ú–µ—Ç–æ–¥—ã VideoPlaylistBuilder:")
        methods = [method for method in dir(VideoPlaylistBuilder) if not method.startswith('_')]
        for method in methods:
            print(f"  - {method}")
        
        print("\nüé¨ –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã (–ª–æ–≥–∏–∫–∞ –≤–∏–¥–µ–æ):")
        private_methods = [method for method in dir(VideoPlaylistBuilder) if method.startswith('_') and 'video' in method]
        for method in private_methods:
            print(f"  - {method}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥
        builder = VideoPlaylistBuilder()
        
        print("\nüîç –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–æ–¥–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ:")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º intro –≤–∏–¥–µ–æ
        try:
            intro_result = builder._get_intro_video(1, 'bro')
            print(f"  _get_intro_video(1, 'bro'): {'‚úÖ —Ä–∞–±–æ—Ç–∞–µ—Ç' if intro_result else '‚ùå –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
        except Exception as e:
            print(f"  _get_intro_video: ‚ùå –æ—à–∏–±–∫–∞ - {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º weekly –≤–∏–¥–µ–æ
        try:
            weekly_result = builder._get_weekly_motivation_video(1, 'bro')
            print(f"  _get_weekly_motivation_video(1, 'bro'): {'‚úÖ —Ä–∞–±–æ—Ç–∞–µ—Ç' if weekly_result else '‚ùå –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
        except Exception as e:
            print(f"  _get_weekly_motivation_video: ‚ùå –æ—à–∏–±–∫–∞ - {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º progress –≤–∏–¥–µ–æ
        try:
            progress_result = builder._get_progress_video(2, 'bro')
            print(f"  _get_progress_video(2, 'bro'): {'‚úÖ —Ä–∞–±–æ—Ç–∞–µ—Ç' if progress_result else '‚ùå –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
        except Exception as e:
            print(f"  _get_progress_video: ‚ùå –æ—à–∏–±–∫–∞ - {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º final –≤–∏–¥–µ–æ
        try:
            final_result = builder._get_final_video('bro')
            print(f"  _get_final_video('bro'): {'‚úÖ —Ä–∞–±–æ—Ç–∞–µ—Ç' if final_result else '‚ùå –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
        except Exception as e:
            print(f"  _get_final_video: ‚ùå –æ—à–∏–±–∫–∞ - {e}")

    def check_r2_correspondence(self):
        """–≠—Ç–∞–ø 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å R2 —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º"""
        print("\n=" * 60)
        print("üîç –≠–¢–ê–ü 3: –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –° R2 –•–†–ê–ù–ò–õ–ò–©–ï–ú")
        print("=" * 60)
        
        # –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª—ã
        csv_files = {
            'exercises': '/Users/alexbel/Desktop/AI Fitness Coach/media_lists/EXERCISES_271_VIDEOS.csv',
            'motivation': '/Users/alexbel/Desktop/AI Fitness Coach/media_lists/MOTIVATION_345_VIDEOS.csv'
        }
        
        csv_data = {}
        
        for file_type, file_path in csv_files.items():
            if os.path.exists(file_path):
                with open(file_path, 'r', encoding='utf-8') as f:
                    reader = csv.DictReader(f)
                    csv_data[file_type] = list(reader)
                print(f"üìä {file_type.upper()}: {len(csv_data[file_type])} –∑–∞–ø–∏—Å–µ–π –≤ CSV")
            else:
                print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                csv_data[file_type] = []
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        print("\nüîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:")
        
        if csv_data.get('exercises'):
            # –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
            csv_exercises = {row['exercise_slug'] for row in csv_data['exercises']}
            db_exercises = set(Exercise.objects.values_list('slug', flat=True))
            
            print(f"\nüí™ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:")
            print(f"  CSV: {len(csv_exercises)} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
            print(f"  –ë–î: {len(db_exercises)} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
            print(f"  –°–æ–≤–ø–∞–¥–µ–Ω–∏—è: {len(csv_exercises & db_exercises)}")
            print(f"  –¢–æ–ª—å–∫–æ –≤ CSV: {len(csv_exercises - db_exercises)}")
            print(f"  –¢–æ–ª—å–∫–æ –≤ –ë–î: {len(db_exercises - csv_exercises)}")
        
        if csv_data.get('motivation'):
            # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
            csv_motivation_files = {row['file_name'] for row in csv_data['motivation']}
            db_motivation_files = set(MediaAsset.objects.filter(
                category__startswith='motivation'
            ).values_list('file_name', flat=True))
            
            print(f"\nüéØ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ:")
            print(f"  CSV: {len(csv_motivation_files)} —Ñ–∞–π–ª–æ–≤")
            print(f"  –ë–î: {len(db_motivation_files)} —Ñ–∞–π–ª–æ–≤")
            print(f"  –°–æ–≤–ø–∞–¥–µ–Ω–∏—è: {len(csv_motivation_files & db_motivation_files)}")
            print(f"  –¢–æ–ª—å–∫–æ –≤ CSV: {len(csv_motivation_files - db_motivation_files)}")
            print(f"  –¢–æ–ª—å–∫–æ –≤ –ë–î: {len(db_motivation_files - csv_motivation_files)}")

    def find_placeholders_and_test_data(self):
        """–≠—Ç–∞–ø 4: –ü–æ–∏—Å–∫ –∑–∞–≥–ª—É—à–µ–∫ –∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("\n=" * 60)
        print("üîç –≠–¢–ê–ü 4: –ü–û–ò–°–ö –ó–ê–ì–õ–£–®–ï–ö –ò –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
        print("=" * 60)
        
        # –ò—â–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ URL
        suspicious_patterns = [
            'test', 'demo', 'placeholder', 'temp', 'example', 'sample', 'mock'
        ]
        
        print("\nüîç –ê–Ω–∞–ª–∏–∑ URL –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥–ª—É—à–µ–∫:")
        
        for pattern in suspicious_patterns:
            video_count = VideoClip.objects.filter(url__icontains=pattern).count()
            media_count = MediaAsset.objects.filter(file_url__icontains=pattern).count()
            
            if video_count > 0 or media_count > 0:
                print(f"  '{pattern}': VideoClip={video_count}, MediaAsset={media_count}")
        
        # –ò—â–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ URL
        print("\nüåê –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ URL:")
        
        # URL –Ω–µ –∏–∑ R2
        non_r2_videos = VideoClip.objects.exclude(url__contains=self.r2_base)[:10]
        if non_r2_videos:
            print(f"\n‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ –∏–∑ R2 —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ ({non_r2_videos.count()} –≤—Å–µ–≥–æ):")
            for video in non_r2_videos:
                print(f"  - {video.type}/{video.archetype}: {video.url[:100]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL (–ø–µ—Ä–≤—ã–µ 5)
        print("\nüåç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ URL (—Ç–µ—Å—Ç –ø–µ—Ä–≤—ã—Ö 5):")
        test_videos = VideoClip.objects.filter(url__contains=self.r2_base)[:5]
        
        for video in test_videos:
            try:
                response = requests.head(video.url, timeout=5)
                status = f"‚úÖ {response.status_code}" if response.status_code == 200 else f"‚ùå {response.status_code}"
                print(f"  {video.type}: {status}")
            except Exception as e:
                print(f"  {video.type}: ‚ùå –æ—à–∏–±–∫–∞ - {str(e)[:50]}...")

    def find_count_mismatches(self):
        """–≠—Ç–∞–ø 5: –í—ã—è–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        print("\n=" * 60)
        print("üîç –≠–¢–ê–ü 5: –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –ö–û–õ–ò–ß–ï–°–¢–í–ê –ò –ù–ê–ó–í–ê–ù–ò–ô")
        print("=" * 60)
        
        # –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ —Ç–∏–ø–∞–º –≤–∏–¥–µ–æ
        expected_counts = {
            'intro': 315,  # 105 –¥–Ω–µ–π √ó 3 –∞—Ä—Ö–µ—Ç–∏–ø–∞
            'weekly': 24,  # 8 –Ω–µ–¥–µ–ª—å √ó 3 –∞—Ä—Ö–µ—Ç–∏–ø–∞ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –±—ã–ª–æ 18)
            'progress': 9,  # 3 —ç—Ç–∞–ø–∞ √ó 3 –∞—Ä—Ö–µ—Ç–∏–ø–∞
            'final': 3,    # 3 –∞—Ä—Ö–µ—Ç–∏–ø–∞
            'technique': 271,  # –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
            'instruction': 271 * 3 * 3,  # —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è √ó –∞—Ä—Ö–µ—Ç–∏–ø—ã √ó –º–æ–¥–µ–ª–∏
            'reminder': 271 * 3 * 3,     # —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è √ó –∞—Ä—Ö–µ—Ç–∏–ø—ã √ó –º–æ–¥–µ–ª–∏
            'mistake': 271  # –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        }
        
        print("\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:")
        print("-" * 60)
        
        for video_type, expected in expected_counts.items():
            actual = VideoClip.objects.filter(type=video_type, is_active=True).count()
            status = "‚úÖ" if actual == expected else "‚ùå"
            diff = actual - expected
            diff_str = f"({diff:+d})" if diff != 0 else ""
            
            print(f"  {video_type:12}: {actual:4d} / {expected:4d} {status} {diff_str}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞–º
        print("\nüë• –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞–º:")
        print("-" * 60)
        
        archetypes = ['bro', 'sergeant', 'intellectual']
        for archetype in archetypes:
            count = VideoClip.objects.filter(archetype=archetype, is_active=True).count()
            print(f"  {archetype:12}: {count:4d} –≤–∏–¥–µ–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–≤—è–∑–∏
        print("\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π:")
        print("-" * 60)
        
        exercises_without_videos = Exercise.objects.filter(video_clips__isnull=True).count()
        total_exercises = Exercise.objects.count()
        
        print(f"  –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –±–µ–∑ –≤–∏–¥–µ–æ: {exercises_without_videos} –∏–∑ {total_exercises}")
        
        # –ò—â–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        print("\nüîÑ –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:")
        print("-" * 60)
        
        # –î—É–±–ª–∏–∫–∞—Ç—ã URL
        from django.db.models import Count
        duplicate_urls = VideoClip.objects.values('url').annotate(
            count=Count('url')
        ).filter(count__gt=1)
        
        print(f"  –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è URL: {duplicate_urls.count()}")
        
        if duplicate_urls.exists():
            print("  –ü—Ä–∏–º–µ—Ä—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:")
            for dup in duplicate_urls[:3]:
                print(f"    {dup['url'][:60]}... ({dup['count']} —Ä–∞–∑)")

    def generate_final_report(self):
        """–≠—Ç–∞–ø 6: –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
        print("\n" + "=" * 60)
        print("üìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
        print("=" * 60)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_videos = VideoClip.objects.count()
        total_media = MediaAsset.objects.count()
        active_videos = VideoClip.objects.filter(is_active=True).count()
        
        print(f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  –í—Å–µ–≥–æ VideoClip: {total_videos}")
        print(f"  –ê–∫—Ç–∏–≤–Ω—ã—Ö VideoClip: {active_videos}")
        print(f"  –í—Å–µ–≥–æ MediaAsset: {total_media}")
        
        # –ü—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\n‚ö†Ô∏è –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        if VideoClip.objects.filter(type='technique').count() < 100:
            issues.append("–ú–∞–ª–æ –≤–∏–¥–µ–æ —Å —Ç–µ—Ö–Ω–∏–∫–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
        
        if VideoClip.objects.filter(type='instruction').count() == 0:
            issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–æ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ")
        
        if VideoClip.objects.filter(type='reminder').count() == 0:
            issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∏–¥–µ–æ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        
        non_r2_count = VideoClip.objects.exclude(url__contains=self.r2_base).count()
        if non_r2_count > 0:
            issues.append(f"{non_r2_count} –≤–∏–¥–µ–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç R2 —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
        
        if not issues:
            print("  ‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        else:
            for i, issue in enumerate(issues, 1):
                print(f"  {i}. {issue}")
        
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("  1. –°–æ–∑–¥–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –≤–∏–¥–µ–æ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π (technique, instruction, reminder)")
        print("  2. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ URL —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ R2 —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
        print("  3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –≤ R2")
        print("  4. –î–æ–±–∞–≤–∏—Ç—å fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∏–¥–µ–æ")
        print("  5. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    print("üöÄ –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ê–ë–û–¢–´ –° –í–ò–î–ï–û –í AI FITNESS COACH")
    print("=" * 60)
    
    analyzer = VideoAnalyzer()
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —ç—Ç–∞–ø—ã –∞–Ω–∞–ª–∏–∑–∞
        analyzer.analyze_models_structure()
        analyzer.analyze_video_playlist_builder()
        analyzer.check_r2_correspondence()
        analyzer.find_placeholders_and_test_data()
        analyzer.find_count_mismatches()
        analyzer.generate_final_report()
        
        print(f"\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        print("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ —Å –≤–∏–¥–µ–æ –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–ª—É—á–µ–Ω–∞.")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()