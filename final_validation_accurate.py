#!/usr/bin/env python3
"""
–¢–û–ß–ù–ê–Ø –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–û–°–õ–ï –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê
–ò—Å–∫–ª—é—á–∞–µ—Ç backup –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
"""
import os
import re
import ast
import sys
from pathlib import Path
from typing import List, Dict, Set

class FinalAccurateValidator:
    def __init__(self, project_root: str):
        self.project_root = Path(project_root)
        self.real_issues = []
        
    def get_active_python_files(self) -> List[Path]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ Python —Ñ–∞–π–ª—ã (–Ω–µ backup)"""
        python_files = []
        exclude_dirs = {
            '.venv', 'venv', '.git', '__pycache__', 'node_modules', 'env',
            # –ò—Å–∫–ª—é—á–∞–µ–º –í–°–ï backup –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ backup –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        for item in self.project_root.iterdir():
            if item.is_dir() and 'backup' in item.name.lower():
                exclude_dirs.add(item.name)
        
        for root, dirs, files in os.walk(self.project_root):
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            dirs[:] = [d for d in dirs if d not in exclude_dirs and not d.startswith('backup')]
            
            for file in files:
                if file.endswith('.py'):
                    file_path = Path(root) / file
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏—Å–∫–ª—é—á–∞–µ–º –ª—é–±—ã–µ —Ñ–∞–π–ª—ã –≤ backup –ø—É—Ç—è—Ö
                    if not any('backup' in part.lower() for part in file_path.parts):
                        python_files.append(file_path)
        
        return python_files
    
    def check_forbidden_patterns(self, content: str, file_path: Path) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –∏—Å–∫–ª—é—á–∞—è –¥–æ–ø—É—Å—Ç–∏–º—ã–µ"""
        issues = []
        
        # 1. Exercise.objects –∏–ª–∏ Exercise.DoesNotExist (–Ω–æ –ù–ï CSVExercise)
        if re.search(r'\bExercise\.objects\b', content):
            issues.append("‚ùå Exercise.objects –≤–º–µ—Å—Ç–æ CSVExercise.objects")
        
        if re.search(r'\bExercise\.DoesNotExist\b', content):
            issues.append("‚ùå Exercise.DoesNotExist –≤–º–µ—Å—Ç–æ CSVExercise.DoesNotExist")
        
        # 2. –ò–º–ø–æ—Ä—Ç Exercise –º–æ–¥–µ–ª–∏ (–Ω–æ –ù–ï ExerciseValidation –∏ —Ç–¥)
        if re.search(r'from\s+apps\.workouts\.models\s+import\s+.*\bExercise\b(?!Validation)', content):
            issues.append("‚ùå –ò–º–ø–æ—Ä—Ç Exercise –º–æ–¥–µ–ª–∏")
        
        # 3. Exercise( –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä (–Ω–æ –ù–ï CSVExercise)
        if re.search(r'\bExercise\(', content):
            issues.append("‚ùå Exercise() –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –≤–º–µ—Å—Ç–æ CSVExercise()")
        
        # 4. muscle_groups –ø–æ–ª–µ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ –≤ Phase 5.6)
        if re.search(r'\.muscle_groups\b', content):
            issues.append("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—è muscle_groups")
        
        # 5. equipment_needed –ø–æ–ª–µ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ –≤ Phase 5.6)  
        if re.search(r'\.equipment_needed\b', content):
            issues.append("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—è equipment_needed")
        
        # 6. alternatives –ø–æ–ª–µ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ –≤ Phase 5.6)
        if re.search(r'\.alternatives\b', content):
            issues.append("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—è alternatives")
        
        return issues
    
    def validate_django_imports(self, file_path: Path) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ Django –∏–º–ø–æ—Ä—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"""
        issues = []
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º AST –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
            try:
                ast.parse(content)
            except SyntaxError as e:
                issues.append(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                return issues
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            file_issues = self.check_forbidden_patterns(content, file_path)
            issues.extend(file_issues)
                
        except Exception as e:
            issues.append(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        
        return issues
    
    def run_validation(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—á–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é"""
        print("üéØ –¢–û–ß–ù–ê–Ø –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø")
        print("=" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
        python_files = self.get_active_python_files()
        print(f"üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è {len(python_files)} –∞–∫—Ç–∏–≤–Ω—ã—Ö Python —Ñ–∞–π–ª–æ–≤")
        print("(backup –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        total_issues = 0
        problematic_files = []
        
        for file_path in python_files:
            issues = self.validate_django_imports(file_path)
            
            if issues:
                total_issues += len(issues)
                problematic_files.append(file_path)
                
                print(f"\n‚ùå {file_path}:")
                for issue in issues:
                    print(f"   {issue}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\n" + "=" * 50)
        print("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        
        if total_issues == 0:
            print("‚úÖ –ò–î–ï–ê–õ–¨–ù–û! –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã Exercise –º–æ–¥–µ–ª–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã")
            print("‚úÖ CSVExercise –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ") 
            print("‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
            print("‚úÖ –í—Å–µ –ø–æ–ª—è Phase 5.6 —É–¥–∞–ª–µ–Ω—ã")
            print("\nüéâ –†–ï–§–ê–ö–¢–û–†–ò–ù–ì –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–í–ï–†–®–Å–ù!")
        else:
            print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {total_issues} –ø—Ä–æ–±–ª–µ–º –≤ {len(problematic_files)} —Ñ–∞–π–ª–∞—Ö")
            print(f"üìù –§–∞–π–ª—ã —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏:")
            for file_path in problematic_files[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"   - {file_path}")
            if len(problematic_files) > 10:
                print(f"   ... –∏ –µ—â—ë {len(problematic_files) - 10} —Ñ–∞–π–ª–æ–≤")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.check_database_status()
        
        return total_issues == 0
    
    def check_database_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print(f"\nüóÉÔ∏è –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Django
            import django
            os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
            django.setup()
            
            from apps.workouts.models import CSVExercise
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º CSVExercise
            total_exercises = CSVExercise.objects.count()
            active_exercises = CSVExercise.objects.filter(is_active=True).count()
            
            print(f"‚úÖ CSVExercise —Ä–∞–±–æ—Ç–∞–µ—Ç, –∑–∞–ø–∏—Å–µ–π: {total_exercises}")
            print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {active_exercises}")
            
            if total_exercises == 0:
                print("‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ - –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")

def main():
    print("üéØ –ó–ê–ü–£–°–ö –¢–û–ß–ù–û–ô –§–ò–ù–ê–õ–¨–ù–û–ô –í–ê–õ–ò–î–ê–¶–ò–ò")
    print("–ò—Å–∫–ª—é—á–∞—è backup –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
    print("=" * 60)
    
    project_root = os.getcwd()
    validator = FinalAccurateValidator(project_root)
    
    success = validator.run_validation()
    
    if success:
        print("\nüèÜ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò –£–°–ü–ï–®–ù–´!")
        print("Phase 5.6 Exercise model cleanup: –ó–ê–í–ï–†–®–Å–ù ‚úÖ")
        return 0
    else:
        print("\n‚ö†Ô∏è –ï—â—ë –æ—Å—Ç–∞–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return 1

if __name__ == '__main__':
    sys.exit(main())