databases:
  - name: ai-fitness-coach-db
    databaseName: ai_fitness_coach
    plan: free
    region: frankfurt

services:
  - type: web
    name: ai-fitness-coach
    env: python
    buildCommand: "pip install -r requirements.txt && python manage.py collectstatic --noinput"
    preDeployCommand: >
      set -euo pipefail &&
      python manage.py migrate --noinput --fake-initial --verbosity 2 &&
      if [ -d ./data/raw ]; then
        python manage.py import_exercises_v2 --data-dir ./data/raw
      else
        echo "data/raw not found, skipping import_exercises_v2"
      fi &&
      python manage.py bootstrap_v2_min &&
      python manage.py load_weekly_lessons &&
      python manage.py seed_basic_data &&
      python manage.py seed_media_assets &&
      python manage.py setup_periodic_tasks &&
      python manage.py audit_video_clips --summary || true
    startCommand: "gunicorn config.wsgi:application --bind 0.0.0.0:$PORT --timeout 300"
    plan: starter
    region: frankfurt
    healthCheckPath: /healthz/
    envVars:
      - key: PYTHON_VERSION
        value: 3.12.7
      - key: DATABASE_URL
        fromDatabase:
          name: ai-fitness-coach-db
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: ai-fitness-coach-redis
          property: connectionString
      - key: SECRET_KEY
        generateValue: true
      - key: OPENAI_API_KEY
        sync: false
      - key: DJANGO_DEBUG
        value: "False"
      - key: RENDER
        value: "true"
      - key: USE_R2_STORAGE
        value: "True"
      - key: AWS_ACCESS_KEY_ID
        sync: false
      - key: AWS_SECRET_ACCESS_KEY
        sync: false
      - key: AWS_STORAGE_BUCKET_NAME
        value: "ai-fitness-media"
      - key: AWS_S3_ENDPOINT_URL
        value: "https://92568f8b8a15c68a9ece5fe08c66485b.r2.cloudflarestorage.com"
      - key: R2_PUBLIC_URL
        value: "https://pub-92568f8b8a15c68a9ece5fe08c66485b.r2.dev"
      - key: R2_SIGNED_URLS
        value: "True"
      - key: R2_SIGNED_URL_TTL
        value: "3600"
    autoDeploy: true
    scaling:
      minInstances: 1
      maxInstances: 2
  
  - type: worker
    name: ai-fitness-coach-celery
    env: python
    buildCommand: "pip install -r requirements.txt"
    startCommand: "celery -A config.celery app worker -l info"
    plan: starter
    region: frankfurt
    envVars:
      - key: PYTHON_VERSION
        value: 3.12.7
      - key: DATABASE_URL
        fromDatabase:
          name: ai-fitness-coach-db
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: ai-fitness-coach-redis
          property: connectionString
      - key: SECRET_KEY
        sync: false
      - key: OPENAI_API_KEY
        sync: false
      - key: DJANGO_DEBUG
        value: "False"
      - key: RENDER
        value: "true"
    autoDeploy: true
    
  - type: worker  
    name: ai-fitness-coach-beat
    env: python
    buildCommand: "pip install -r requirements.txt"
    startCommand: "celery -A config.celery app beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    plan: starter
    region: frankfurt
    envVars:
      - key: PYTHON_VERSION
        value: 3.12.7
      - key: DATABASE_URL
        fromDatabase:
          name: ai-fitness-coach-db
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: ai-fitness-coach-redis
          property: connectionString
      - key: SECRET_KEY
        sync: false
      - key: OPENAI_API_KEY
        sync: false
      - key: DJANGO_DEBUG
        value: "False"
      - key: RENDER
        value: "true"
    autoDeploy: true
    
  - type: redis
    name: ai-fitness-coach-redis
    plan: free
    region: frankfurt